# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Paul Vincent Craven
# This file is distributed under the same license as the Arcade package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
# derSuessmann <arcade-book-de@dersuessmann.de>, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: Arcade Fall 2018\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-07-11 14:00+0200\n"
"PO-Revision-Date: 2019-07-12 10:26+0200\n"
"Last-Translator: derSuessmann <arcade-book-de@dersuessmann.de>\n"
"Language: de\n"
"Language-Team: German <arcade-book-de@dersuessmann.de>\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"
"X-Generator: Gtranslator 3.32.1\n"

#: ../../source/chapters/08_functions/functions.rst:2
msgid "Creating Functions"
msgstr "Funktionen erstellen"

#: ../../source/chapters/08_functions/functions.rst:5
msgid "Creating Simple Functions"
msgstr "Einfache Funktionen erstellen"

#: ../../source/chapters/08_functions/functions.rst:7
msgid "Defining a function is rather easy."
msgstr "Eine Funktion zu definieren ist recht einfach."

#: ../../source/chapters/08_functions/functions.rst:9
msgid "Start with the keyword ``def``, which is short for \"define.\""
msgstr "Fange mit dem Schlüsselwort ``def``, kurz für *define*, an."

#: ../../source/chapters/08_functions/functions.rst:10
msgid ""
"Next, give the function a name. There are rules for function names. They "
"must:"
msgstr ""
"Als nächstes gib der Funktion einen Namen. Es gibt Regeln für Funktionsnamen."

#: ../../source/chapters/08_functions/functions.rst:12
msgid "Start with a lower case letter."
msgstr "Sie müssen mit einem Kleinbuchstaben anfangen."

#: ../../source/chapters/08_functions/functions.rst:13
msgid "After the first letter, only use letters, numbers, and underscores."
msgstr ""
"Nach dem ersten Buchstaben dürfen nur weitere Buchstaben, Ziffern und der "
"Unterstrich folgen."

#: ../../source/chapters/08_functions/functions.rst:14
msgid "Spaces are not allowed. Use underscores instead."
msgstr "Leerzeichen sind nicht erlaubt. Verwende stattdessen Unterstriche."

#: ../../source/chapters/08_functions/functions.rst:15
msgid ""
"While upper-case letters can be used, function names are normally all lower-"
"case."
msgstr ""
"Obwohl Großbuchstaben erlaubt sind, bestehen Funktionsnamen normalerweise "
"nur aus Kleinbuchstaben."

#: ../../source/chapters/08_functions/functions.rst:18
msgid ""
"After that, we have a set of parenthesis. Inside the parenthesis will go "
"**parameters**. We'll explain those in a bit."
msgstr ""
"Danach folgt ein Klammernpaar. In das Klammernpaar kommen die **Parameter**. "
"Wir erklären das in Kürze."

#: ../../source/chapters/08_functions/functions.rst:20
msgid "Next, a colon."
msgstr "Danach ein Doppelpunkt."

#: ../../source/chapters/08_functions/functions.rst:21
msgid "Everything that is part of the function will be indented four spaces."
msgstr ""
"Alles was Teil der Funktion ist, wird vier Leerzeichen weit eingerückt."

#: ../../source/chapters/08_functions/functions.rst:22
msgid ""
"Usually we start a function with a multi-line comment that explains what the "
"function does."
msgstr ""
"Üblicherweise starten wir eine Funktion mit einem mehrzeiligen Kommentar, "
"der erklärt, was die Funktion tut."

#: ../../source/chapters/08_functions/functions.rst:27
msgid ""
"Function definitions go *below* the ``import`` statements, and *above* the "
"rest of the program. While you can put them somewhere else, you shouldn't."
msgstr ""
"Funktionsdefinition gehören hinter die ``import``-Anweisungen und vor den "
"Rest des Programms. Du könntest sie auch woanders hinschreiben, aber das "
"solltest du nicht tun."

#: ../../source/chapters/08_functions/functions.rst:30
msgid "Below is a program that defines and uses the function twice."
msgstr ""
"Unten findest du ein Programm, das eine Funktion definiert und zweimal "
"verwendet."

#: ../../source/chapters/08_functions/functions.rst:33
msgid ""
"def print_hello():\n"
"    \"\"\" This is a comment that describes the function. \"\"\"\n"
"    print(\"Hello!\")\n"
"\n"
"\n"
"print_hello()\n"
"print_hello()"
msgstr ""
"def print_hello():\n"
"    \"\"\" This is a comment that describes the function. \"\"\"\n"
"    print(\"Hello!\")\n"
"\n"
"\n"
"print_hello()\n"
"print_hello()"

#: ../../source/chapters/08_functions/functions.rst:45
msgid ""
"You can define and use multiple functions. But all function definitions "
"should go before the main code."
msgstr ""
"Du kannst mehrere Funktionen definieren und verwenden, aber alle Funktionen "
"sollten vor dem Hauptprogramm stehen."

#: ../../source/chapters/08_functions/functions.rst:49
msgid ""
"def print_hello():\n"
"    print(\"Hello!\")\n"
"\n"
"\n"
"def print_goodbye():\n"
"    print(\"Bye!\")\n"
"\n"
"\n"
"print_hello()\n"
"print_goodbye()"
msgstr ""
"def print_hello():\n"
"    print(\"Hello!\")\n"
"\n"
"\n"
"def print_goodbye():\n"
"    print(\"Bye!\")\n"
"\n"
"\n"
"print_hello()\n"
"print_goodbye()"

#: ../../source/chapters/08_functions/functions.rst:64
msgid ""
"Actually, almost *all* code should go in a function. It is a good practice "
"to put the main starting point of your program in a function called ``main`` "
"and call it."
msgstr ""
"Es sollte sogar fast der gesamte Programmcode in Funktionen stehen. Es "
"gehört zu einer vorbildlichen Vorgehensweise, den Startpunkt deines "
"Programms in eine Funktion namens ``main`` zu packen und aufzurufen,"

#: ../../source/chapters/08_functions/functions.rst:68
msgid ""
"def print_hello():\n"
"    print(\"Hello!\")\n"
"\n"
"\n"
"def print_goodbye():\n"
"    print(\"Bye!\")\n"
"\n"
"\n"
"def main():\n"
"    \"\"\" This is my main program function \"\"\"\n"
"    print_hello()\n"
"    print_goodbye()\n"
"\n"
"\n"
"# Run the main program\n"
"main()"
msgstr ""
"def print_hello():\n"
"    print(\"Hello!\")\n"
"\n"
"\n"
"def print_goodbye():\n"
"    print(\"Bye!\")\n"
"\n"
"\n"
"def main():\n"
"    \"\"\" This is my main program function \"\"\"\n"
"    print_hello()\n"
"    print_goodbye()\n"
"\n"
"\n"
"# Run the main program\n"
"main()"

#: ../../source/chapters/08_functions/functions.rst:90
msgid ""
"An even better way of writing this is with a check to make sure we are "
"trying to run this file, and not import it. The statement for this looks a "
"little weird. In fact, it is weird enough I just look it up and copy/paste "
"it any time I want to use it. Don't worry about understanding how it works "
"yet."
msgstr ""
"Eine noch bessere Vorgehensweise ist zu prüfen, ob wir die Datei ausführen "
"und nicht importieren wollen. Die Anweisung dazu sieht etwas seltsam aus. "
"Sie ist tatsächlich seltsam genug, dass ich sie jedes mal mit Kopieren und "
"Einfügen verwende. Mach dir keine Sorgen, wenn du noch nicht verstehst, wie "
"das funktioniert."

#: ../../source/chapters/08_functions/functions.rst:96
msgid ""
"def print_hello():\n"
"    print(\"Hello!\")\n"
"\n"
"\n"
"def print_goodbye():\n"
"    print(\"Bye!\")\n"
"\n"
"\n"
"def main():\n"
"    print_hello()\n"
"    print_goodbye()\n"
"\n"
"\n"
"# Only run the main function if we are running this file. Don't run it\n"
"# if we are importing this file.\n"
"if __name__ == \"__main__\":\n"
"    main()"
msgstr ""
"def print_hello():\n"
"    print(\"Hello!\")\n"
"\n"
"\n"
"def print_goodbye():\n"
"    print(\"Bye!\")\n"
"\n"
"\n"
"def main():\n"
"    print_hello()\n"
"    print_goodbye()\n"
"\n"
"\n"
"# Only run the main function if we are running this file. Don't run it\n"
"# if we are importing this file.\n"
"if __name__ == \"__main__\":\n"
"    main()"

#: ../../source/chapters/08_functions/functions.rst:120
msgid "Taking In Data"
msgstr "Daten übernehmen"

#: ../../source/chapters/08_functions/functions.rst:122
msgid "Functions are even more powerful if we have them take in data."
msgstr ""
"Funktionen sind noch leistungsfähiger, wenn wir sie Daten übernehmen lassen."

#: ../../source/chapters/08_functions/functions.rst:124
msgid ""
"Here is a simple example that will take in a number and print it. Notice how "
"I've created a new variable ``my_number`` in between the parenthesis. This "
"variable will be given whatever value is passed in. In the example below, it "
"is given first a ``55``, then ``25``, and finally a ``5``."
msgstr ""
"Hier ist ein einfaches Beispiel, das eine Zahl übernimmt und ausgibt. "
"Beachte, dass wir zwischen den Klammern eine neue Variable ``my_number`` "
"erstellt haben. Diese Variable bekommt den Wert, der beim Funktionsaufruf "
"mitgegeben wird. Im Beispiel unten bekommt sie erst den Wert ``55``, dann "
"``25`` und schließlich ``5``."

#: ../../source/chapters/08_functions/functions.rst:129
msgid ""
"def print_number(my_number):\n"
"    print(my_number)\n"
"\n"
"\n"
"print_number(55)\n"
"print_number(25)\n"
"print_number(8)"
msgstr ""
"def print_number(my_number):\n"
"    print(my_number)\n"
"\n"
"\n"
"print_number(55)\n"
"print_number(25)\n"
"print_number(8)"

#: ../../source/chapters/08_functions/functions.rst:140
msgid "You can pass in multiple numbers, just separate them with a comma."
msgstr ""
"Du kannst mehrere Zahlen übergeben, trenne sie einfach mit einem Komma."

#: ../../source/chapters/08_functions/functions.rst:142
msgid ""
"def add_numbers(a, b):\n"
"    print(a + b)\n"
"\n"
"\n"
"add_numbers(11, 7)"
msgstr ""
"def add_numbers(a, b):\n"
"    print(a + b)\n"
"\n"
"\n"
"add_numbers(11, 7)"

#: ../../source/chapters/08_functions/functions.rst:151
msgid ""
"Occasionally, new programmers want to set the number values inside the "
"function. This is wrong. Then the function would only work for those values. "
"The power is in specifying the numbers outside the function. We don't want "
"the function to be limited to only certain data values."
msgstr ""
"Manchmal möchten Anfänger die Zahlenwerte innerhalb der Funktion festlegen. "
"Das ist falsch, denn dann würde die Funktion nur mit diesen Werten "
"funktionieren. Die Leistungsfähigkeit liegt darin, die Werte außerhalb der "
"Funktion festlegen zu können. Wir wollen nicht, dass die Funktion nur auf "
"bestimmte Werte beschränkt ist."

#: ../../source/chapters/08_functions/functions.rst:156
msgid ""
"# This is wrong\n"
"def add_numbers(a, b):\n"
"    a = 11\n"
"    b = 7\n"
"    print(a + b)\n"
"\n"
"\n"
"add_numbers(11, 7)"
msgstr ""
"# This is wrong\n"
"def add_numbers(a, b):\n"
"    a = 11\n"
"    b = 7\n"
"    print(a + b)\n"
"\n"
"\n"
"add_numbers(11, 7)"

#: ../../source/chapters/08_functions/functions.rst:171
msgid "Returning and Capturing Values"
msgstr "Werte zurückgeben und weiterverarbeiten"

#: ../../source/chapters/08_functions/functions.rst:173
msgid "Functions can not only take in values, functions can return values."
msgstr ""
"Funktionen können nicht nur Werte übernehmen. Sie können auch Werte "
"zurückgeben."

#: ../../source/chapters/08_functions/functions.rst:178
msgid "Returning values"
msgstr "Werte zurückgeben"

#: ../../source/chapters/08_functions/functions.rst:180
msgid "For example:"
msgstr "Zum Beispiel:"

#: ../../source/chapters/08_functions/functions.rst:182
msgid "Function that returns two numbers added together"
msgstr "Eine Funktion, die zwei Werte addiert"

#: ../../source/chapters/08_functions/functions.rst:184
msgid ""
"# Add two numbers and return the results\n"
"def sum_two_numbers(a, b):\n"
"    result = a + b\n"
"    return result"
msgstr ""
"# Add two numbers and return the results\n"
"def sum_two_numbers(a, b):\n"
"    result = a + b\n"
"    return result"

#: ../../source/chapters/08_functions/functions.rst:192
msgid ""
"Note: Return is not a function, and does not use parentheses. Don't do "
"``return(result)``."
msgstr ""
"Beachte: ``return`` ist keine Funktion und verwendet keine Klammern. "
"Schreibe nicht ``return(result)``."

#: ../../source/chapters/08_functions/functions.rst:195
msgid ""
"This only gets us half-way there. Because if we call the function now, not "
"much happens. The numbers get added. They get returned to us. But we do "
"nothing with the result."
msgstr ""
"Das ist aber erst die Hälfte der Wahrheit. Wenn wir jetzt die Funktion "
"aufrufen, passiert nicht viel. Die Zahlen werden addiert. Sie werden auch an "
"uns zurückgegeben, aber wir machen nichts mit dem Ergebnis."

#: ../../source/chapters/08_functions/functions.rst:199
msgid ""
"# This doesn't do much, because we don't capture the result\n"
"sum_two_numbers(22, 15)"
msgstr ""
"# This doesn't do much, because we don't capture the result\n"
"sum_two_numbers(22, 15)"

#: ../../source/chapters/08_functions/functions.rst:207
msgid "Capturing Returned Values"
msgstr "Zurückgegeben Wert weiterverarbeiten"

#: ../../source/chapters/08_functions/functions.rst:209
msgid ""
"We need to capture the result. We do that by setting a variable equal to the "
"value the function returned:"
msgstr ""
"Wir müssen das Ergebnis übernehmen. Wir erreichen das, indem wir eine "
"Variable auf den zurückgegebenen Funktionswert setzen."

#: ../../source/chapters/08_functions/functions.rst:212
msgid ""
"# Capture the function's result into a variable\n"
"# by putting \"my_result =\" in front of it.\n"
"# (Use whatever variable name best describes the data,\n"
"# don't blindly use 'my_result' for everything.)\n"
"my_result = sum_two_numbers(22, 15) # <--- This line CAPTURES the return "
"value\n"
"\n"
"# Now that I captured the result, print it.\n"
"print(my_result) # <--- This is printing, NOT capturing."
msgstr ""
"# Capture the function's result into a variable\n"
"# by putting \"my_result =\" in front of it.\n"
"# (Use whatever variable name best describes the data,\n"
"# don't blindly use 'my_result' for everything.)\n"
"my_result = sum_two_numbers(22, 15) # <--- This line CAPTURES the return "
"value\n"
"\n"
"# Now that I captured the result, print it.\n"
"print(my_result) # <--- This is printing, NOT capturing."

#: ../../source/chapters/08_functions/functions.rst:223
msgid ""
"Now the result isn't lost. It is stored in `my_result` which we can print or "
"use some other way."
msgstr ""
"Jetzt geht das Ergebnis nicht mehr verloren. Es wird in ``my_result`` "
"gespeichert, diese Variable können wir ausgeben oder in einer anderen Form "
"verwenden."

#: ../../source/chapters/08_functions/functions.rst:227
msgid "Volume Cylinder Example"
msgstr "Beispiel Zylindervolumen"

#: ../../source/chapters/08_functions/functions.rst:229
msgid "Function that returns the volume of a cylinder"
msgstr "Eine Funktion, die das Volumen eines Zylinders zurückgibt"

#: ../../source/chapters/08_functions/functions.rst:231
msgid ""
"def volume_cylinder(radius, height):\n"
"    pi = 3.141592653589\n"
"    volume = pi * radius ** 2 * height\n"
"    return volume"
msgstr ""
"def volume_cylinder(radius, height):\n"
"    pi = 3.141592653589\n"
"    volume = pi * radius ** 2 * height\n"
"    return volume"

#: ../../source/chapters/08_functions/functions.rst:239
msgid ""
"Because of the return, this function could be used later on as part of an "
"equation to calculate the volume of a six-pack like this:"
msgstr ""
"Weil sie ein ``return`` beinhaltet, kann die Funktion später als Teil einer "
"Formel zum Berechnen des Volumens eines Six-Packs wie folgt verwendet werden:"

#: ../../source/chapters/08_functions/functions.rst:242
msgid "six_pack_volume = volume_cylinder(2.5, 5) * 6"
msgstr "six_pack_volume = volume_cylinder(2.5, 5) * 6"

#: ../../source/chapters/08_functions/functions.rst:246
msgid ""
"The value returned from volume_cylinder goes into the equation and is "
"multiplied by six."
msgstr ""
"Der von ``volume_cylinder`` zurückgegebene Wert kommt in die Formel und wird "
"mit sechs multipliziert."

#: ../../source/chapters/08_functions/functions.rst:249
msgid ""
"There is a big difference between a function that prints a value and a "
"function that returns a value. Look at the code below and try it out."
msgstr ""
"Es gibt einen großen Unterschied zwischen einer Funktion, die einen Wert "
"ausgibt, und einer, die einen Wert zurück gibt. Sieh dir den Code unten an "
"und probiere es aus."

#: ../../source/chapters/08_functions/functions.rst:252
msgid ""
"# Function that prints the result\n"
"def sum_print(a, b):\n"
"    result = a + b\n"
"    print(result)\n"
"\n"
"\n"
"# Function that returns the results\n"
"def sum_return(a, b):\n"
"    result = a + b\n"
"    return result\n"
"\n"
"\n"
"# This prints the sum of 4+4\n"
"sum_print(4, 4)\n"
"\n"
"# This does not\n"
"sum_return(4, 4)\n"
"\n"
"# This will not set x1 to the sum\n"
"# It actually gets a value of 'None'\n"
"x1 = sum_print(4, 4)\n"
"print(\"x1 =\", x1)\n"
"\n"
"# This will set x2 to the sum\n"
"# and print it properly\n"
"x2 = sum_return(4, 4)\n"
"print(\"x2 =\", x2)"
msgstr ""
"# Function that prints the result\n"
"def sum_print(a, b):\n"
"    result = a + b\n"
"    print(result)\n"
"\n"
"\n"
"# Function that returns the results\n"
"def sum_return(a, b):\n"
"    result = a + b\n"
"    return result\n"
"\n"
"\n"
"# This prints the sum of 4+4\n"
"sum_print(4, 4)\n"
"\n"
"# This does not\n"
"sum_return(4, 4)\n"
"\n"
"# This will not set x1 to the sum\n"
"# It actually gets a value of 'None'\n"
"x1 = sum_print(4, 4)\n"
"print(\"x1 =\", x1)\n"
"\n"
"# This will set x2 to the sum\n"
"# and print it properly\n"
"x2 = sum_return(4, 4)\n"
"print(\"x2 =\", x2)"

#: ../../source/chapters/08_functions/functions.rst:284
msgid ""
"When first working with functions it is not unusual to get stuck looking at "
"code like this:"
msgstr ""
"Wenn man zum ersten Mal mit Funktionen arbeitet, ist es nicht ungewöhnlich, "
"dass an Programmcode wie dem folgenden hängen bleibt."

#: ../../source/chapters/08_functions/functions.rst:287
msgid ""
"def calculate_average(a, b):\n"
"    \"\"\" Calculate an average of two numbers \"\"\"\n"
"    result = (a + b) / 2\n"
"    return result\n"
"\n"
"\n"
"# Pretend you have some code here\n"
"x = 45\n"
"y = 56\n"
"\n"
"# Wait, how do I print the result of this?\n"
"calculate_average(x, y)"
msgstr ""
"def calculate_average(a, b):\n"
"    \"\"\" Calculate an average of two numbers \"\"\"\n"
"    result = (a + b) / 2\n"
"    return result\n"
"\n"
"\n"
"# Pretend you have some code here\n"
"x = 45\n"
"y = 56\n"
"\n"
"# Wait, how do I print the result of this?\n"
"calculate_average(x, y)"

#: ../../source/chapters/08_functions/functions.rst:302
msgid ""
"How do we print the result of calculate_average? The program can't print "
"result because that variable only exists inside the function. Instead, use a "
"variable to capture the result:"
msgstr ""
"Wie geben wir das Ergebnis der Funktion ``calculate_average`` aus? Das "
"Programm kann das Ergebnis nicht ausgeben, weil die Variable nur innerhalb "
"der Funktion existiert. Verwende stattdessen eine Variable um das Ergebnis "
"aufzunehmen."

#: ../../source/chapters/08_functions/functions.rst:306
msgid ""
"def calculate_average(a, b):\n"
"    \"\"\" Calculate an average of two numbers \"\"\"\n"
"    result = (a + b) / 2\n"
"    return result\n"
"\n"
"\n"
"# Pretend you have some code here\n"
"x = 45\n"
"y = 56\n"
"\n"
"average = calculate_average(x, y)\n"
"print(average)"
msgstr ""
"def calculate_average(a, b):\n"
"    \"\"\" Calculate an average of two numbers \"\"\"\n"
"    result = (a + b) / 2\n"
"    return result\n"
"\n"
"\n"
"# Pretend you have some code here\n"
"x = 45\n"
"y = 56\n"
"\n"
"average = calculate_average(x, y)\n"
"print(average)"

#: ../../source/chapters/08_functions/functions.rst:322
msgid "Documenting Functions"
msgstr "Funktionen dokumentieren"

#: ../../source/chapters/08_functions/functions.rst:324
msgid ""
"Functions in Python typically have a comment as the first statement of the "
"function. This comment is delimited using three double quotes, and is called "
"a docstring. A function may look like:"
msgstr ""
"Funktionen in Python haben typischerweise einen Kommentar als erste "
"Anweisung in einer Funktion. Dieser Kommentar wird durch dreifache "
"Anführungszeichen eingefasst. Er wird Docstring genannt. Eine Funktion kann "
"wie folgt aussehen:"

#: ../../source/chapters/08_functions/functions.rst:328
msgid ""
"def volume_cylinder(radius, height):\n"
"    \"\"\"Returns volume of a cylinder given radius, height.\"\"\"\n"
"    pi = 3.141592653589\n"
"    volume = pi * radius ** 2 * height\n"
"    return volume"
msgstr ""
"def volume_cylinder(radius, height):\n"
"    \"\"\"Returns volume of a cylinder given radius, height.\"\"\"\n"
"    pi = 3.141592653589\n"
"    volume = pi * radius ** 2 * height\n"
"    return volume"

#: ../../source/chapters/08_functions/functions.rst:336
msgid ""
"The great thing about using docstrings in functions is that the comment can "
"be pulled out and put into a website documenting your code using a tool like "
"Sphinx. Most languages have similar tools that can help make documenting "
"your code a breeze. This can save a lot of time as you start working on "
"larger programs."
msgstr ""
"Das Großartige an den Docstrings in Funktionen ist, dass der Kommentar mit "
"einem Werkzeug wie Sphinx heraus geholt werden und in eine Webseite zur "
"Dokumentation deines Programmcodes eingefügt werden kann. Die meisten "
"Sprachen haben ähnliche Werkzeuge, die dir erleichtern deinen Programmcode "
"zu dokumentieren. Dies kann dir eine Menge Arbeit ersparen, wenn du an "
"größeren Programmen arbeitest."

#: ../../source/chapters/08_functions/functions.rst:343
msgid "Variable Scope"
msgstr "Gültigkeitsbereich von Variablen"

#: ../../source/chapters/08_functions/functions.rst:345
msgid ""
"The use of functions introduces the concept of scope. Scope is where in the "
"code a variable is \"alive\" and can be accessed. For example, look at the "
"code below:"
msgstr ""
"Zur Verwendung von Funktionen gibt es die Gültigkeitsbereiche (englisch "
"*scope*) von Variablen. Ein Gültigkeitsbereich einer Variablen ist der "
"Abschnitt im Programmcode, in dem die Variable \"lebendig\" ist und darauf "
"zugegriffen werden kann. Sieh dir den Programmcode unten als Beispiel an:"

#: ../../source/chapters/08_functions/functions.rst:349
msgid ""
"# Define a simple function that sets\n"
"# x equal to 22\n"
"def f():\n"
"    x = 22\n"
"\n"
"\n"
"# Call the function\n"
"f()\n"
"# This fails, x only exists in f()\n"
"print(x)"
msgstr ""
"# Define a simple function that sets\n"
"# x equal to 22\n"
"def f():\n"
"    x = 22\n"
"\n"
"\n"
"# Call the function\n"
"f()\n"
"# This fails, x only exists in f()\n"
"print(x)"

#: ../../source/chapters/08_functions/functions.rst:362
msgid ""
"The last line will generate an error because x only exists inside of the f() "
"function. The variable is created when ``f()`` is called and the memory it "
"uses is freed as soon as ``f()`` finishes."
msgstr ""
"Die letzte Zeile wird einen Fehler generieren, weil ``x`` nur innerhalb der "
"Funktion ``f()`` existiert. Die Variable wird erzeugt, wenn ``f()`` "
"aufgerufen wird und der Speicher wird freigegeben, sobald der Aufruf von "
"``f()`` endet."

#: ../../source/chapters/08_functions/functions.rst:366
msgid ""
"Here's where it gets complicated. A more confusing rule is accessing "
"variables created outside of the ``f()`` function. In the following code, x "
"is created before the ``f()`` function, and thus can be read from inside the "
"``f()`` function."
msgstr ""
"Hier ist der Punkt, an dem es kompliziert wird. Eine noch verwirrendere "
"Regel ist, wie auf Variablen, die außerhalb von ``f()`` deklariert wurden, "
"zugegriffen wird. Im folgenden Programmcode wird ``x`` erzeugt bevor ``f()`` "
"definiert wird und kann deshalb innerhalb von ``f()`` gelesen werden."

#: ../../source/chapters/08_functions/functions.rst:371
msgid ""
"# Create the x variable and set to 44\n"
"x = 44\n"
"\n"
"\n"
"# Define a simple function that prints x\n"
"def f():\n"
"    print(x)\n"
"\n"
"\n"
"# Call the function\n"
"f()"
msgstr ""
"# Create the x variable and set to 44\n"
"x = 44\n"
"\n"
"\n"
"# Define a simple function that prints x\n"
"def f():\n"
"    print(x)\n"
"\n"
"\n"
"# Call the function\n"
"f()"

#: ../../source/chapters/08_functions/functions.rst:385
msgid ""
"Variables created ahead of a function may be read inside of the function "
"only if the function does not change the value. This code, very similar to "
"the code above, will fail. The computer will claim it doesn't know what x is."
msgstr ""
"Variablen, die vor einer Funktion definiert wurden, können in der Funktion "
"gelesen werden, nur wenn die Funktion den Wert nicht ändert. Dieser "
"Programmcode, der dem Programmcode oben sehr ähnelt, wird fehlschlagen. Der "
"Rechner wird behaupten, dass er nicht weiß, was ``x`` ist."

#: ../../source/chapters/08_functions/functions.rst:389
msgid ""
"# Create the x variable and set to 44\n"
"x = 44\n"
"\n"
"\n"
"# Define a simple function that prints x\n"
"def f():\n"
"    x += 1\n"
"    print(x)\n"
"\n"
"\n"
"# Call the function\n"
"f()"
msgstr ""
"# Create the x variable and set to 44\n"
"x = 44\n"
"\n"
"\n"
"# Define a simple function that prints x\n"
"def f():\n"
"    x += 1\n"
"    print(x)\n"
"\n"
"\n"
"# Call the function\n"
"f()"

#: ../../source/chapters/08_functions/functions.rst:404
msgid ""
"Other languages have more complex rules around the creation of variables and "
"scope than Python does. Because Python is straight-forward it is a good "
"introductory language."
msgstr ""
"Andere Sprachen haben kompliziertere Regeln zur Erstellung von Variablen und "
"deren Gültigkeitsbereiche als Python. Weil Python so geradeaus ist, ist es "
"eine gute Anfängersprache."

# I am not sure,if this is correct
#: ../../source/chapters/08_functions/functions.rst:409
msgid "Pass-by-Copy"
msgstr "Als Kopie übergeben"

#: ../../source/chapters/08_functions/functions.rst:411
msgid ""
"Functions pass their values by creating a copy of the original. For example:"
msgstr ""
"Funktionen bekommen ihre Werte als Kopie des Originals übergeben. Zum "
"Beispiel:"

#: ../../source/chapters/08_functions/functions.rst:413
msgid ""
"# Define a simple function that prints x\n"
"def f(x):\n"
"    x += 1\n"
"    print(x)\n"
"\n"
"\n"
"# Set y\n"
"y = 10\n"
"# Call the function\n"
"f(y)\n"
"# Print y to see if it changed\n"
"print(y)"
msgstr ""
"# Define a simple function that prints x\n"
"def f(x):\n"
"    x += 1\n"
"    print(x)\n"
"\n"
"\n"
"# Set y\n"
"y = 10\n"
"# Call the function\n"
"f(y)\n"
"# Print y to see if it changed\n"
"print(y)"

# Formatting of original.
# Description is not correct.
#: ../../source/chapters/08_functions/functions.rst:428
msgid ""
"The value of y does not change, even though the f() function increases the "
"value passed to it. Each of the variables listed as a parameter in a "
"function is a brand new variable. The value of that variable is copied from "
"where it is called."
msgstr ""
"Der Wert von ``y`` ändert sich nicht, obwohl die Funktion den übergebenen "
"Wert erhöht. Jede der als Parameter angegeben Variablen in einer Funktion "
"ist eine brandneue Variable. Der Wert der Variablen wird beim Aufruf kopiert."

# Formatting.
#: ../../source/chapters/08_functions/functions.rst:433
msgid ""
"This is reasonably straight forward in the prior example. Where it gets "
"confusing is if both the code that calls the function and the function "
"itself have variables named the same. The code below is identical to the "
"prior listing, but rather than use y it uses x."
msgstr ""
"Im Beispiel oben ist das einigermaßen schlüssig. Es wird richtig verwirrend, "
"wenn sowohl der Programmcode, der die Funktion aufruft, als auch die "
"Funktion selbst Variablen mit gleichem Namen haben. Der Programmcode unten "
"ist der gleiche wie oben, aber er verwendet ``y`` statt ``x``."

#: ../../source/chapters/08_functions/functions.rst:438
msgid ""
"# Define a simple function that prints x\n"
"def f(x):\n"
"    x += 1\n"
"    print(x)\n"
"\n"
"\n"
"# Set x\n"
"x = 10\n"
"# Call the function\n"
"f(x)\n"
"# Print x to see if it changed\n"
"print(x)"
msgstr ""
"# Define a simple function that prints x\n"
"def f(x):\n"
"    x += 1\n"
"    print(x)\n"
"\n"
"\n"
"# Set x\n"
"x = 10\n"
"# Call the function\n"
"f(x)\n"
"# Print x to see if it changed\n"
"print(x)"

#: ../../source/chapters/08_functions/functions.rst:453
msgid ""
"The output is the same as the program that uses y. Even though both the "
"function and the surrounding code use x for a variable name, there are "
"actually two different variables. There is the variable x that exists inside "
"of the function, and a different variable x that exists outside the function."
msgstr ""
"Die Ausgabe ist die gleiche wie vorher. Obwohl die Funktion und der "
"umgebende Code ``x`` als Variablennamen verwenden, sind es doch tatsächlich "
"zwei verschiedene Variablen. Die eine Variable ``x`` existiert innerhalb der "
"Funktion. Die andere Variable ``x`` existiert außerhalb der Funktion."

#: ../../source/chapters/08_functions/functions.rst:460
msgid "Functions Calling Functions"
msgstr "Funktionen rufen Funktionen auf"

#: ../../source/chapters/08_functions/functions.rst:462
msgid ""
"For each of the examples below, think about what would print. Check to see "
"if you are right. If you didn't guess correctly, spend to the time to "
"understand why."
msgstr ""
"Überlege dir bei jedem der Beispiele unten, was es ausgeben wird. Überprüfe, "
"ob du recht hattest. Wenn du falsch lagst, verwende Zeit darauf zu verstehen "
"warum."

#: ../../source/chapters/08_functions/functions.rst:467
msgid "Example 1"
msgstr "Beispiel 1"

#: ../../source/chapters/08_functions/functions.rst:469
msgid "In this example, note that if you don't use a function, it doesn't run."
msgstr ""
"Beachte in diesem Beispiel, dass eine Funktion nur ausgeführt wird, wenn sie "
"auch aufgerufen wird."

#: ../../source/chapters/08_functions/functions.rst:471
msgid ""
"# Example 1\n"
"def a():\n"
"    print(\"A\")\n"
"\n"
"\n"
"def b():\n"
"    print(\"B\")\n"
"\n"
"\n"
"def c():\n"
"    print(\"C\")\n"
"\n"
"\n"
"a()"
msgstr ""
"# Example 1\n"
"def a():\n"
"    print(\"A\")\n"
"\n"
"\n"
"def b():\n"
"    print(\"B\")\n"
"\n"
"\n"
"def c():\n"
"    print(\"C\")\n"
"\n"
"\n"
"a()"

#: ../../source/chapters/08_functions/functions.rst:489
msgid "Example 2"
msgstr "Beispiel 2"

#: ../../source/chapters/08_functions/functions.rst:491
msgid ""
"# Example 2\n"
"def a():\n"
"    b()\n"
"    print(\"A\")\n"
"\n"
"\n"
"def b():\n"
"    c()\n"
"    print(\"B\")\n"
"\n"
"\n"
"def c():\n"
"    print(\"C\")\n"
"\n"
"\n"
"a()"
msgstr ""
"# Example 2\n"
"def a():\n"
"    b()\n"
"    print(\"A\")\n"
"\n"
"\n"
"def b():\n"
"    c()\n"
"    print(\"B\")\n"
"\n"
"\n"
"def c():\n"
"    print(\"C\")\n"
"\n"
"\n"
"a()"

#: ../../source/chapters/08_functions/functions.rst:512
msgid "Example 3"
msgstr "Beispiel 3"

#: ../../source/chapters/08_functions/functions.rst:514
msgid ""
"# Example 3\n"
"def a():\n"
"    print(\"A\")\n"
"    b()\n"
"\n"
"\n"
"def b():\n"
"    print(\"B\")\n"
"    c()\n"
"\n"
"\n"
"def c():\n"
"    print(\"C\")\n"
"\n"
"\n"
"a()"
msgstr ""
"# Example 3\n"
"def a():\n"
"    print(\"A\")\n"
"    b()\n"
"\n"
"\n"
"def b():\n"
"    print(\"B\")\n"
"    c()\n"
"\n"
"\n"
"def c():\n"
"    print(\"C\")\n"
"\n"
"\n"
"a()"

#: ../../source/chapters/08_functions/functions.rst:534
msgid "Example 4"
msgstr "Beispiel 4"

#: ../../source/chapters/08_functions/functions.rst:536
msgid ""
"# Example 4\n"
"def a():\n"
"    print(\"A start\")\n"
"    b()\n"
"    print(\"A end\")\n"
"\n"
"\n"
"def b():\n"
"    print(\"B start\")\n"
"    c()\n"
"    print(\"B end\")\n"
"\n"
"\n"
"def c():\n"
"    print(\"C start and end\")\n"
"\n"
"\n"
"a()"
msgstr ""
"# Example 4\n"
"def a():\n"
"    print(\"A start\")\n"
"    b()\n"
"    print(\"A end\")\n"
"\n"
"\n"
"def b():\n"
"    print(\"B start\")\n"
"    c()\n"
"    print(\"B end\")\n"
"\n"
"\n"
"def c():\n"
"    print(\"C start and end\")\n"
"\n"
"\n"
"a()"

#: ../../source/chapters/08_functions/functions.rst:559
msgid "Example 5"
msgstr "Beispiel 5"

#: ../../source/chapters/08_functions/functions.rst:561
msgid ""
"# Example 5\n"
"def a(x):\n"
"    print(\"A start, x =\", x)\n"
"    b(x + 1)\n"
"    print(\"A end, x =\", x)\n"
"\n"
"\n"
"def b(x):\n"
"    print(\"B start, x =\", x)\n"
"    c(x + 1)\n"
"    print(\"B end, x =\", x)\n"
"\n"
"\n"
"def c(x):\n"
"    print(\"C start and end, x =\", x)\n"
"\n"
"\n"
"a(5)"
msgstr ""
"# Example 5\n"
"def a(x):\n"
"    print(\"A start, x =\", x)\n"
"    b(x + 1)\n"
"    print(\"A end, x =\", x)\n"
"\n"
"\n"
"def b(x):\n"
"    print(\"B start, x =\", x)\n"
"    c(x + 1)\n"
"    print(\"B end, x =\", x)\n"
"\n"
"\n"
"def c(x):\n"
"    print(\"C start and end, x =\", x)\n"
"\n"
"\n"
"a(5)"

#: ../../source/chapters/08_functions/functions.rst:583
msgid "Example 6"
msgstr "Beispiel 6"

#: ../../source/chapters/08_functions/functions.rst:585
msgid ""
"While line 3 of this example increases ``x``, the ``x`` variable in the "
"function is a different variable than the ``x`` that is in the rest of the "
"program. So that ``x`` never changes."
msgstr ""
"In Zeile 3 dieses Beispiel wird der Wert von ``x`` inkrementiert. Da aber "
"die Variable ``x`` in der Funktion eine andere Variable ist, als ``x`` im "
"Rest des Programms, ändert sich der angezeigte Wert nicht."

#: ../../source/chapters/08_functions/functions.rst:588
msgid ""
"# Example 6\n"
"def a(x):\n"
"    x = x + 1\n"
"\n"
"\n"
"x = 3\n"
"a(x)\n"
"\n"
"print(x)"
msgstr ""
"# Example 6\n"
"def a(x):\n"
"    x = x + 1\n"
"\n"
"\n"
"x = 3\n"
"a(x)\n"
"\n"
"print(x)"

#: ../../source/chapters/08_functions/functions.rst:601
msgid "Example 7"
msgstr "Beispiel 7"

#: ../../source/chapters/08_functions/functions.rst:603
msgid ""
"This example is similar to the prior example, but we ``return x`` at the "
"end. Turns out, it doesn't matter. Because we never do anything with the "
"return value. So the global variable ``x`` still doesn't increase. See the "
"next example."
msgstr ""
"In diesem Beispiel, das dem vorherigen ähnelt, geben wir ``x`` zurück. Es "
"zeigt sich, dass das keinen Unterschied macht, da wir mit dem Rückgabewert "
"nichts machen. Die globale Variable ``x`` erhöht sich immer noch nicht. Sieh "
"dir das nächste Beispiel an."

#: ../../source/chapters/08_functions/functions.rst:606
msgid ""
"# Example 7\n"
"def a(x):\n"
"    x = x + 1\n"
"    return x\n"
"\n"
"\n"
"x = 3\n"
"a(x)\n"
"\n"
"print(x)"
msgstr ""
"# Example 7\n"
"def a(x):\n"
"    x = x + 1\n"
"    return x\n"
"\n"
"\n"
"x = 3\n"
"a(x)\n"
"\n"
"print(x)"

#: ../../source/chapters/08_functions/functions.rst:620
msgid "Example 8"
msgstr "Beispiel 8"

# ``a()`` instead of ``a`` to denote function
#: ../../source/chapters/08_functions/functions.rst:622
msgid ""
"This example take the value returned from ``a`` and stores it back into "
"``x``. How? By doing ``x = a(x)`` instead of just ``a(x)``."
msgstr ""
"In diesem Beispiel nehmen wir den von ``a()`` zurückgegebenen Wert und "
"speichern ihn in der Variablen ``x``. Wie? Durch Schreiben von ``x = a(x)`` "
"statt nur ``a(x)``."

#: ../../source/chapters/08_functions/functions.rst:625
msgid ""
"# Example 8\n"
"def a(x):\n"
"    x = x + 1\n"
"    return x\n"
"\n"
"\n"
"x = 3\n"
"x = a(x)\n"
"\n"
"print(x)"
msgstr ""
"# Example 8\n"
"def a(x):\n"
"    x = x + 1\n"
"    return x\n"
"\n"
"\n"
"x = 3\n"
"x = a(x)\n"
"\n"
"print(x)"

#: ../../source/chapters/08_functions/functions.rst:639
msgid "Example 9"
msgstr "Beispiel 9"

#: ../../source/chapters/08_functions/functions.rst:641
msgid ""
"# Example 9\n"
"def a(x, y):\n"
"    x = x + 1\n"
"    y = y + 1\n"
"    print(x, y)\n"
"\n"
"\n"
"x = 10\n"
"y = 20\n"
"a(y, x)"
msgstr ""
"# Example 9\n"
"def a(x, y):\n"
"    x = x + 1\n"
"    y = y + 1\n"
"    print(x, y)\n"
"\n"
"\n"
"x = 10\n"
"y = 20\n"
"a(y, x)"

#: ../../source/chapters/08_functions/functions.rst:655
msgid "Example 10"
msgstr "Beispiel 10"

#: ../../source/chapters/08_functions/functions.rst:657
msgid ""
"While you can have two ``return`` statements in a function, once you hit the "
"first ``return`` the function ends. In this case, ``return y`` never runs, "
"because we already returned from the function in the prior line."
msgstr ""
"Obwohl man mehrere ``return``-Anweisungen in einer Funktion haben kann, "
"endet die Funktion mit dem ersten ``return``. In diesem Beispiel wird "
"``return y`` niemals ausgeführt, wir von der Funktion schon in der Zeile "
"davor zurückgekehrt sind."

#: ../../source/chapters/08_functions/functions.rst:660
msgid ""
"# Example 10\n"
"def a(x, y):\n"
"    x = x + 1\n"
"    y = y + 1\n"
"    return x\n"
"    return y\n"
"\n"
"\n"
"x = 10\n"
"y = 20\n"
"z = a(x, y)\n"
"\n"
"print(z)"
msgstr ""
"# Example 10\n"
"def a(x, y):\n"
"    x = x + 1\n"
"    y = y + 1\n"
"    return x\n"
"    return y\n"
"\n"
"\n"
"x = 10\n"
"y = 20\n"
"z = a(x, y)\n"
"\n"
"print(z)"

#: ../../source/chapters/08_functions/functions.rst:677
msgid "Example 11"
msgstr "Beispiel 11"

#: ../../source/chapters/08_functions/functions.rst:679
msgid ""
"This is not something you can do in every programming language. You can "
"return two values by using a comma and listing them."
msgstr ""
"Dies ist etwas, das man nicht in jeder Programmiersprache machen kann. Du "
"kannst zwei Werte auf einmal zurückgeben, indem du sie mit einem Komma "
"getrennt angibst."

#: ../../source/chapters/08_functions/functions.rst:681
msgid ""
"# Example 11\n"
"def a(x, y):\n"
"    x = x + 1\n"
"    y = y + 1\n"
"    return x, y\n"
"\n"
"\n"
"x = 10\n"
"y = 20\n"
"z = a(x, y)\n"
"\n"
"print(z)"
msgstr ""
"# Example 11\n"
"def a(x, y):\n"
"    x = x + 1\n"
"    y = y + 1\n"
"    return x, y\n"
"\n"
"\n"
"x = 10\n"
"y = 20\n"
"z = a(x, y)\n"
"\n"
"print(z)"

#: ../../source/chapters/08_functions/functions.rst:697
msgid "Example 12"
msgstr "Beispiel 12"

#: ../../source/chapters/08_functions/functions.rst:699
msgid ""
"If you return two values out of a function, you can capture them this way."
msgstr ""
"Wenn du zwei Werte aus einer Funktion zurück gibst, kannst du sie in dieser "
"vor weiterverarbeiten."

#: ../../source/chapters/08_functions/functions.rst:701
msgid ""
"# Example 12\n"
"def a(x, y):\n"
"    x = x + 1\n"
"    y = y + 1\n"
"    return x, y\n"
"\n"
"\n"
"x = 10\n"
"y = 20\n"
"x2, y2 = a(x, y) # Most computer languages don't support this\n"
"\n"
"print(x2)\n"
"print(y2)"
msgstr ""
"# Example 12\n"
"def a(x, y):\n"
"    x = x + 1\n"
"    y = y + 1\n"
"    return x, y\n"
"\n"
"\n"
"x = 10\n"
"y = 20\n"
"x2, y2 = a(x, y) # Most computer languages don't support this\n"
"\n"
"print(x2)\n"
"print(y2)"

#: ../../source/chapters/08_functions/functions.rst:718
msgid "Example 13"
msgstr "Beispiel 13"

#: ../../source/chapters/08_functions/functions.rst:720
msgid ""
"# Example 13\n"
"def a(my_data):\n"
"    print(\"function a, my_data =  \", my_data)\n"
"    my_data = 20\n"
"    print(\"function a, my_data =  \", my_data)\n"
"\n"
"\n"
"my_data = 10\n"
"\n"
"print(\"global scope, my_data =\", my_data)\n"
"a(my_data)\n"
"print(\"global scope, my_data =\", my_data)"
msgstr ""
"# Example 13\n"
"def a(my_data):\n"
"    print(\"function a, my_data =  \", my_data)\n"
"    my_data = 20\n"
"    print(\"function a, my_data =  \", my_data)\n"
"\n"
"\n"
"my_data = 10\n"
"\n"
"print(\"global scope, my_data =\", my_data)\n"
"a(my_data)\n"
"print(\"global scope, my_data =\", my_data)"

#: ../../source/chapters/08_functions/functions.rst:736
msgid "Example 14"
msgstr "Beispiel 14"

#: ../../source/chapters/08_functions/functions.rst:738
msgid ""
"We will talk more about these next two examples when we talk about \"lists\" "
"and \"classes\" later. These examples don't operate like you might expect at "
"first. Take a look and see what is different. We'll explain why it works "
"differently later."
msgstr ""
"Wir werden mehr über die nächsten beiden Beispiele reden, wenn wir \"Listen"
"\" und \"Klassen\" behandeln. Diese Beispiele funktionieren nicht so, wie du "
"das vielleicht zuerst erwartest. Sieh dir an, was unterschiedlich ist. Wir "
"werden später erklären, warum dies anders funktioniert."

#: ../../source/chapters/08_functions/functions.rst:742
msgid ""
"# Example 14\n"
"def a(my_list):\n"
"    print(\"function a, list =  \", my_list)\n"
"    my_list = [10, 20, 30]\n"
"    print(\"function a, list =  \", my_list)\n"
"\n"
"\n"
"my_list = [5, 2, 4]\n"
"\n"
"print(\"global scope, list =\", my_list)\n"
"a(my_list)\n"
"print(\"global scope, list =\", my_list)"
msgstr ""
"# Example 14\n"
"def a(my_list):\n"
"    print(\"function a, list =  \", my_list)\n"
"    my_list = [10, 20, 30]\n"
"    print(\"function a, list =  \", my_list)\n"
"\n"
"\n"
"my_list = [5, 2, 4]\n"
"\n"
"print(\"global scope, list =\", my_list)\n"
"a(my_list)\n"
"print(\"global scope, list =\", my_list)"

#: ../../source/chapters/08_functions/functions.rst:758
msgid "Example 15"
msgstr "Beispiel 15"

#: ../../source/chapters/08_functions/functions.rst:760
msgid ""
"# Example 15\n"
"# New concept!\n"
"# Covered in more detail in a later chapter\n"
"def a(my_list):\n"
"    print(\"function a, list =  \", my_list)\n"
"    my_list[0] = 1000\n"
"    print(\"function a, list =  \", my_list)\n"
"\n"
"\n"
"my_list = [5, 2, 4]\n"
"\n"
"print(\"global scope, list =\", my_list)\n"
"a(my_list)\n"
"print(\"global scope, list =\", my_list)"
msgstr ""
"# Example 15\n"
"# New concept!\n"
"# Covered in more detail in a later chapter\n"
"def a(my_list):\n"
"    print(\"function a, list =  \", my_list)\n"
"    my_list[0] = 1000\n"
"    print(\"function a, list =  \", my_list)\n"
"\n"
"\n"
"my_list = [5, 2, 4]\n"
"\n"
"print(\"global scope, list =\", my_list)\n"
"a(my_list)\n"
"print(\"global scope, list =\", my_list)"
