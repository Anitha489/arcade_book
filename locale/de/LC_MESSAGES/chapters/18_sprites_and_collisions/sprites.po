# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Paul Vincent Craven
# This file is distributed under the same license as the Arcade package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
# derSuessmann <arcade-book-de@dersuessmann.de>, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: Arcade Fall 2018\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-07-09 19:32+0200\n"
"PO-Revision-Date: 2019-07-15 08:30+0200\n"
"Last-Translator: derSuessmann <arcade-book-de@dersuessmann.de>\n"
"Language-Team: German <arcade-book-de@dersuessmann.de>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"X-Generator: Gtranslator 3.32.1\n"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:4
msgid "Sprites And Collisions"
msgstr "Sprites und Kollisionen"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:6
msgid ""
"Our games need support for handling objects that collide. Balls bouncing off "
"paddles, laser beams hitting aliens, or our favorite character collecting a "
"coin. All these examples require collision detection."
msgstr ""
"Unsere Spiele benötigen Unterstützung beim Umgang mit kollidierenden "
"Objekten: Bälle, die von Schlägern abprallen, Laserstrahlen, die Aliens "
"treffen, oder unser Lieblingscharakter, der eine Münze sammelt. Alle diese "
"Beispiele erfordern eine Kollisionserkennung."

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:10
msgid ""
"The Arcade library has support for sprites. A sprite is a two-dimensional "
"image that is part of the larger graphical scene. Typically a sprite will be "
"some kind of object in the scene that will be interacted with like a car, "
"frog, or little plumber guy."
msgstr ""
"Die Arcade-Bibliothek unterstützt Sprites. Ein Sprite ist ein "
"zweidimensionales Bild, das Teil der größeren grafischen Szene ist. In der "
"Regel ist ein Sprite ein Objekt in der Szene, mit dem man wie mit einem "
"Auto, einem Frosch oder einem kleinen Klempner interagiert."

msgid ".. image:: chapters/18_sprites_and_collisions/sprite.png"
msgstr ".. image:: chapters/18_sprites_and_collisions/sprite.png"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:18
msgid ""
"Originally, video game consoles had built-in hardware support for sprites. "
"Now this specialized hardware support is no longer needed, but we still use "
"the term \"sprite.\" The `history of sprites`_ is interesting, if you want "
"to read up more about it."
msgstr ""
"Ursprünglich verfügten Videospielkonsolen über integrierte Hardware-"
"Unterstützung für Sprites. Jetzt wird diese spezielle Hardwareunterstützung "
"nicht mehr benötigt, aber wir verwenden immer noch den Begriff \"Sprite\". "
"Die `Geschichte der Sprites`_ ist interessant, wenn Sie mehr darüber "
"erfahren möchten."

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:26
msgid "Finding Images for Sprites"
msgstr "Finden von Bildern für Sprites"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:28
msgid "There are several image formats that computers use:"
msgstr "Es gibt verschiedene Bildformate, die Computer verwenden:"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:30
msgid ""
"``.bmp`` - Bitmap. This is an uncompressed image that normally uses three "
"bytes to represent each dot in the image. These files can be very large. "
"Because there are so many better options, this format is not used often. It "
"is, however, the simplest format to use."
msgstr ""
"``.bmp`` - Bitmap. Dies ist ein unkomprimiertes Bild, das normalerweise drei "
"Bytes verwendet, um jeden Punkt im Bild darzustellen. Diese Dateien können "
"sehr groß sein. Da es so viele bessere Möglichkeiten gibt, wird dieses "
"Format nicht oft verwendet. Es ist jedoch das am einfachsten zu verwendende "
"Format."

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:33
msgid ""
"``.png`` - Great patent-free format for line art and clip art. Not great for "
"photos. Can't hold animations."
msgstr ""
"``.png`` - Tolles patentfreies Format für Strichzeichnungen und Cliparts. "
"Nicht so toll für Fotos. Kann keine Animationen enthalten."

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:34
msgid ""
"``.gif`` - Great format for line art and clip art. Has had issues with "
"patents (now expired). Can do animations."
msgstr ""
"``.gif`` - Tolles Format für Strichzeichnungen und Cliparts. Hat Probleme "
"mit Patenten gehabt (jetzt abgelaufen). Kann Animationen enthalten."

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:35
msgid ""
"``.jpg`` - Great file format for photos. Terrible for clip-art. Don't use "
"for sprites."
msgstr ""
"``.jpg`` - Tolles Dateiformat für Fotos. Fürchterlich für Clip-Art. Nicht "
"für Sprites verwenden."

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:36
msgid ""
"``.svg`` - File format for storing line-art images that can scale to any "
"resolution. Not compatible with the \"arcade\" library."
msgstr ""
"``.svg`` - Dateiformat zum Speichern von Vektorgrafiken, die auf jede "
"Auflösung skaliert werden können. Nicht kompatibel mit der \"Arcade\"-"
"Bibliothek."

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:39
msgid ""
"If you use Google's `advanced image search`_ you can find images that are "
"\"icon\" sized, and either png or gif file format."
msgstr ""
"Wenn du Googles \"Erweiterte Bildsuche\" (`advanced image search`_) "
"verwendest, kannst du Bilder in \"Symbolgröße\" und im PNG- oder GIF-"
"Dateiformat finden."

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:44
msgid ""
"There's also a great source for images from `kenney.nl`_. He has a lot of "
"free and cheap game image assets. That's where the following images come "
"from that we will use in our examples:"
msgstr ""
"Es gibt auch eine großartige Quelle für Bilder von `kenney.nl`_. Er hat eine "
"Menge kostenloser und billiger Spielebild-Assets. Von dieser Seite kommen "
"die folgenden Bilder, die wir in unseren Beispielen verwenden werden:"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:51
msgid ".. image:: chapters/18_sprites_and_collisions/character.png"
msgstr ".. image:: chapters/18_sprites_and_collisions/character.png"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:51
msgid "character.png"
msgstr "character.png"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:55
msgid ".. image:: chapters/18_sprites_and_collisions/coin_01.png"
msgstr ".. image:: chapters/18_sprites_and_collisions/coin_01.png"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:55
msgid "coin_01.png"
msgstr "coin_01.png"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:58
msgid "Where to Save Images"
msgstr "Speicherort für Bilder"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:60
msgid ""
"Where should you save them? If you load your sprite with the code below, the "
"computer will look for the ``character.png`` image in the same directory as "
"your Python file. Save the image anywhere else, and it won't be found."
msgstr ""
"Wo solltest du sie speichern? Wenn du deinen Sprite mit dem folgenden Code "
"lädst, sucht der Rechner im selben Verzeichnis wie deine Python-Datei nach "
"dem Bild ``character.png``. Speichere das Bild an einem anderen Ort und es "
"wird nicht gefunden."

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:66
msgid "How to Reference Images"
msgstr "Referenzieren von Bildern"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:68
msgid "If you create your own game that you publish, you need to:"
msgstr ""
"Wenn du dein eigenes Spiel erstellst, das du veröffentlichst, musst du:"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:70
msgid "Create your own images"
msgstr "Deine eigenen Bilder erstellen"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:71
msgid "Hire someone to create your images"
msgstr "jemanden einstellen, der deine Bilder erstellt,"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:72
msgid "Buy your own images with a license to use them in your own game"
msgstr ""
"Bilder mit einer Lizenz kaufen, um sie in deinem eigenen Spiel zu verwenden "
"oder"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:73
msgid "Find images that are public domain or licensed for public use"
msgstr ""
"Bilder suchen, die gemeinfrei sind oder für die öffentliche Verwendung "
"lizenziert sind"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:75
msgid ""
"If you are just creating a game for class that won't be used in public, then "
"right before you load the image leave a comment with the source. I'll show "
"this in a bit."
msgstr ""
"Wenn du nur ein Spiel für den Kurs erstellst, das nicht öffentlich verwendet "
"wird, hinterlasse kurz vor dem Laden des Bildes einen Kommentar bei der "
"Quelle. Ich werde das gleich zeigen."

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:79
msgid ""
"Do not list \"Google\" as a source. That's like using \"The Library\" as a "
"source in your report. Find the source of the image that Google is pointing "
"to."
msgstr ""
"Gebe nicht \"Google\" als Quelle an. Das entspricht \"In der Bibliothek\" "
"als Quelle in einer Hausarbeit. Suche die Quelle des Bildes, auf das Google "
"verweist."

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:84
msgid "Basic Sprites and Collisions"
msgstr "Grundlegende Sprites und Kollisionen"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:86
msgid ""
"Let's step through an example program that uses sprites. This example shows "
"how to create a screen of sprites that are coins, and collect them using a "
"sprite that is a character image controlled by the mouse as shown in the "
"figure below. The program keeps \"score\" on how many coins have been "
"collected. The code for this example may be found at:"
msgstr ""
"Lass uns ein Beispielprogramm durchgehen, das Sprites verwendet. In diesem "
"Beispiel wird gezeigt, wie man einen Bildschirm mit Sprites, die Münzen "
"darstellen, erstellt und diese mithilfe eines Sprites sammeln, bei dem es "
"sich um ein mit der Maus gesteuertes handelt (siehe Abbildung unten). Das "
"Programm gibt an, wie viele Münzen gesammelt wurden. Der Code für dieses "
"Beispiel befindet sich unter:"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:92
msgid "http://arcade.academy/examples/sprite_collect_coins.html"
msgstr "http://arcade.academy/examples/sprite_collect_coins.html"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:94
msgid "In this chapter, we'll step through that example."
msgstr "In diesem Kapitel werden wir dieses Beispiel durchgehen."

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:98
msgid ".. image:: chapters/18_sprites_and_collisions/collect_coins.gif"
msgstr ".. image:: chapters/18_sprites_and_collisions/collect_coins.gif"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:98
msgid "Example Sprite Game"
msgstr "Beispiel-Sprite-Spiel"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:101
msgid "Getting the Application Started"
msgstr "Rahmen für die Anwendung"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:103
msgid ""
"The first few lines of our program start off like other games we've done. We "
"import a couple libraries. Set a couple constants for the size of the "
"screen, and a couple new constants that we will use to scale our graphics."
msgstr ""
"Die ersten paar Zeilen unseres Programms fangen an wie andere Spiele, die "
"wir implementiert haben. Wir importieren einige Bibliotheken. Stellen ein "
"paar Konstanten für die Größe des Bildschirms und ein paar neue Konstanten, "
"mit denen wir unsere Grafiken skalieren, ein."

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:107
msgid ""
"The example below should have nothing new, it just creates a window and sets "
"a background color. We'll add in the new stuff soon."
msgstr ""
"Das folgende Beispiel sollte nichts Neues enthalten, es erstellt lediglich "
"ein Fenster und legt eine Hintergrundfarbe fest. Wir werden in Kürze die "
"neuen Sachen hinzufügen."

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:110
msgid "Sprite Sample Start"
msgstr "Anfang des Sprite-Beispiels"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:110
msgid ""
"\"\"\" Sprite Sample Program \"\"\"\n"
"\n"
"import random\n"
"import arcade\n"
"\n"
"# --- Constants ---\n"
"SPRITE_SCALING_PLAYER = 0.5\n"
"SPRITE_SCALING_COIN = 0.2\n"
"COIN_COUNT = 50\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"\n"
"class MyGame(arcade.Window):\n"
"    \"\"\" Our custom Window Class\"\"\"\n"
"\n"
"    def __init__(self):\n"
"        \"\"\" Initializer \"\"\"\n"
"        # Call the parent class initializer\n"
"        super().__init__(SCREEN_WIDTH, SCREEN_HEIGHT, \"Sprite Example\")\n"
"\n"
"    def on_draw(self):\n"
"        arcade.start_render()\n"
"\n"
"\n"
"def main():\n"
"    \"\"\" Main method \"\"\"\n"
"    window = MyGame()\n"
"    arcade.run()\n"
"\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()\n"
msgstr ""
"\"\"\" Sprite Sample Program \"\"\"\n"
"\n"
"import random\n"
"import arcade\n"
"\n"
"# --- Constants ---\n"
"SPRITE_SCALING_PLAYER = 0.5\n"
"SPRITE_SCALING_COIN = 0.2\n"
"COIN_COUNT = 50\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"\n"
"class MyGame(arcade.Window):\n"
"    \"\"\" Our custom Window Class\"\"\"\n"
"\n"
"    def __init__(self):\n"
"        \"\"\" Initializer \"\"\"\n"
"        # Call the parent class initializer\n"
"        super().__init__(SCREEN_WIDTH, SCREEN_HEIGHT, \"Sprite Example\")\n"
"\n"
"    def on_draw(self):\n"
"        arcade.start_render()\n"
"\n"
"\n"
"def main():\n"
"    \"\"\" Main method \"\"\"\n"
"    window = MyGame()\n"
"    arcade.run()\n"
"\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()\n"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:117
msgid "The Constructor"
msgstr "Der Konstruktor"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:119
msgid ""
"What's next? We need to add our attributes to the ``MyGame`` class. We add "
"our attributes to the ``__init__`` method. Here is our code with the "
"expanded ``__init__``:"
msgstr ""
"Was kommt als nächstes? Wir müssen unsere Attribute zu der Klasse ``MyGame`` "
"hinzufügen. Wir fügen unsere Attribute zu der Methode ``__init__`` hinzu. "
"Hier ist unser Code mit dem erweiterten ``__init__``:"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:123
msgid "Expanded Init"
msgstr "Erweitertes ``__init__``"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:123
msgid ""
"\"\"\" Sprite Sample Program \"\"\"\n"
"\n"
"import random\n"
"import arcade\n"
"\n"
"# --- Constants ---\n"
"SPRITE_SCALING_PLAYER = 0.5\n"
"SPRITE_SCALING_COIN = 0.2\n"
"COIN_COUNT = 50\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"\n"
"class MyGame(arcade.Window):\n"
"    \"\"\" Our custom Window Class\"\"\"\n"
"\n"
"    def __init__(self):\n"
"        \"\"\" Initializer \"\"\"\n"
"        # Call the parent class initializer\n"
"        super().__init__(SCREEN_WIDTH, SCREEN_HEIGHT, \"Sprite Example\")\n"
"\n"
"        # Variables that will hold sprite lists.\n"
"        self.player_list = None\n"
"        self.coin_list = None\n"
"\n"
"        # Set up the player info\n"
"        self.player_sprite = None\n"
"        self.score = 0\n"
"\n"
"        # Don't show the mouse cursor\n"
"        self.set_mouse_visible(False)\n"
"\n"
"        arcade.set_background_color(arcade.color.AMAZON)\n"
"\n"
"    def on_draw(self):\n"
"        arcade.start_render()\n"
"\n"
"\n"
"def main():\n"
"    \"\"\" Main method \"\"\"\n"
"    window = MyGame()\n"
"    arcade.run()\n"
"\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()\n"
msgstr ""
"\"\"\" Sprite Sample Program \"\"\"\n"
"\n"
"import random\n"
"import arcade\n"
"\n"
"# --- Constants ---\n"
"SPRITE_SCALING_PLAYER = 0.5\n"
"SPRITE_SCALING_COIN = 0.2\n"
"COIN_COUNT = 50\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"\n"
"class MyGame(arcade.Window):\n"
"    \"\"\" Our custom Window Class\"\"\"\n"
"\n"
"    def __init__(self):\n"
"        \"\"\" Initializer \"\"\"\n"
"        # Call the parent class initializer\n"
"        super().__init__(SCREEN_WIDTH, SCREEN_HEIGHT, \"Sprite Example\")\n"
"\n"
"        # Variables that will hold sprite lists.\n"
"        self.player_list = None\n"
"        self.coin_list = None\n"
"\n"
"        # Set up the player info\n"
"        self.player_sprite = None\n"
"        self.score = 0\n"
"\n"
"        # Don't show the mouse cursor\n"
"        self.set_mouse_visible(False)\n"
"\n"
"        arcade.set_background_color(arcade.color.AMAZON)\n"
"\n"
"    def on_draw(self):\n"
"        arcade.start_render()\n"
"\n"
"\n"
"def main():\n"
"    \"\"\" Main method \"\"\"\n"
"    window = MyGame()\n"
"    arcade.run()\n"
"\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()\n"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:129
msgid "The variables we are creating:"
msgstr "Die Variablen, die wir erstellen:"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:131
msgid ""
"``player_list``:  When working with sprites, we normally put them into "
"lists. Other game engines might call these sprite groups, or sprite layers. "
"Our game will have one list for the player, and one list for the coins. Even "
"if there is only one sprite, we should still put it in a list because there "
"is a lot of code in ``SpriteList`` to optimize drawing."
msgstr ""
"``player_list``: Bei der Arbeit mit Sprites werden diese normalerweise in "
"Listen abgelegt. Andere Spiele-Engines nennen diese Listen Sprite-Gruppen "
"oder Sprite-Ebenen. Unser Spiel hat eine Liste für die Spielfigur und eine "
"Liste für die Münzen. Auch wenn es nur ein Sprite gibt, sollten wir es "
"dennoch in eine Liste aufnehmen, da ``SpriteList`` viel Code enthält, um das "
"Zeichnen zu optimieren."

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:136
msgid ""
"``coin_list``: This is a list of all the coins. We will be checking if the "
"player touches any sprite in this list."
msgstr ""
"``coin_list``: Dies ist eine Liste aller Münzen. Wir werden prüfen, ob die "
"Spielfigur ein Sprite in dieser Liste berührt."

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:138
msgid ""
"``player_sprite``: This points to our player's sprite. It is the sprite we "
"will move."
msgstr ""
"``player_sprite``: Dies zeigt auf das Sprite unserer Spielfigur. Es ist das "
"Sprite, das wir bewegen werden."

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:140
msgid "``score``: This keeps track of our score."
msgstr "``score``: Dies zeichnet unsere Punktzahl auf."

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:142
msgid ""
"We use a command built into the parent ``Window`` class called "
"``set_mouse_visible`` to make the mouse not visible. Finally we set the "
"background color."
msgstr ""
"Wir verwenden die Methode ``set_mouse_visible`` der Elternklasse ``Window``, "
"um die Maus unsichtbar zu machen. Zuletzt stellen wir die Hintergrundfarbe "
"ein."

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:147
msgid "The `setup` Function"
msgstr "Die ``setup``-Funktion"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:149
msgid ""
"Next up, we will create a ``setup`` method. This will create our sprites and "
"get our game set up. We do this in a different method than ``__init__`` so "
"that if we ever want to restart the game, we can just call ``setup`` again."
msgstr ""
"Als nächstes erstellen wir eine ``setup``-Methode. Dadurch werden unsere "
"Sprites erstellt und unser Spiel eingerichtet. Wir machen das in einer "
"anderen Methode als ``__init__``, so dass wir, wenn wir das Spiel jemals neu "
"starten wollen, einfach ``setup`` erneut aufrufen können."

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:153
msgid ""
"The ``setup`` method is not called automatically. Therefore in the example "
"below, note we have added the code that calls the ``setup`` function near "
"the end: ``window.setup()``."
msgstr ""
"Die Methode ``setup`` wird nicht automatisch aufgerufen. Beachte daher, dass "
"wir im folgenden Beispiel den Code hinzugefügt haben, der die Funktion "
"``setup`` gegen Ende aufruft: ``window.setup ()``."

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:158
msgid "Sprite Sample With Player"
msgstr "Sprite-Beispiel mit Spielfigur"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:158
msgid ""
"\"\"\" Sprite Sample Program \"\"\"\n"
"\n"
"import random\n"
"import arcade\n"
"\n"
"# --- Constants ---\n"
"SPRITE_SCALING_PLAYER = 0.5\n"
"SPRITE_SCALING_COIN = 0.2\n"
"COIN_COUNT = 50\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"\n"
"class MyGame(arcade.Window):\n"
"    \"\"\" Our custom Window Class\"\"\"\n"
"\n"
"    def __init__(self):\n"
"        \"\"\" Initializer \"\"\"\n"
"        # Call the parent class initializer\n"
"        super().__init__(SCREEN_WIDTH, SCREEN_HEIGHT, \"Sprite Example\")\n"
"\n"
"        # Variables that will hold sprite lists\n"
"        self.player_list = None\n"
"        self.coin_list = None\n"
"\n"
"        # Set up the player info\n"
"        self.player_sprite = None\n"
"        self.score = 0\n"
"\n"
"        # Don't show the mouse cursor\n"
"        self.set_mouse_visible(False)\n"
"\n"
"        arcade.set_background_color(arcade.color.AMAZON)\n"
"\n"
"    def setup(self):\n"
"        \"\"\" Set up the game and initialize the variables. \"\"\"\n"
"\n"
"        # Sprite lists\n"
"        self.player_list = arcade.SpriteList()\n"
"        self.coin_list = arcade.SpriteList()\n"
"\n"
"        # Score\n"
"        self.score = 0\n"
"\n"
"        # Set up the player\n"
"        # Character image from kenney.nl\n"
"        self.player_sprite = arcade.Sprite(\"character.png\", "
"SPRITE_SCALING_PLAYER)\n"
"        self.player_sprite.center_x = 50\n"
"        self.player_sprite.center_y = 50\n"
"        self.player_list.append(self.player_sprite)\n"
"\n"
"    def on_draw(self):\n"
"        arcade.start_render()\n"
"\n"
"        # Draw the sprite lists here. Typically sprites are divided into\n"
"        # different groups. Other game engines might call these \"sprite "
"layers\"\n"
"        # or \"sprite groups.\" Sprites that don't move should be drawn in "
"their\n"
"        # own group for the best performance, as Arcade can tell the "
"graphics\n"
"        # card to just redraw them at the same spot.\n"
"        # Try to avoid drawing sprites on their own, use a SpriteList\n"
"        # because there are many performance improvements in that code.\n"
"        self.coin_list.draw()\n"
"        self.player_list.draw()\n"
"\n"
"\n"
"def main():\n"
"    \"\"\" Main method \"\"\"\n"
"    window = MyGame()\n"
"    window.setup()\n"
"    arcade.run()\n"
"\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()\n"
msgstr ""
"\"\"\" Sprite Sample Program \"\"\"\n"
"\n"
"import random\n"
"import arcade\n"
"\n"
"# --- Constants ---\n"
"SPRITE_SCALING_PLAYER = 0.5\n"
"SPRITE_SCALING_COIN = 0.2\n"
"COIN_COUNT = 50\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"\n"
"class MyGame(arcade.Window):\n"
"    \"\"\" Our custom Window Class\"\"\"\n"
"\n"
"    def __init__(self):\n"
"        \"\"\" Initializer \"\"\"\n"
"        # Call the parent class initializer\n"
"        super().__init__(SCREEN_WIDTH, SCREEN_HEIGHT, \"Sprite Example\")\n"
"\n"
"        # Variables that will hold sprite lists\n"
"        self.player_list = None\n"
"        self.coin_list = None\n"
"\n"
"        # Set up the player info\n"
"        self.player_sprite = None\n"
"        self.score = 0\n"
"\n"
"        # Don't show the mouse cursor\n"
"        self.set_mouse_visible(False)\n"
"\n"
"        arcade.set_background_color(arcade.color.AMAZON)\n"
"\n"
"    def setup(self):\n"
"        \"\"\" Set up the game and initialize the variables. \"\"\"\n"
"\n"
"        # Sprite lists\n"
"        self.player_list = arcade.SpriteList()\n"
"        self.coin_list = arcade.SpriteList()\n"
"\n"
"        # Score\n"
"        self.score = 0\n"
"\n"
"        # Set up the player\n"
"        # Character image from kenney.nl\n"
"        self.player_sprite = arcade.Sprite(\"character.png\", "
"SPRITE_SCALING_PLAYER)\n"
"        self.player_sprite.center_x = 50\n"
"        self.player_sprite.center_y = 50\n"
"        self.player_list.append(self.player_sprite)\n"
"\n"
"    def on_draw(self):\n"
"        arcade.start_render()\n"
"\n"
"        # Draw the sprite lists here. Typically sprites are divided into\n"
"        # different groups. Other game engines might call these \"sprite "
"layers\"\n"
"        # or \"sprite groups.\" Sprites that don't move should be drawn in "
"their\n"
"        # own group for the best performance, as Arcade can tell the "
"graphics\n"
"        # card to just redraw them at the same spot.\n"
"        # Try to avoid drawing sprites on their own, use a SpriteList\n"
"        # because there are many performance improvements in that code.\n"
"        self.coin_list.draw()\n"
"        self.player_list.draw()\n"
"\n"
"\n"
"def main():\n"
"    \"\"\" Main method \"\"\"\n"
"    window = MyGame()\n"
"    window.setup()\n"
"    arcade.run()\n"
"\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()\n"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:165
msgid "How does the code above work?"
msgstr "Wie funktioniert der Code oben?"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:167
msgid ""
"First, we need some lists to hold our sprites. We could do use a list like "
"this:"
msgstr ""
"Zuerst brauchen wir einige Listen, um unsere Sprites aufzunehmen. Wir "
"könnten eine Liste wie diese verwenden:"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:170
msgid "coin_list = []"
msgstr "coin_list = []"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:174
msgid ""
"But wait! ``coin_list`` is an instance variable that's part of our class. we "
"need to prepend it with ``self.``."
msgstr ""
"Aber warte! ``coin_list`` ist eine Objektvariable, die Teil unserer Klasse "
"ist. Wir müssen ``self.`` voranstellen."

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:177
msgid "self.coin_list = []"
msgstr "self.coin_list = []"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:181
msgid ""
"However, the Arcade library has a class especially for handling sprite "
"lists. This class is called ``SpriteList``. For more information, check out "
"the SpriteList_ documentation. So instead of creating an empty list with "
"``[]``, we will create a new instance of the ``SpriteList`` class:"
msgstr ""
"Die Arcade-Bibliothek verfügt jedoch über eine Klasse, die speziell für den "
"Umgang mit Sprite-Listen vorgesehen ist. Diese Klasse heißt ``SpriteList``. "
"Weitere Informationen findest du in der SpriteList_-Dokumentation. Anstatt "
"also eine leere Liste mit ``[]`` zu erstellen, erstellen wir ein neues "
"Exemplar der Klasse ``SpriteList``:"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:189
msgid "self.coin_list = SpriteList()"
msgstr "self.coin_list = SpriteList()"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:193
msgid ""
"Except that doesn't work. Why? ``SpriteList`` is in the Arcade library. We "
"need to prepend any reference to things in the Arcade library with "
"``arcade`` of course, so now we have:"
msgstr ""
"Nur, dass das nicht funktioniert. Warum? ``SpriteList`` befindet sich in der "
"Arcade-Bibliothek. Wir müssen natürlich vor alle Verweise auf Dinge in der "
"Arcade-Bibliothek ``arcade.`` schreiben, also haben wir jetzt:"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:197
msgid "self.coin_list = arcade.SpriteList()"
msgstr "self.coin_list = arcade.SpriteList()"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:201
msgid ""
"We need a separate list for just coins. This list won't have the player. We "
"also need to reset our score to 0."
msgstr ""
"Wir brauchen eine separate Liste nur für Münzen. Diese Liste wird die "
"Spielfigur nicht enthalten. Wir müssen auch unsere Punktzahl auf 0 "
"zurücksetzen."

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:204
msgid ""
"self.coin_list = arcade.SpriteList()\n"
"\n"
"self.score = 0"
msgstr ""
"self.coin_list = arcade.SpriteList()\n"
"\n"
"self.score = 0"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:210
msgid ""
"Now we need to create our sprites. The name of the class that represents "
"sprites is called ``Sprite``. You can read more about it by looking at the "
"Sprite_ documentation. The Sprite constructor takes two parameters. A path "
"to the image we will be using, and how big to scale it."
msgstr ""
"Jetzt müssen wir unsere Sprites erstellen. Der Name der Klasse, die Sprites "
"repräsentiert, heißt ``Sprite``. Weitere Informationen finden Sie in der "
"Sprite_-Dokumentation. Der Sprite-Konstruktor akzeptiert zwei Parameter: Ein "
"Pfad zu dem Bild, das wir verwenden werden, und wie groß es skaliert werden "
"soll."

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:216
msgid ""
"For class, please source the image right before you load it. If you drew "
"your own image, please note that as well."
msgstr ""
"Gebe bitte die Quelle des Bilds direkt vor dem Laden an. Wenn du ein eigenes "
"Bild gezeichnet hast, gib dies bitte ebenfalls an."

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:221
msgid ""
"# Character image from kenney.nl\n"
"self.player_sprite = arcade.Sprite(\"character.png\", SPRITE_SCALING_PLAYER)"
msgstr ""
"# Character image from kenney.nl\n"
"self.player_sprite = arcade.Sprite(\"character.png\", SPRITE_SCALING_PLAYER)"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:227
msgid ""
"How do we draw all our sprites? Really easy. Just call the ``draw`` method "
"that exists for us in the ``SpriteList`` class. We just need to do this for "
"each of our sprite lists."
msgstr ""
"Wie zeichnen wir alle unsere Sprites? Wirklich einfach. Rufe einfach die "
"Methode ``draw`` auf, die für uns in der Klasse ``SpriteList`` existiert. "
"Wir müssen dies nur für jede unserer Sprite-Listen tun."

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:231
msgid ""
"def on_draw(self):\n"
"\n"
"        arcade.start_render()\n"
"\n"
"        # Draw all the sprite lists.\n"
"        self.coin_list.draw()\n"
"        self.player_list.draw()"
msgstr ""
"def on_draw(self):\n"
"\n"
"        arcade.start_render()\n"
"\n"
"        # Draw all the sprite lists.\n"
"        self.coin_list.draw()\n"
"        self.player_list.draw()"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:241
msgid ""
"Wait. We don't have many sprites. There are no coins, and we have just the "
"player. Let's add a ``for`` loop to our program and create a bunch of coins:"
msgstr ""
"Warte! Wir haben nicht viele Sprites. Es gibt keine Münzen und wir haben nur "
"die Spielfigur. Fügen wir unserem Programm eine ``for``-Schleife hinzu und "
"erstellen einige Münzen:"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:244
msgid "Sprite Sample With Player And Coins"
msgstr "Sprite-Beispiel mit Spieler und Münzen"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:244
msgid ""
"\"\"\" Sprite Sample Program \"\"\"\n"
"\n"
"import random\n"
"import arcade\n"
"\n"
"# --- Constants ---\n"
"SPRITE_SCALING_PLAYER = 0.5\n"
"SPRITE_SCALING_COIN = 0.2\n"
"COIN_COUNT = 50\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"\n"
"class MyGame(arcade.Window):\n"
"    \"\"\" Our custom Window Class\"\"\"\n"
"\n"
"    def __init__(self):\n"
"        \"\"\" Initializer \"\"\"\n"
"        # Call the parent class initializer\n"
"        super().__init__(SCREEN_WIDTH, SCREEN_HEIGHT, \"Sprite Example\")\n"
"\n"
"        # Variables that will hold sprite lists\n"
"        self.coin_list = None\n"
"        self.player_list = None\n"
"\n"
"        # Set up the player info\n"
"        self.player_sprite = None\n"
"        self.score = 0\n"
"\n"
"        # Don't show the mouse cursor\n"
"        self.set_mouse_visible(False)\n"
"\n"
"        arcade.set_background_color(arcade.color.AMAZON)\n"
"\n"
"    def setup(self):\n"
"        \"\"\" Set up the game and initialize the variables. \"\"\"\n"
"\n"
"        # Sprite lists\n"
"        self.player_list = arcade.SpriteList()\n"
"        self.coin_list = arcade.SpriteList()\n"
"\n"
"        # Score\n"
"        self.score = 0\n"
"\n"
"        # Set up the player\n"
"        # Character image from kenney.nl\n"
"        self.player_sprite = arcade.Sprite(\"character.png\", "
"SPRITE_SCALING_PLAYER)\n"
"        self.player_sprite.center_x = 50\n"
"        self.player_sprite.center_y = 50\n"
"        self.player_list.append(self.player_sprite)\n"
"\n"
"        # Create the coins\n"
"        for i in range(COIN_COUNT):\n"
"\n"
"            # Create the coin instance\n"
"            # Coin image from kenney.nl\n"
"            coin = arcade.Sprite(\"coin_01.png\", SPRITE_SCALING_COIN)\n"
"\n"
"            # Position the coin\n"
"            coin.center_x = random.randrange(SCREEN_WIDTH)\n"
"            coin.center_y = random.randrange(SCREEN_HEIGHT)\n"
"\n"
"            # Add the coin to the lists\n"
"            self.coin_list.append(coin)\n"
"\n"
"    def on_draw(self):\n"
"        \"\"\" Draw everything \"\"\"\n"
"        arcade.start_render()\n"
"\n"
"        # Draw the sprite lists here. Typically sprites are divided into\n"
"        # different groups. Other game engines might call these \"sprite "
"layers\"\n"
"        # or \"sprite groups.\" Sprites that don't move should be drawn in "
"their\n"
"        # own group for the best performance, as Arcade can tell the "
"graphics\n"
"        # card to just redraw them at the same spot.\n"
"        # Try to avoid drawing sprites on their own, and not in a layer.\n"
"        # There are many performance improvements to drawing in a layer.\n"
"        self.coin_list.draw()\n"
"        self.player_list.draw()\n"
"\n"
"\n"
"def main():\n"
"    \"\"\" Main method \"\"\"\n"
"    window = MyGame()\n"
"    window.setup()\n"
"    arcade.run()\n"
"\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()\n"
msgstr ""
"\"\"\" Sprite Sample Program \"\"\"\n"
"\n"
"import random\n"
"import arcade\n"
"\n"
"# --- Constants ---\n"
"SPRITE_SCALING_PLAYER = 0.5\n"
"SPRITE_SCALING_COIN = 0.2\n"
"COIN_COUNT = 50\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"\n"
"class MyGame(arcade.Window):\n"
"    \"\"\" Our custom Window Class\"\"\"\n"
"\n"
"    def __init__(self):\n"
"        \"\"\" Initializer \"\"\"\n"
"        # Call the parent class initializer\n"
"        super().__init__(SCREEN_WIDTH, SCREEN_HEIGHT, \"Sprite Example\")\n"
"\n"
"        # Variables that will hold sprite lists\n"
"        self.coin_list = None\n"
"        self.player_list = None\n"
"\n"
"        # Set up the player info\n"
"        self.player_sprite = None\n"
"        self.score = 0\n"
"\n"
"        # Don't show the mouse cursor\n"
"        self.set_mouse_visible(False)\n"
"\n"
"        arcade.set_background_color(arcade.color.AMAZON)\n"
"\n"
"    def setup(self):\n"
"        \"\"\" Set up the game and initialize the variables. \"\"\"\n"
"\n"
"        # Sprite lists\n"
"        self.player_list = arcade.SpriteList()\n"
"        self.coin_list = arcade.SpriteList()\n"
"\n"
"        # Score\n"
"        self.score = 0\n"
"\n"
"        # Set up the player\n"
"        # Character image from kenney.nl\n"
"        self.player_sprite = arcade.Sprite(\"character.png\", "
"SPRITE_SCALING_PLAYER)\n"
"        self.player_sprite.center_x = 50\n"
"        self.player_sprite.center_y = 50\n"
"        self.player_list.append(self.player_sprite)\n"
"\n"
"        # Create the coins\n"
"        for i in range(COIN_COUNT):\n"
"\n"
"            # Create the coin instance\n"
"            # Coin image from kenney.nl\n"
"            coin = arcade.Sprite(\"coin_01.png\", SPRITE_SCALING_COIN)\n"
"\n"
"            # Position the coin\n"
"            coin.center_x = random.randrange(SCREEN_WIDTH)\n"
"            coin.center_y = random.randrange(SCREEN_HEIGHT)\n"
"\n"
"            # Add the coin to the lists\n"
"            self.coin_list.append(coin)\n"
"\n"
"    def on_draw(self):\n"
"        \"\"\" Draw everything \"\"\"\n"
"        arcade.start_render()\n"
"\n"
"        # Draw the sprite lists here. Typically sprites are divided into\n"
"        # different groups. Other game engines might call these \"sprite "
"layers\"\n"
"        # or \"sprite groups.\" Sprites that don't move should be drawn in "
"their\n"
"        # own group for the best performance, as Arcade can tell the "
"graphics\n"
"        # card to just redraw them at the same spot.\n"
"        # Try to avoid drawing sprites on their own, and not in a layer.\n"
"        # There are many performance improvements to drawing in a layer.\n"
"        self.coin_list.draw()\n"
"        self.player_list.draw()\n"
"\n"
"\n"
"def main():\n"
"    \"\"\" Main method \"\"\"\n"
"    window = MyGame()\n"
"    window.setup()\n"
"    arcade.run()\n"
"\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()\n"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:251
msgid "Drawing The Score"
msgstr "Zeichnen des Spielstands"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:253
msgid ""
"In addition to drawing the sprites, let's go ahead and put the score on the "
"screen:"
msgstr ""
"Lass uns nicht nur die Sprites zeichnen, sondern auch den Spielstand auf dem "
"Bildschirm anzeigen:"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:256
msgid ""
"# Put the text on the screen.\n"
"output = \"Score: \" + str(self.score)\n"
"arcade.draw_text(output, 10, 20, arcade.color.WHITE, 14)"
msgstr ""
"# Put the text on the screen.\n"
"output = \"Score: \" + str(self.score)\n"
"arcade.draw_text(output, 10, 20, arcade.color.WHITE, 14)"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:262
msgid ""
"Rather than do that ``\"Score: \" + str(self.score)`` it is possible to do "
"print formatting if you are using Python 3.6 or later. We'll talk more about "
"print formatting later, but that code would look like:"
msgstr ""
"Anstatt mit `` \"Score:\" + str (self.score) `` den Spielstand auszugeben "
"ist es möglich die Ausgabe zu formatieren, wenn Sie Python 3.6 oder höher "
"verwenden. Wir werden später mehr über die Formatierung von Ausgaben "
"sprechen, aber dieser Code würde so aussehen:"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:266
msgid ""
"# Put the text on the screen.\n"
"output = f\"Score: {self.score}\"\n"
"arcade.draw_text(output, 10, 20, arcade.color.WHITE, 14)"
msgstr ""
"# Put the text on the screen.\n"
"output = f\"Score: {self.score}\"\n"
"arcade.draw_text(output, 10, 20, arcade.color.WHITE, 14)"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:272
msgid ""
"There are three standards for how to format strings in Python, so that whole "
"subject is a bit confusing."
msgstr ""
"Es gibt drei Standards zum Formatieren von Zeichenfolgen in Python, sodass "
"das gesamte Thema etwas verwirrend ist."

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:276
msgid "The On Mouse Motion Method"
msgstr "Die ``on_mouse_motion``-Methode"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:278
msgid ""
"Moving the player sprite with the mouse is easy. All sprites have instance "
"variables ``center_x`` and ``center_y``. Just change those values to the "
"mouse's x and y location to move the sprite."
msgstr ""
"Das Bewegen des Spielfigur-Sprites mit der Maus ist einfach. Alle Sprites "
"haben Objektvariablen ``center_x`` und ``center_y``. Ändere diese Werte "
"einfach in die X- und Y-Position der Maus, um das Sprite zu verschieben."

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:282
msgid ""
"def on_mouse_motion(self, x, y, dx, dy):\n"
"\n"
"    self.player_sprite.center_x = x\n"
"    self.player_sprite.center_y = y"
msgstr ""
"def on_mouse_motion(self, x, y, dx, dy):\n"
"\n"
"    self.player_sprite.center_x = x\n"
"    self.player_sprite.center_y = y"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:290
msgid "Now, our whole program looks like:"
msgstr "Jetzt sieht unser gesamtes Programm so aus:"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:292
msgid "Sprite Sample With Mouse Motion And Score"
msgstr "Sprite-Beispiel mit Mausbewegung und Spielstand"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:292
msgid ""
"\"\"\" Sprite Sample Program \"\"\"\n"
"\n"
"import random\n"
"import arcade\n"
"\n"
"# --- Constants ---\n"
"SPRITE_SCALING_PLAYER = 0.5\n"
"SPRITE_SCALING_COIN = 0.2\n"
"COIN_COUNT = 50\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"\n"
"class MyGame(arcade.Window):\n"
"    \"\"\" Our custom Window Class\"\"\"\n"
"\n"
"    def __init__(self):\n"
"        \"\"\" Initializer \"\"\"\n"
"        # Call the parent class initializer\n"
"        super().__init__(SCREEN_WIDTH, SCREEN_HEIGHT, \"Sprite Example\")\n"
"\n"
"        # Variables that will hold sprite lists\n"
"        self.player_list = None\n"
"        self.coin_list = None\n"
"\n"
"        # Set up the player info\n"
"        self.player_sprite = None\n"
"        self.score = 0\n"
"\n"
"        # Don't show the mouse cursor\n"
"        self.set_mouse_visible(False)\n"
"\n"
"        arcade.set_background_color(arcade.color.AMAZON)\n"
"\n"
"    def setup(self):\n"
"        \"\"\" Set up the game and initialize the variables. \"\"\"\n"
"\n"
"        # Sprite lists\n"
"        self.player_list = arcade.SpriteList()\n"
"        self.coin_list = arcade.SpriteList()\n"
"\n"
"        # Score\n"
"        self.score = 0\n"
"\n"
"        # Set up the player\n"
"        # Character image from kenney.nl\n"
"        self.player_sprite = arcade.Sprite(\"character.png\", "
"SPRITE_SCALING_PLAYER)\n"
"        self.player_sprite.center_x = 50\n"
"        self.player_sprite.center_y = 50\n"
"        self.player_list.append(self.player_sprite)\n"
"\n"
"        # Create the coins\n"
"        for i in range(COIN_COUNT):\n"
"\n"
"            # Create the coin instance\n"
"            # Coin image from kenney.nl\n"
"            coin = arcade.Sprite(\"coin_01.png\", SPRITE_SCALING_COIN)\n"
"\n"
"            # Position the coin\n"
"            coin.center_x = random.randrange(SCREEN_WIDTH)\n"
"            coin.center_y = random.randrange(SCREEN_HEIGHT)\n"
"\n"
"            # Add the coin to the lists\n"
"            self.coin_list.append(coin)\n"
"\n"
"    def on_draw(self):\n"
"        \"\"\" Draw everything \"\"\"\n"
"        arcade.start_render()\n"
"        self.coin_list.draw()\n"
"        self.player_list.draw()\n"
"\n"
"        # Put the text on the screen.\n"
"        output = f\"Score: {self.score}\"\n"
"        arcade.draw_text(output, 10, 20, arcade.color.WHITE, 14)\n"
"\n"
"    def on_mouse_motion(self, x, y, dx, dy):\n"
"        \"\"\" Handle Mouse Motion \"\"\"\n"
"\n"
"        # Move the center of the player sprite to match the mouse x, y\n"
"        self.player_sprite.center_x = x\n"
"        self.player_sprite.center_y = y\n"
"\n"
"\n"
"def main():\n"
"    \"\"\" Main method \"\"\"\n"
"    window = MyGame()\n"
"    window.setup()\n"
"    arcade.run()\n"
"\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()\n"
msgstr ""
"\"\"\" Sprite Sample Program \"\"\"\n"
"\n"
"import random\n"
"import arcade\n"
"\n"
"# --- Constants ---\n"
"SPRITE_SCALING_PLAYER = 0.5\n"
"SPRITE_SCALING_COIN = 0.2\n"
"COIN_COUNT = 50\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"\n"
"class MyGame(arcade.Window):\n"
"    \"\"\" Our custom Window Class\"\"\"\n"
"\n"
"    def __init__(self):\n"
"        \"\"\" Initializer \"\"\"\n"
"        # Call the parent class initializer\n"
"        super().__init__(SCREEN_WIDTH, SCREEN_HEIGHT, \"Sprite Example\")\n"
"\n"
"        # Variables that will hold sprite lists\n"
"        self.player_list = None\n"
"        self.coin_list = None\n"
"\n"
"        # Set up the player info\n"
"        self.player_sprite = None\n"
"        self.score = 0\n"
"\n"
"        # Don't show the mouse cursor\n"
"        self.set_mouse_visible(False)\n"
"\n"
"        arcade.set_background_color(arcade.color.AMAZON)\n"
"\n"
"    def setup(self):\n"
"        \"\"\" Set up the game and initialize the variables. \"\"\"\n"
"\n"
"        # Sprite lists\n"
"        self.player_list = arcade.SpriteList()\n"
"        self.coin_list = arcade.SpriteList()\n"
"\n"
"        # Score\n"
"        self.score = 0\n"
"\n"
"        # Set up the player\n"
"        # Character image from kenney.nl\n"
"        self.player_sprite = arcade.Sprite(\"character.png\", "
"SPRITE_SCALING_PLAYER)\n"
"        self.player_sprite.center_x = 50\n"
"        self.player_sprite.center_y = 50\n"
"        self.player_list.append(self.player_sprite)\n"
"\n"
"        # Create the coins\n"
"        for i in range(COIN_COUNT):\n"
"\n"
"            # Create the coin instance\n"
"            # Coin image from kenney.nl\n"
"            coin = arcade.Sprite(\"coin_01.png\", SPRITE_SCALING_COIN)\n"
"\n"
"            # Position the coin\n"
"            coin.center_x = random.randrange(SCREEN_WIDTH)\n"
"            coin.center_y = random.randrange(SCREEN_HEIGHT)\n"
"\n"
"            # Add the coin to the lists\n"
"            self.coin_list.append(coin)\n"
"\n"
"    def on_draw(self):\n"
"        \"\"\" Draw everything \"\"\"\n"
"        arcade.start_render()\n"
"        self.coin_list.draw()\n"
"        self.player_list.draw()\n"
"\n"
"        # Put the text on the screen.\n"
"        output = f\"Score: {self.score}\"\n"
"        arcade.draw_text(output, 10, 20, arcade.color.WHITE, 14)\n"
"\n"
"    def on_mouse_motion(self, x, y, dx, dy):\n"
"        \"\"\" Handle Mouse Motion \"\"\"\n"
"\n"
"        # Move the center of the player sprite to match the mouse x, y\n"
"        self.player_sprite.center_x = x\n"
"        self.player_sprite.center_y = y\n"
"\n"
"\n"
"def main():\n"
"    \"\"\" Main method \"\"\"\n"
"    window = MyGame()\n"
"    window.setup()\n"
"    arcade.run()\n"
"\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()\n"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:299
msgid "The Update Method"
msgstr "Die ``update``-Methode"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:301
msgid "Our ``update`` method needs to do three things:"
msgstr "Unsere ``update``-Methode muss drei Dinge tun:"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:303
msgid "Update each of the sprites"
msgstr "Aktualisieren jedes Sprite"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:304
msgid "Check to see if the player is touching any coins"
msgstr "Überprüfen, ob die Spielfigur Münzen berührt"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:305
msgid "Remove any coins colliding with the player, and update the score."
msgstr ""
"Entfernen aller Münzen, die mit dem Spieler kollidieren, und aktualisieren "
"des Spielstands."

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:307
msgid ""
"Each sprite has its own ``update`` method. This allows sprites to move and "
"animate its images. Right now, our sprite does not have this method. But we "
"will soon. Rather than call the ``update`` method of each sprite we have, "
"there is an ``update`` method in each sprite list that will call ``update`` "
"on each sprite in the list. Therefore, just calling ``update`` with our "
"``coin_list`` will cause all coin sprites to update."
msgstr ""
"Jedes Sprite hat eine eigene ``update``-Methode. Auf diese Weise können "
"Sprites ihre Abbildung bewegen und animieren. Derzeit verfügt unser Sprite "
"nicht über diese Methode. Aber wir werden sie bald implementieren. Anstatt "
"die ``update``-Methode jedes Sprites, das wir haben, aufzurufen, gibt es in "
"jeder Sprite-Liste eine ``update``-Methode, die ``update`` für jedes Sprite "
"in der Liste aufruft. Wenn Sie also ``update`` mit unserer ``coin_list`` "
"aufrufen, werden alle Münzsprites aktualisiert."

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:314
msgid "self.coin_list.update()"
msgstr "self.coin_list.update()"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:318
msgid ""
"How do we detect what coins are touching the player? We call the "
"``check_for_collision_with_list`` method. Pass it in our player sprite, "
"along with a list of all the coins. That function will return a list of all "
"colliding sprites. If no sprites collide, the list will be empty."
msgstr ""
"Wie erkennen wir, welche Münzen die Spielfigur berührt? Wir nennen die "
"Methode ``check_for_collision_with_list``. Ruf sie mit unserer Spielfigur "
"und mit einer Liste aller Münzen auf. Diese Funktion gibt eine Liste aller "
"kollidierenden Sprites zurück. Wenn keine Sprites kollidieren, ist die Liste "
"leer."

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:323
msgid ""
"# Generate a list of all sprites that collided with the player.\n"
"coins_hit_list = arcade.check_for_collision_with_list(self.player_sprite, "
"self.coin_list)"
msgstr ""
"# Generate a list of all sprites that collided with the player.\n"
"coins_hit_list = arcade.check_for_collision_with_list(self.player_sprite, "
"self.coin_list)"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:328
msgid ""
"What do we do with this ``hit_list`` we get back? We loop through it. We add "
"one to the score for each sprite hit."
msgstr ""
"Was machen wir mit dieser ``hit_list``, die wir zurückbekommen? Wir "
"iterieren durch sie. Für jeden Sprite-Treffer wird der Spielstand um eine "
"Münze erhöht."

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:331
msgid ""
"We also need to get rid of the sprite. The sprite class has a method called "
"``kill``. This method will remove the sprite from existence."
msgstr ""
"Wir müssen auch das Sprite loswerden. Die Sprite-Klasse hat eine Methode "
"namens ``kill``. Diese Methode vernichtet das Sprite."

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:334
msgid ""
"# Loop through each colliding sprite, remove it, and add to the score.\n"
"for coin in coins_hit_list:\n"
"    coin.kill()\n"
"    self.score += 1"
msgstr ""
"# Loop through each colliding sprite, remove it, and add to the score.\n"
"for coin in coins_hit_list:\n"
"    coin.kill()\n"
"    self.score += 1"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:341
msgid "Here's the whole ``update`` method put together:"
msgstr "Hier ist die gesamte ``update``-Methode zusammengefasst:"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:343
msgid "Sprite Sample With Update Method"
msgstr "Sprite-Beispiel mit ``update``-Methode"

#: ../../source/chapters/18_sprites_and_collisions/sprites.rst:343
msgid ""
"\"\"\" Sprite Sample Program \"\"\"\n"
"\n"
"import random\n"
"import arcade\n"
"\n"
"# --- Constants ---\n"
"SPRITE_SCALING_PLAYER = 0.5\n"
"SPRITE_SCALING_COIN = 0.2\n"
"COIN_COUNT = 50\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"\n"
"class MyGame(arcade.Window):\n"
"    \"\"\" Our custom Window Class\"\"\"\n"
"\n"
"    def __init__(self):\n"
"        \"\"\" Initializer \"\"\"\n"
"        # Call the parent class initializer\n"
"        super().__init__(SCREEN_WIDTH, SCREEN_HEIGHT, \"Sprite Example\")\n"
"\n"
"        # Variables that will hold sprite lists\n"
"        self.player_list = None\n"
"        self.coin_list = None\n"
"\n"
"        # Set up the player info\n"
"        self.player_sprite = None\n"
"        self.score = 0\n"
"\n"
"        # Don't show the mouse cursor\n"
"        self.set_mouse_visible(False)\n"
"\n"
"        arcade.set_background_color(arcade.color.AMAZON)\n"
"\n"
"    def setup(self):\n"
"        \"\"\" Set up the game and initialize the variables. \"\"\"\n"
"\n"
"        # Sprite lists\n"
"        self.player_list = arcade.SpriteList()\n"
"        self.coin_list = arcade.SpriteList()\n"
"\n"
"        # Score\n"
"        self.score = 0\n"
"\n"
"        # Set up the player\n"
"        # Character image from kenney.nl\n"
"        self.player_sprite = arcade.Sprite(\"character.png\", "
"SPRITE_SCALING_PLAYER)\n"
"        self.player_sprite.center_x = 50\n"
"        self.player_sprite.center_y = 50\n"
"        self.player_list.append(self.player_sprite)\n"
"\n"
"        # Create the coins\n"
"        for i in range(COIN_COUNT):\n"
"\n"
"            # Create the coin instance\n"
"            # Coin image from kenney.nl\n"
"            coin = arcade.Sprite(\"coin_01.png\", SPRITE_SCALING_COIN)\n"
"\n"
"            # Position the coin\n"
"            coin.center_x = random.randrange(SCREEN_WIDTH)\n"
"            coin.center_y = random.randrange(SCREEN_HEIGHT)\n"
"\n"
"            # Add the coin to the lists\n"
"            self.coin_list.append(coin)\n"
"\n"
"    def on_draw(self):\n"
"        \"\"\" Draw everything \"\"\"\n"
"        arcade.start_render()\n"
"        self.coin_list.draw()\n"
"        self.player_list.draw()\n"
"\n"
"        # Put the text on the screen.\n"
"        output = f\"Score: {self.score}\"\n"
"        arcade.draw_text(output, 10, 20, arcade.color.WHITE, 14)\n"
"\n"
"    def on_mouse_motion(self, x, y, dx, dy):\n"
"        \"\"\" Handle Mouse Motion \"\"\"\n"
"\n"
"        # Move the center of the player sprite to match the mouse x, y\n"
"        self.player_sprite.center_x = x\n"
"        self.player_sprite.center_y = y\n"
"\n"
"    def update(self, delta_time):\n"
"        \"\"\" Movement and game logic \"\"\"\n"
"\n"
"        # Call update on all sprites (The sprites don't do much in this\n"
"        # example though.)\n"
"        self.coin_list.update()\n"
"\n"
"        # Generate a list of all sprites that collided with the player.\n"
"        coins_hit_list = arcade.check_for_collision_with_list(self."
"player_sprite,\n"
"                                                              self."
"coin_list)\n"
"\n"
"        # Loop through each colliding sprite, remove it, and add to the "
"score.\n"
"        for coin in coins_hit_list:\n"
"            coin.kill()\n"
"            self.score += 1\n"
"\n"
"\n"
"def main():\n"
"    \"\"\" Main method \"\"\"\n"
"    window = MyGame()\n"
"    window.setup()\n"
"    arcade.run()\n"
"\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()\n"
msgstr ""
"\"\"\" Sprite Sample Program \"\"\"\n"
"\n"
"import random\n"
"import arcade\n"
"\n"
"# --- Constants ---\n"
"SPRITE_SCALING_PLAYER = 0.5\n"
"SPRITE_SCALING_COIN = 0.2\n"
"COIN_COUNT = 50\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"\n"
"class MyGame(arcade.Window):\n"
"    \"\"\" Our custom Window Class\"\"\"\n"
"\n"
"    def __init__(self):\n"
"        \"\"\" Initializer \"\"\"\n"
"        # Call the parent class initializer\n"
"        super().__init__(SCREEN_WIDTH, SCREEN_HEIGHT, \"Sprite Example\")\n"
"\n"
"        # Variables that will hold sprite lists\n"
"        self.player_list = None\n"
"        self.coin_list = None\n"
"\n"
"        # Set up the player info\n"
"        self.player_sprite = None\n"
"        self.score = 0\n"
"\n"
"        # Don't show the mouse cursor\n"
"        self.set_mouse_visible(False)\n"
"\n"
"        arcade.set_background_color(arcade.color.AMAZON)\n"
"\n"
"    def setup(self):\n"
"        \"\"\" Set up the game and initialize the variables. \"\"\"\n"
"\n"
"        # Sprite lists\n"
"        self.player_list = arcade.SpriteList()\n"
"        self.coin_list = arcade.SpriteList()\n"
"\n"
"        # Score\n"
"        self.score = 0\n"
"\n"
"        # Set up the player\n"
"        # Character image from kenney.nl\n"
"        self.player_sprite = arcade.Sprite(\"character.png\", "
"SPRITE_SCALING_PLAYER)\n"
"        self.player_sprite.center_x = 50\n"
"        self.player_sprite.center_y = 50\n"
"        self.player_list.append(self.player_sprite)\n"
"\n"
"        # Create the coins\n"
"        for i in range(COIN_COUNT):\n"
"\n"
"            # Create the coin instance\n"
"            # Coin image from kenney.nl\n"
"            coin = arcade.Sprite(\"coin_01.png\", SPRITE_SCALING_COIN)\n"
"\n"
"            # Position the coin\n"
"            coin.center_x = random.randrange(SCREEN_WIDTH)\n"
"            coin.center_y = random.randrange(SCREEN_HEIGHT)\n"
"\n"
"            # Add the coin to the lists\n"
"            self.coin_list.append(coin)\n"
"\n"
"    def on_draw(self):\n"
"        \"\"\" Draw everything \"\"\"\n"
"        arcade.start_render()\n"
"        self.coin_list.draw()\n"
"        self.player_list.draw()\n"
"\n"
"        # Put the text on the screen.\n"
"        output = f\"Score: {self.score}\"\n"
"        arcade.draw_text(output, 10, 20, arcade.color.WHITE, 14)\n"
"\n"
"    def on_mouse_motion(self, x, y, dx, dy):\n"
"        \"\"\" Handle Mouse Motion \"\"\"\n"
"\n"
"        # Move the center of the player sprite to match the mouse x, y\n"
"        self.player_sprite.center_x = x\n"
"        self.player_sprite.center_y = y\n"
"\n"
"    def update(self, delta_time):\n"
"        \"\"\" Movement and game logic \"\"\"\n"
"\n"
"        # Call update on all sprites (The sprites don't do much in this\n"
"        # example though.)\n"
"        self.coin_list.update()\n"
"\n"
"        # Generate a list of all sprites that collided with the player.\n"
"        coins_hit_list = arcade.check_for_collision_with_list(self."
"player_sprite,\n"
"                                                              self."
"coin_list)\n"
"\n"
"        # Loop through each colliding sprite, remove it, and add to the "
"score.\n"
"        for coin in coins_hit_list:\n"
"            coin.kill()\n"
"            self.score += 1\n"
"\n"
"\n"
"def main():\n"
"    \"\"\" Main method \"\"\"\n"
"    window = MyGame()\n"
"    window.setup()\n"
"    arcade.run()\n"
"\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()\n"
