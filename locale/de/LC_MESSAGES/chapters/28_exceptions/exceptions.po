# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Paul Vincent Craven
# This file is distributed under the same license as the Arcade package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
# derSuessmann <arcade-book-de@dersuessmann.de>, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: Arcade Fall 2018\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-07-09 19:32+0200\n"
"PO-Revision-Date: 2019-07-16 09:39+0200\n"
"Last-Translator: derSuessmann <arcade-book-de@dersuessmann.de>\n"
"Language-Team: German <arcade-book-de@dersuessmann.de>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"X-Generator: Gtranslator 3.32.1\n"

#: ../../source/chapters/28_exceptions/exceptions.rst:2
msgid "Exceptions"
msgstr "Ausnahmen"

#: ../../source/chapters/28_exceptions/exceptions.rst:8
msgid ""
"When something goes wrong with your program, do you want to keep the user "
"from seeing a red Python error message? Do you want to keep your program "
"from hanging? If so, then you need *exceptions*."
msgstr ""
"Möchtest du verhindern, dass dem Benutzer eine rote Python-Fehlermeldung "
"angezeigt wird, wenn ein Problem mit deinem Programm auftritt? Möchtest du "
"verhindern, dass dein Programm hängt? Wenn ja, dann brauchst du *Ausnahmen* "
"(englisch *exceptions*)."

#: ../../source/chapters/28_exceptions/exceptions.rst:12
msgid ""
"Exceptions are used to handle abnormal conditions that can occur during the "
"execution of code. Exceptions are often used with file and network "
"operations. This allows code to gracefully handle running out of disk space, "
"network errors, or permission errors."
msgstr ""
"Ausnahmen werden verwendet, um abnormale Bedingungen zu behandeln, die "
"während der Ausführung von Programmcode auftreten können. Ausnahmen werden "
"häufig bei Datei- und Netzwerkoperationen verwendet. Auf diese Weise kann "
"das Programm ordnungsgemäß mit Speicherplatzmangel, Netzwerkfehlern oder "
"Berechtigungsfehlern umgehen."

#: ../../source/chapters/28_exceptions/exceptions.rst:18
msgid "Vocabulary"
msgstr "Wortschatz"

#: ../../source/chapters/28_exceptions/exceptions.rst:20
msgid ""
"There are several terms and phrases used while working with exceptions. Here "
"are the most common:"
msgstr ""
"Beim Arbeiten mit Ausnahmen werden mehrere Begriffe und Phrasen verwendet. "
"Hier sind die häufigsten:"

#: ../../source/chapters/28_exceptions/exceptions.rst:23
msgid ""
"**Exception**: This term could mean one of two things. First, the condition "
"that results in abnormal program flow. Or it could be used to refer to an "
"object that represents the data condition. Each exception has an object that "
"holds information about it."
msgstr ""
"**Ausnahme**: Dieser Begriff kann eines von zwei Dingen bedeuten. Erstens "
"die Bedingung, die zu einem abnormalen Programmfluss führt. Oder er könnte "
"verwendet werden, um auf ein Objekt zu verweisen, das die Daten der "
"Ausnahmebedingung darstellt. Jede Ausnahme hat ein Objekt, das Informationen "
"darüber enthält."

#: ../../source/chapters/28_exceptions/exceptions.rst:27
msgid ""
"**Exception handling**: The process of handling an exception to normal "
"program flow."
msgstr ""
"**Ausnahmebehandlung**: Der Prozess der Behandlung einer Ausnahme vom "
"normalen Programmablauf."

#: ../../source/chapters/28_exceptions/exceptions.rst:29
msgid ""
"**Catch block or exception block**: Code that handles an abnormal condition "
"is said to \"catch\" the exception."
msgstr ""
"**Catch-Block oder Exception-Block**: Code, der einen abnormalen Zustand "
"behandelt, soll die Ausnahme \"abfangen\"."

#: ../../source/chapters/28_exceptions/exceptions.rst:31
msgid ""
"**Throw or raise**: When an abnormal condition to the program flow has been "
"detected, an instance of an exception object is created. It is then \"thrown"
"\" or \"raised\" to code that will catch it."
msgstr ""
"**Auslösen oder Werfen**: Wenn eine abnormale Bedingung für den "
"Programmablauf erkannt wurde, wird ein Exemplar eines Ausnahmeobjekts "
"erstellt. Es wird dann \"geworfen\" oder \"ausgelöst\" zum Code, der es "
"abfängt."

#: ../../source/chapters/28_exceptions/exceptions.rst:34
msgid ""
"**Unhandled exception or Uncaught exception**: An exception that is thrown, "
"but never caught. This usually results in an error and the program ending or "
"crashing."
msgstr ""
"**Unbehandelte Ausnahme oder nicht erfasste Ausnahme**: Eine Ausnahme, die "
"ausgelöst, aber nie abgefangen wird. Dies führt normalerweise zu einem "
"Fehler und zum Beenden oder Abstürzen des Programms."

#: ../../source/chapters/28_exceptions/exceptions.rst:37
msgid "**Try block**: A set of code that might have an exception thrown in it."
msgstr ""
"**Try Block**: Ein Codeblock, in dem möglicherweise eine Ausnahme ausgelöst "
"wird."

#: ../../source/chapters/28_exceptions/exceptions.rst:39
msgid ""
"Most programming languages use the terms \"throw\" and \"catch.\" "
"Unfortunately Python doesn't. Python uses \"raise\" and \"exception.\" We "
"introduce the throw/catch vocabulary here because they are the most "
"prevalent terms in the industry."
msgstr ""
"Die meisten Programmiersprachen verwenden die Begriffe \"throw\" und \"catch"
"\". Python tut dies leider nicht. Python verwendet \"raise\" und \"exception"
"\". Wir stellen hier das Wurf-/Fangvokabular vor, da es die in der Branche "
"am häufigsten verwendeten Begriffe sind."

#: ../../source/chapters/28_exceptions/exceptions.rst:45
msgid "Exception Handling"
msgstr "Ausnahmebehandlung"

#: ../../source/chapters/28_exceptions/exceptions.rst:47
msgid "The code for handling exceptions is simple. See the example below:"
msgstr ""
"Der Code für die Behandlung von Ausnahmen ist einfach. Siehe folgendes "
"Beispiel:"

#: ../../source/chapters/28_exceptions/exceptions.rst:49
msgid "Handling division by zero"
msgstr "Division durch Null abhandeln"

#: ../../source/chapters/28_exceptions/exceptions.rst:49
msgid ""
"# Divide by zero\n"
"try:\n"
"    x = 5 / 0\n"
"except:\n"
"    print(\"Error dividing by zero\")"
msgstr ""
"# Divide by zero\n"
"try:\n"
"    x = 5 / 0\n"
"except:\n"
"    print(\"Error dividing by zero\")"

#: ../../source/chapters/28_exceptions/exceptions.rst:59
msgid ""
"On line two is the ``try`` statement. Every indented line below it is part "
"of the \"try block.\" There may be no unindented code below the ``try`` "
"block that doesn't start with an ``except`` statement. The ``try`` statement "
"defines a section of code that the code will attempt to execute."
msgstr ""
"In Zeile zwei steht die Anweisung ``try``. Jede eingerückte Zeile darunter "
"ist Teil des \"try-Blocks\". Unter dem ``try`` -Block muss eingerückter Code "
"stehen. Erst der Teil, der mit einer ``except``-Anweisung beginnt, ist nicht "
"mehr eingerückt. Die ``try``-Anweisung definiert einen Codeabschnitt, den "
"der Code auszuführen versucht."

#: ../../source/chapters/28_exceptions/exceptions.rst:64
msgid ""
"If there is any exception that occurs during the processing of the code the "
"execution will immediately jump to the \"catch block.\" That block of code "
"is indented under the ``except`` statement on line 4. This code is "
"responsible for handling the error."
msgstr ""
"Wenn während der Verarbeitung des Codes eine Ausnahme auftritt, springt die "
"Ausführung sofort zum \"catch-Block\". Dieser Codeblock wird unter der "
"Anweisung ``except`` in Zeile 4 eingerückt. Dieser Code ist für die "
"Behandlung des Fehlers verantwortlich."

#: ../../source/chapters/28_exceptions/exceptions.rst:69
msgid ""
"A program may use exceptions to catch errors that occur during a conversion "
"from text to a number. For example:"
msgstr ""
"Ein Programm kann Ausnahmen verwenden, um Fehler abzufangen, die bei der "
"Konvertierung von Text in eine Zahl auftreten. Zum Beispiel:"

#: ../../source/chapters/28_exceptions/exceptions.rst:72
msgid "Handling number conversion errors"
msgstr "Umgang mit Fehlern bei der Konvertierung von Text in Zahlen"

#: ../../source/chapters/28_exceptions/exceptions.rst:72
msgid ""
"# Invalid number conversion\n"
"try:\n"
"    x = int(\"fred\")\n"
"except:\n"
"    print(\"Error converting fred to a number\")"
msgstr ""
"# Invalid number conversion\n"
"try:\n"
"    x = int(\"fred\")\n"
"except:\n"
"    print(\"Error converting fred to a number\")"

#: ../../source/chapters/28_exceptions/exceptions.rst:82
msgid ""
"An exception will be thrown on line 3 because \"fred\" can not be converted "
"to an integer. The code on line 5 will print out an error message."
msgstr ""
"In Zeile 3 wird eine Ausnahme ausgelöst, da \"fred\" nicht in eine Ganzzahl "
"konvertiert werden kann. Der Code in Zeile 5 gibt eine Fehlermeldung aus."

#: ../../source/chapters/28_exceptions/exceptions.rst:85
msgid ""
"Below is an expanded version on this example. It error-checks a user's input "
"to make sure an integer is entered. If the user doesn't enter an integer, "
"the program will keep asking for one. The code uses exception handling to "
"capture a possible conversion error that can occur on line 5. If the user "
"enters something other than an integer, an exception is thrown when the "
"conversion to a number occurs on line 5. The code on line 6 that sets "
"``number_entered`` to ``True`` will not be run if there is an exception on "
"line 5."
msgstr ""
"Unten findest du eine erweiterte Version dieses Beispiels. Es überprüft die "
"Eingaben eines Benutzers auf Fehler, um sicherzustellen, dass eine Ganzzahl "
"eingegeben wurde. Wenn der Benutzer keine Ganzzahl eingibt, fragt das "
"Programm weiterhin nach einer Ganzzahl. Der Code verwendet die "
"Ausnahmebehandlung, um einen möglichen Konvertierungsfehler zu erfassen, der "
"in Zeile 5 auftreten kann. Wenn der Benutzer etwas anderes als eine Ganzzahl "
"eingibt, wird eine Ausnahme ausgelöst, wenn die Konvertierung in eine Zahl "
"in Zeile 5 erfolgt. Der Code in Zeile 6, der ``number_entered`` auf ``True`` "
"setzt, wird nicht ausgeführt, wenn in Zeile 5 eine Ausnahme vorliegt."

#: ../../source/chapters/28_exceptions/exceptions.rst:93
msgid "Better handling of number conversion errors"
msgstr "Besserer Umgang mit Fehlern bei der Umwandlung von Zahlen"

#: ../../source/chapters/28_exceptions/exceptions.rst:93
msgid ""
"number_entered = False\n"
"while not number_entered:\n"
"    number_string = input(\"Enter an integer: \")\n"
"    try:\n"
"        n = int(number_string)\n"
"        number_entered = True\n"
"    except:\n"
"        print(\"Error, invalid integer\")"
msgstr ""
"number_entered = False\n"
"while not number_entered:\n"
"    number_string = input(\"Enter an integer: \")\n"
"    try:\n"
"        n = int(number_string)\n"
"        number_entered = True\n"
"    except:\n"
"        print(\"Error, invalid integer\")"

#: ../../source/chapters/28_exceptions/exceptions.rst:106
msgid ""
"Files are particularly prone to errors during operations with them. A disk "
"could fill up, a user could delete a file while it is being written, it "
"could be moved, or a USB drive could be pulled out mid-operation. These "
"types of errors may also be easily captured by using exception handling."
msgstr ""
"Dateioperationen sind besonders fehleranfällig: Eine Festplatte könnte voll "
"sein, ein Benutzer könnte eine Datei löschen, während sie geschrieben wird, "
"sie könnte verschoben werden oder ein USB-Laufwerk könnte während des "
"Betriebs herausgezogen werden. Diese Arten von Fehlern können ebenfalls "
"mithilfe der Ausnahmebehandlung leicht erfasst werden."

#: ../../source/chapters/28_exceptions/exceptions.rst:111
msgid "Checking for an error when opening a file"
msgstr "Überprüfung auf Fehler beim Öffnen einer Datei"

#: ../../source/chapters/28_exceptions/exceptions.rst:111
msgid ""
"# Error opening file\n"
"try:\n"
"    my_file = open(\"myfile.txt\")\n"
"except:\n"
"    print(\"Error opening file\")"
msgstr ""
"# Error opening file\n"
"try:\n"
"    my_file = open(\"myfile.txt\")\n"
"except:\n"
"    print(\"Error opening file\")"

#: ../../source/chapters/28_exceptions/exceptions.rst:121
msgid ""
"Multiple types of errors may be captured and processed differently. It can "
"be useful to provide a more exact error message to the user than a simple "
"\"an error has occurred.\""
msgstr ""
"Mehrere Fehlertypen können erkannt und unterschiedlich verarbeitet werden. "
"Es kann sinnvoll sein, dem Benutzer eine genauere Fehlermeldung zukommen zu "
"lassen, als lediglich \"ein Fehler ist aufgetreten\"."

#: ../../source/chapters/28_exceptions/exceptions.rst:125
msgid ""
"In the code below, different types of errors can occur from lines 3-6. By "
"placing ``IOError`` after ``except`` on line 7, only errors regarding Input "
"and Output (IO) will be handled by that code. Likewise line 9 only handles "
"errors around converting values, and line 11 covers division by zero errors. "
"The last exception handling occurs on line 13. Since line 13 does not "
"include a particular type of error, it will handle any error not covered by "
"the ``except`` blocks above. The \"catch-all\" ``except`` must always be "
"last."
msgstr ""
"Im folgenden Programmcode können verschiedene Arten von Fehlern in den "
"Zeilen 3-6 auftreten. Wenn du ``IOError`` nach ``except`` in Zeile 7 "
"schreibst, werden nur Fehler in Bezug auf Eingabe und Ausgabe (IO) von "
"diesem Code behandelt. Ebenso behandelt Zeile 9 nur Fehler bei der "
"Konvertierung von Werten und Zeile 11 die Division durch Null. Die letzte "
"Ausnahmebehandlung findet in Zeile 13 statt. Da Zeile 13 keinen bestimmten "
"Fehlertyp enthält, behandelt sie alle Fehler, die nicht durch die obigen "
"``except``-Blöcke abgedeckt sind. Das \"catch all\" ``except`` muss immer "
"das letzte sein."

#: ../../source/chapters/28_exceptions/exceptions.rst:133
msgid "Handling different types of errors"
msgstr "Umgang mit verschiedenen Arten von Fehlern"

#: ../../source/chapters/28_exceptions/exceptions.rst:133
msgid ""
"# Multiple errors\n"
"try:\n"
"    # Open the file\n"
"    filename = \"myfile.txt\"\n"
"    my_file = open(filename)\n"
"\n"
"    # Read from the file and strip any trailing line feeds\n"
"    my_line = my_file.readline()\n"
"    my_line = my_line.strip()\n"
"\n"
"    # Convert to a number\n"
"    my_int = int(my_line)\n"
"\n"
"    # Do a calculation\n"
"    my_calculated_value = 101 / my_int\n"
"\n"
"except FileNotFoundError:\n"
"    print(f\"Could not find the file '{filename}'.\")\n"
"except IOError:\n"
"    print(f\"Input/Output error when accessing the file '{filename}'.\")\n"
"except ValueError:\n"
"    print(\"Could not convert data to an integer.\")\n"
"except ZeroDivisionError:\n"
"    print(\"Division by zero error.\")\n"
"except:\n"
"    print(\"Unexpected error.\")"
msgstr ""
"# Multiple errors\n"
"try:\n"
"    # Open the file\n"
"    filename = \"myfile.txt\"\n"
"    my_file = open(filename)\n"
"\n"
"    # Read from the file and strip any trailing line feeds\n"
"    my_line = my_file.readline()\n"
"    my_line = my_line.strip()\n"
"\n"
"    # Convert to a number\n"
"    my_int = int(my_line)\n"
"\n"
"    # Do a calculation\n"
"    my_calculated_value = 101 / my_int\n"
"\n"
"except FileNotFoundError:\n"
"    print(f\"Could not find the file '{filename}'.\")\n"
"except IOError:\n"
"    print(f\"Input/Output error when accessing the file '{filename}'.\")\n"
"except ValueError:\n"
"    print(\"Could not convert data to an integer.\")\n"
"except ZeroDivisionError:\n"
"    print(\"Division by zero error.\")\n"
"except:\n"
"    print(\"Unexpected error.\")"

#: ../../source/chapters/28_exceptions/exceptions.rst:164
msgid "A list of built-in exceptions is available from this web address:"
msgstr ""
"Eine Liste der in Python integrierten Ausnahmen finden Sie unter folgender "
"Adresse:"

#: ../../source/chapters/28_exceptions/exceptions.rst:166
msgid "http://docs.python.org/library/exceptions.html"
msgstr "http://docs.python.org/library/exceptions.html"

#: ../../source/chapters/28_exceptions/exceptions.rst:169
msgid "Example: Saving High Score"
msgstr "Beispiel: Highscore speichern"

#: ../../source/chapters/28_exceptions/exceptions.rst:171
msgid ""
"This shows how to save a high score between games. The score is stored in a "
"file called ``high_score.txt``."
msgstr ""
"Das folgende Programm zeigt, wie du zwischen den Spielen einen Highscore "
"speichern kannst. Der Spielstand wird in einer Datei mit dem Namen "
"``high_score.txt`` gespeichert."

#: ../../source/chapters/28_exceptions/exceptions.rst:173
msgid "high_score.py"
msgstr "high_score.py"

#: ../../source/chapters/28_exceptions/exceptions.rst:173
msgid ""
"\"\"\"\n"
"Show how to use exceptions to save a high score for a game.\n"
"\n"
"Sample Python/Pygame Programs\n"
"Simpson College Computer Science\n"
"http://simpson.edu/computer-science/\n"
"\"\"\"\n"
"\n"
"\n"
"def get_high_score():\n"
"    # Default high score\n"
"    high_score = 0\n"
"\n"
"    # Try to read the high score from a file\n"
"    try:\n"
"        high_score_file = open(\"high_score.txt\", \"r\")\n"
"        high_score = int(high_score_file.read())\n"
"        high_score_file.close()\n"
"        print(\"The high score is\", high_score)\n"
"    except IOError:\n"
"        # Error reading file, no high score\n"
"        print(\"There is no high score yet.\")\n"
"    except ValueError:\n"
"        # There's a file there, but we don't understand the number.\n"
"        print(\"I'm confused. Starting with no high score.\")\n"
"\n"
"    return high_score\n"
"\n"
"\n"
"def save_high_score(new_high_score):\n"
"    try:\n"
"        # Write the file to disk\n"
"        high_score_file = open(\"high_score.txt\", \"w\")\n"
"        high_score_file.write(str(new_high_score))\n"
"        high_score_file.close()\n"
"    except IOError:\n"
"        # Hm, can't write it.\n"
"        print(\"Unable to save the high score.\")\n"
"\n"
"\n"
"def main():\n"
"    \"\"\" Main program is here. \"\"\"\n"
"    # Get the high score\n"
"    high_score = get_high_score()\n"
"\n"
"    # Get the score from the current game\n"
"    current_score = 0\n"
"    try:\n"
"        # Ask the user for his/her score\n"
"        current_score = int(input(\"What is your score? \"))\n"
"    except ValueError:\n"
"        # Error, can't turn what they typed into a number\n"
"        print(\"I don't understand what you typed.\")\n"
"\n"
"    # See if we have a new high score\n"
"    if current_score > high_score:\n"
"        # We do! Save to disk\n"
"        print(\"Yea! New high score!\")\n"
"        save_high_score(current_score)\n"
"    else:\n"
"        print(\"Better luck next time.\")\n"
"\n"
"# Call the main function, start up the game\n"
"if __name__ == \"__main__\":\n"
"    main()"
msgstr ""
"\"\"\"\n"
"Show how to use exceptions to save a high score for a game.\n"
"\n"
"Sample Python/Pygame Programs\n"
"Simpson College Computer Science\n"
"http://simpson.edu/computer-science/\n"
"\"\"\"\n"
"\n"
"\n"
"def get_high_score():\n"
"    # Default high score\n"
"    high_score = 0\n"
"\n"
"    # Try to read the high score from a file\n"
"    try:\n"
"        high_score_file = open(\"high_score.txt\", \"r\")\n"
"        high_score = int(high_score_file.read())\n"
"        high_score_file.close()\n"
"        print(\"The high score is\", high_score)\n"
"    except IOError:\n"
"        # Error reading file, no high score\n"
"        print(\"There is no high score yet.\")\n"
"    except ValueError:\n"
"        # There's a file there, but we don't understand the number.\n"
"        print(\"I'm confused. Starting with no high score.\")\n"
"\n"
"    return high_score\n"
"\n"
"\n"
"def save_high_score(new_high_score):\n"
"    try:\n"
"        # Write the file to disk\n"
"        high_score_file = open(\"high_score.txt\", \"w\")\n"
"        high_score_file.write(str(new_high_score))\n"
"        high_score_file.close()\n"
"    except IOError:\n"
"        # Hm, can't write it.\n"
"        print(\"Unable to save the high score.\")\n"
"\n"
"\n"
"def main():\n"
"    \"\"\" Main program is here. \"\"\"\n"
"    # Get the high score\n"
"    high_score = get_high_score()\n"
"\n"
"    # Get the score from the current game\n"
"    current_score = 0\n"
"    try:\n"
"        # Ask the user for his/her score\n"
"        current_score = int(input(\"What is your score? \"))\n"
"    except ValueError:\n"
"        # Error, can't turn what they typed into a number\n"
"        print(\"I don't understand what you typed.\")\n"
"\n"
"    # See if we have a new high score\n"
"    if current_score > high_score:\n"
"        # We do! Save to disk\n"
"        print(\"Yea! New high score!\")\n"
"        save_high_score(current_score)\n"
"    else:\n"
"        print(\"Better luck next time.\")\n"
"\n"
"# Call the main function, start up the game\n"
"if __name__ == \"__main__\":\n"
"    main()"

#: ../../source/chapters/28_exceptions/exceptions.rst:244
msgid "Exception Objects"
msgstr "Ausnahmeobjekte"

#: ../../source/chapters/28_exceptions/exceptions.rst:246
msgid ""
"More information about an error can be pulled from the *exception object*. "
"This object can be retrieved while catching an error using the ``as`` "
"keyword. For example:"
msgstr ""
"Weitere Informationen zu einem Fehler können aus dem *Ausnahmenobjekt* "
"abgerufen werden. Dieses Objekt bekommt man, wenn ein Fehler mit dem "
"Schlüsselwort ``as`` abgefangen wird. Zum Beispiel:"

#: ../../source/chapters/28_exceptions/exceptions.rst:250
#: ../../source/chapters/28_exceptions/exceptions.rst:269
msgid "Creating an exception"
msgstr "Ausnahme erstellen"

#: ../../source/chapters/28_exceptions/exceptions.rst:250
msgid ""
"try:\n"
"    x = 5 / 0\n"
"except ZeroDivisionError as e:\n"
"    print(e)"
msgstr ""
"try:\n"
"    x = 5 / 0\n"
"except ZeroDivisionError as e:\n"
"    print(e)"

#: ../../source/chapters/28_exceptions/exceptions.rst:259
msgid ""
"The ``e`` variable points to more information about the exception that can "
"be printed out. More can be done with exceptions objects, but unfortunately "
"that is beyond the scope of this chapter. Check the Python documentation on-"
"line for more information about the exception object."
msgstr ""
"Die Variable ``e`` zeigt auf die weitere Information zu der Ausnahme, die "
"ausgegeben werden kann. Mit Ausnahmeobjekten kann noch mehr getan werden, "
"was jedoch den Rahmen dieses Kapitels sprengt. Weitere Informationen zum "
"Ausnahmeobjekt findest du in der Python-Dokumentation online."

#: ../../source/chapters/28_exceptions/exceptions.rst:265
msgid "Exception Generating"
msgstr "Ausnahmen generieren"

#: ../../source/chapters/28_exceptions/exceptions.rst:267
msgid "Exceptions may be generated with the ``raise`` command. For example:"
msgstr ""
"Ausnahmen können mit dem Befehl ``raise`` erzeugt werden. Zum Beispiel:"

#: ../../source/chapters/28_exceptions/exceptions.rst:269
msgid ""
"# Generating exceptions\n"
"def get_input():\n"
"    user_input = input(\"Enter something: \")\n"
"    if len(user_input) == 0:\n"
"        raise IOError(\"User entered nothing\")\n"
"\n"
"get_input()"
msgstr ""
"# Generating exceptions\n"
"def get_input():\n"
"    user_input = input(\"Enter something: \")\n"
"    if len(user_input) == 0:\n"
"        raise IOError(\"User entered nothing\")\n"
"\n"
"get_input()"

#: ../../source/chapters/28_exceptions/exceptions.rst:281
msgid ""
"Try taking the code above, and add exception handling for the ``IOError`` "
"raised."
msgstr ""
"Nimm den obigen Code und füge eine Ausnahmebehandlung für den ausgelösten "
"``IOError`` hinzu."

#: ../../source/chapters/28_exceptions/exceptions.rst:283
msgid ""
"It is also possible to create custom exceptions, but that is also beyond the "
"scope of this book. Curious readers may learn more by going to:"
msgstr ""
"Es ist auch möglich, benutzerdefinierte Ausnahmen zu erstellen, dies würde "
"jedoch den Rahmen dieses Buches sprengen. Neugierige Leser erfahren mehr "
"unter:"

#: ../../source/chapters/28_exceptions/exceptions.rst:286
msgid "http://docs.python.org/tutorial/errors.html#raising-exceptions"
msgstr "http://docs.python.org/tutorial/errors.html#raising-exceptions"

#: ../../source/chapters/28_exceptions/exceptions.rst:289
msgid "Proper Exception Use"
msgstr "Korrekte Verwendung von Ausnahmen"

#: ../../source/chapters/28_exceptions/exceptions.rst:290
msgid ""
"Exceptions should not be used when ``if`` statements can just as easily "
"handle the condition. Normal code should not raise exceptions when running "
"the \"happy path\" scenario. Well-constructed try/catch code is easy to "
"follow but code involving many exceptions and jumps in code to different "
"handlers can be a nightmare to debug. (Once I was assigned the task of "
"debugging code that read an XML document. It generated dozens of exceptions "
"for each line of the file it read. It was incredibly slow and error-prone. "
"That code should have never generated a single exception in the normal "
"course of reading a file.)"
msgstr ""
"Ausnahmen sollten nicht verwendet werden, wenn ``if``-Anweisungen die "
"Bedingung genauso gut verarbeiten können. Normaler Code sollte beim "
"Ausführen des Szenarios \"Happy Path\" keine Ausnahmen auslösen. Gut "
"konstruierter Try/Catch-Code ist einfach nachzuverfolgen, aber Code mit "
"vielen Ausnahmen und Code-Sprüngen zu verschiedenen Handlern kann ein "
"Albtraum für das Debuggen sein. (Mir wurde einmal die Aufgabe zugewiesen, "
"den Code zum Lesen eines XML-Dokuments zu debuggen. Es wurden Dutzende von "
"Ausnahmen für jede Zeile der gelesenen Datei generiert. Es war unglaublich "
"langsam und fehleranfällig. Dieser Code hätte niemals eine einzige Ausnahme "
"beim normalen Lesen einer Datei generieren dürfen.)"
