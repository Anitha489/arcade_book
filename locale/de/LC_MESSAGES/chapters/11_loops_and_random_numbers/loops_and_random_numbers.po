# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Paul Vincent Craven
# This file is distributed under the same license as the Arcade package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
# derSuessmann <arcade-book-de@dersuessmann.de>, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: Arcade Fall 2018\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-07-11 13:34+0200\n"
"PO-Revision-Date: 2019-07-12 11:58+0200\n"
"Last-Translator: derSuessmann <arcade-book-de@dersuessmann.de>\n"
"Language: de\n"
"Language-Team: German <arcade-book-de@dersuessmann.de>\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"
"X-Generator: Gtranslator 3.32.1\n"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:4
msgid "Guessing Games with Random Numbers and Loops"
msgstr "Ratespiele mit Zufallszahlen und Schleifen"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:10
msgid ""
"Our next step is how to loop a section of code. Most games \"loop.\" They "
"repeat the same code over and over. For example the number guessing game "
"below loops for each guess that the user makes:"
msgstr ""
"Unser nächster Schritt ist, einen Programmabschnitt zu wiederholen. Die "
"meisten Spiele \"wiederholen\". Sie führen den gleichen Programmcode immer "
"und immer wieder aus. Im Zahlenratespiel wird zum Beispiel für jeden "
"Rateversuch der Programmcode wiederholt."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:14
msgid ""
"Hi! I'm thinking of a random number between 1 and 100.\n"
"--- Attempt 1\n"
"Guess what number I am thinking of: 50\n"
"Too high.\n"
"--- Attempt 2\n"
"Guess what number I am thinking of: 25\n"
"Too high.\n"
"--- Attempt 3\n"
"Guess what number I am thinking of: 17\n"
"Too high.\n"
"--- Attempt 4\n"
"Guess what number I am thinking of: 9\n"
"Too low.\n"
"--- Attempt 5\n"
"Guess what number I am thinking of: 14\n"
"Too high.\n"
"--- Attempt 6\n"
"Guess what number I am thinking of: 12\n"
"Too high.\n"
"--- Attempt 7\n"
"Guess what number I am thinking of: 10\n"
"Too low.\n"
"Aw, you ran out of tries. The number was 11."
msgstr ""
"Hi! I'm thinking of a random number between 1 and 100.\n"
"--- Attempt 1\n"
"Guess what number I am thinking of: 50\n"
"Too high.\n"
"--- Attempt 2\n"
"Guess what number I am thinking of: 25\n"
"Too high.\n"
"--- Attempt 3\n"
"Guess what number I am thinking of: 17\n"
"Too high.\n"
"--- Attempt 4\n"
"Guess what number I am thinking of: 9\n"
"Too low.\n"
"--- Attempt 5\n"
"Guess what number I am thinking of: 14\n"
"Too high.\n"
"--- Attempt 6\n"
"Guess what number I am thinking of: 12\n"
"Too high.\n"
"--- Attempt 7\n"
"Guess what number I am thinking of: 10\n"
"Too low.\n"
"Aw, you ran out of tries. The number was 11."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:40
msgid "(Code for this program is below: :ref:`number-guessing-game-code`)"
msgstr ""
"(Der Code für dieses Programm steht unten: :ref:`number-guessing-game-code`)"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:42
msgid ""
"Wait, what does this looping have to do with graphics and video games? A "
"lot. Each *frame* the game displays is one time through a loop. You may be "
"familiar with the frames-per-second (FPS) statistic that games show. The FPS "
"represents the number of times the computer updates the screen each second. "
"The higher the rate, the smoother the game. (Although an FPS rate past 60 is "
"faster than most screens can update, so there isn't much point to push it "
"past that.) The figure below shows the game Eve Online and a graph showing "
"how many frames per second the computer is able to display."
msgstr ""
"Warte, was hat diese Wiederholerei mit Grafiken und Computerspielen zu tun? "
"Eine Menge. Jeder *Frame* den das Spiel anzeigt ist ein Schleifendurchlauf. "
"Du kennst vielleicht den Wert Frames pro Sekunde (FPS), die Spiele anzeigen. "
"Der FPS-Wert gibt an, wie oft der Rechner den Bildschirm jede Sekunde "
"aktualisiert. Je höher der Wert ist, desto flüssiger ist das Spiel. (Obwohl "
"ein FPS-Wert größer als 60 schneller ist, als die meisten Bildschirme "
"aktualisieren können, gibt es keinen Grund nicht über diesen Punkt hinaus zu "
"gehen.) Die Abbildung unten zeigt das Spiel Eve Online und einen Graph, der "
"anzeigt, wie oft der Rechner den Frame aktualisieren kann."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:53
msgid ".. image:: chapters/11_loops_and_random_numbers/fps.png"
msgstr ".. image:: chapters/11_loops_and_random_numbers/fps.png"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:53
msgid "FPS in video games"
msgstr "FPS bei Videospielen"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:55
msgid ""
"The loop in these games works like the flowchart in the figure below. "
"Despite the complexities of modern games, the inside of this loop is similar "
"to a calculator program. Get user input. Perform calculations. Output the "
"result. In a video game, we try to repeat this up to 60 times per second."
msgstr ""
"Die Schleife in diesen Spielen funktioniert wie der Programmablaufplan in "
"der Abbildung unten. Trotz der Komplexität moderner Spiele, ist die Schleife "
"ähnlich zu einem Taschenrechnerprogramm. Hole die Eingabe des Benutzers. "
"Führe Berechnungen aus. Gib das Ergebnis aus. In einem Videospiel versuchen "
"wir das bis zu 60 mal pro Sekunde zu wiederholen."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:63
msgid ".. image:: chapters/11_loops_and_random_numbers/game_loop.svg"
msgstr ".. image:: chapters/11_loops_and_random_numbers/game_loop.svg"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:63
msgid "Game loop"
msgstr "Spielschleife"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:65
msgid ""
"There can even be loops inside of other loops. A real \"loop the loop.\" "
"Take a look at the \"Draw Everything\" box in Figure 4.2. This set of code "
"loops through and draws each object in the game. That loop is inside of the "
"larger loop that draws each frame of the game, which looks like the figure "
"below."
msgstr ""
"Schleifen können sogar innerhalb von anderen Schleifen sein. Schau dir den "
"Kasten \"Draw Everything\" in der Abbildung oben an. Dieser Codeabschnitt "
"wird wiederholt und zeichnet jedes Objekt des Spiels. Diese Schleife ist in "
"einer größeren Schleife, die jeden Frame des Spiels zeichnet. Dies sieht "
"aus, wie in der Abbildung unten dargestellt."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:72
msgid ".. image:: chapters/11_loops_and_random_numbers/draw_everything.svg"
msgstr ".. image:: chapters/11_loops_and_random_numbers/draw_everything.svg"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:72
msgid "Draw everything loop"
msgstr "Zeichne-Alles-Schleife"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:74
msgid ""
"There are two major types of loops in Python, ``for`` loops and ``while`` "
"loops. If you want to repeat a certain number of times, use a ``for`` loop. "
"If you want to repeat until something happens (like the user hits the quit "
"button) then use a ``while`` loop."
msgstr ""
"In Python gibt es zwei Hauptarten von Schleifen, ``for``-Schleifen und "
"``while``-Schleifen. Wenn du etwas eine bestimmte Anzahl mal ausführen "
"willst, nimm eine ``for``-Schleife. Wenn du etwas wiederholen willst, bis "
"etwas passiert (der Benutzer zum Beispiel eine Taste drückt), dann nimm eine "
"``while``-Schleife."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:79
msgid ""
"For example, a ``for`` loop can be used to print all student records since "
"the computer knows how many students there are. A ``while`` loop would need "
"to be used to check for when a user hits the mouse button since the computer "
"has no idea how long it will have to wait."
msgstr ""
"Man kann zum Beispiel eine ``for``-Schleife verwenden, um eine Liste aller "
"Studierenden auszugeben, da der Rechner weiß, wie viel Studierende es gibt. "
"Eine ``while``-Schleife müsste man nehmen, um zu prüfen, wenn der Benutzer "
"den Mausknopf drückt, da der Rechner keine Idee hat wie lange er warten muss."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:85
msgid "For Loops"
msgstr "``for``-Schleifen"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:87
msgid ""
"The ``for`` loop example below runs the print statement five times. It could "
"just as easily run 100 or 1,000,000 times just by changing the 5 to the "
"desired number of times to loop. Note the similarities of how the ``for`` "
"loop is written to the if statement. Both end in a colon, and both use "
"indentation to specify which lines are affected by the statement."
msgstr ""
"Die ``for``-Schleife im Beispiel unten führt die ``print``-Funktion fünfmal "
"aus. Sie könnte genau so leicht auch 100 oder eine Million mal ausgeführt "
"werden, einfach durch Ändern der 5 in die gewünschte Anzahl von "
"Wiederholungen. Beachte die Ähnlichkeit der Schreibweise der ``for``-"
"Schleife zum ``if``. Beide enden mit einem Doppelpunkt und beide verwenden "
"die Einrückung, um festzulegen welche Zeilen zur Anweisung gehören."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:91
msgid "Loop to print five times"
msgstr "Schleife um fünfmal auszugeben"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:91
msgid ""
"for i in range(5):\n"
"    print(\"I will not chew gum in class.\")"
msgstr ""
"for i in range(5):\n"
"    print(\"I will not chew gum in class.\")"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:98
#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:127
#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:150
#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:210
#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:246
msgid "Output:"
msgstr "Ausgabe:"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:100
msgid ""
"I will not chew gum in class.\n"
"I will not chew gum in class.\n"
"I will not chew gum in class.\n"
"I will not chew gum in class.\n"
"I will not chew gum in class."
msgstr ""
"I will not chew gum in class.\n"
"I will not chew gum in class.\n"
"I will not chew gum in class.\n"
"I will not chew gum in class.\n"
"I will not chew gum in class."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:108
msgid ""
"The ``i`` on line 1 is a variable that keeps track of how many times the "
"program has looped. It is a new variable and can be named any legal variable "
"name. Programmers often use ``i`` as for the variable name, because the "
"``i`` is short for *increment*. This variable helps track when the loop "
"should end."
msgstr ""
"Das ``i`` in Zeile 1 ist eine Variable, die mitzählt wie oft das Programm "
"wiederholt hat. Es ist eine neue Variable und sie kann jeden erlaubten "
"Variablennamen bekommen. Programmierer nehmen oft den Namen ``i`` als "
"Variablennamen, das ``i`` eine Abkürzung für *Inkrement* ist. Diese Variable "
"hilft zu verfolgen, wann die Schleife enden soll. "

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:113
msgid ""
"The ``range`` function controls how many times the code in the loop is run. "
"In this case, five times."
msgstr ""
"Die ``range``-Funktion beeinflusst wie oft der Code in der Schleife "
"ausgeführt wird. In diesem Fall ist es fünfmal."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:116
msgid ""
"The next example code will print \"Please,\" five times and \"Can I go to "
"the mall?\" only once. \"Can I go to the mall?\" is not indented so it is "
"not part of the for loop and will not print until the for loop completes."
msgstr ""
"Das nächste Beispielprogramm wird fünfmal \"Please,\" ausgeben und nur "
"einmal \"Can I go to the mall?\". \"Can I go to the mall?\" ist nicht "
"eingerückt und ist deshalb kein Teil der Schleife und wird erst nach dem "
"Ende der schleife ausgeführt."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:120
msgid ""
"for i in range(5):\n"
"    print(\"Please,\")\n"
"print(\"Can I go to the mall?\")"
msgstr ""
"for i in range(5):\n"
"    print(\"Please,\")\n"
"print(\"Can I go to the mall?\")"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:129
msgid ""
"Please,\n"
"Please,\n"
"Please,\n"
"Please,\n"
"Please,\n"
"Can I go to the mall?"
msgstr ""
"Please,\n"
"Please,\n"
"Please,\n"
"Please,\n"
"Please,\n"
"Can I go to the mall?"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:138
msgid ""
"This next code example takes the prior example and indents line 3. This "
"change will cause the program to print \"Please,\" and \"Can I go to the "
"mall?\" five times. Since the statement has been indented \"Can I go to the "
"mall?\" is now part of the for loop and will repeat five times just like the "
"word \"Please,\"."
msgstr ""
"Das nächste Codebeispiel nimmt das vorherige Beispiel und rückt Zeile 3 ein. "
"Diese Änderung sorgt dafür, dass das Programm \"Please,\" und \"Can I go to "
"the mall?\" fünfmal ausgibt. Da die Anweisung eingerückt wurde, gehört \"Can "
"I go to the mall?\" zur Schleife und wird genau wie \"Please,\" fünfmal "
"ausgegeben."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:143
msgid ""
"for i in range(5):\n"
"    print(\"Please,\")\n"
"    print(\"Can I go to the mall?\")"
msgstr ""
"for i in range(5):\n"
"    print(\"Please,\")\n"
"    print(\"Can I go to the mall?\")"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:152
msgid ""
"Please,\n"
"Can I go to the mall?\n"
"Please,\n"
"Can I go to the mall?\n"
"Please,\n"
"Can I go to the mall?\n"
"Please,\n"
"Can I go to the mall?\n"
"Please,\n"
"Can I go to the mall?"
msgstr ""
"Please,\n"
"Can I go to the mall?\n"
"Please,\n"
"Can I go to the mall?\n"
"Please,\n"
"Can I go to the mall?\n"
"Please,\n"
"Can I go to the mall?\n"
"Please,\n"
"Can I go to the mall?"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:165
msgid ""
"You aren't stuck using a specific number with the ``range`` function. This "
"example asks the user how many times to print using the ``input`` function "
"we talked about back in :ref:`input-function`."
msgstr ""
"Du kannst nicht nur vorgegebene Zahlen in der ``range``-Funktion verwenden. "
"Dieses Beispiel fragt den Benutzer wie oft es ausgeben soll, indem es die "
"``input``-Funktion, die wir im Abschnitt :ref:`input-function` kennen "
"gelernt haben, verwendet."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:169
msgid "Loop according to the user input"
msgstr "Wiederholung entsprechend Benutzereingabe"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:169
msgid ""
"# Ask the user how many times to print\n"
"repetitions = int(input(\"How many times should I repeat? \"))\n"
"\n"
"# Loop that many times\n"
"for i in range(repetitions):\n"
"    print(\"I will not chew gum in class.\")"
msgstr ""
"# Ask the user how many times to print\n"
"repetitions = int(input(\"How many times should I repeat? \"))\n"
"\n"
"# Loop that many times\n"
"for i in range(repetitions):\n"
"    print(\"I will not chew gum in class.\")"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:180
msgid "Or you could write a function, and take in the value by a parameter:"
msgstr ""
"Oder du könntest eine Funktion schreiben, die einen Wert als Parameter "
"übernimmt:"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:182
msgid "Loop according to a function parameter"
msgstr "Wiederholung entsprechend einem Funktionsparameter"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:182
msgid ""
"def print_about_gum(repetitions):\n"
"\n"
"    # Loop that many times\n"
"    for i in range(repetitions):\n"
"        print(\"I will not chew gum in class.\")\n"
"\n"
"\n"
"def main():\n"
"    print_about_gum(10)\n"
"\n"
"\n"
"main()"
msgstr ""
"def print_about_gum(repetitions):\n"
"\n"
"    # Loop that many times\n"
"    for i in range(repetitions):\n"
"        print(\"I will not chew gum in class.\")\n"
"\n"
"\n"
"def main():\n"
"    print_about_gum(10)\n"
"\n"
"\n"
"main()"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:199
msgid ""
"The code below will print the numbers 0 to 9. Notice that the loop starts at "
"0 and does not include the number 10. It is natural to assume that "
"``range(10)`` would include 10, but it stops just short of it."
msgstr ""
"Der Code unten wird die Zahlen 0 bis 9 ausgeben. Beachte, dass die "
"Wiederholung bei 0 anfängt und die Zahl 10 nicht enthält. Natürlicherweise "
"würden wir annehmen, dass ``range(10)`` die 10 beinhaltet, aber sie hört "
"kurz vor der 10 auf."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:203
msgid "Print the numbers 0 to 9"
msgstr "Gib die Zahlen 0 bis 9 aus"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:203
#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:529
msgid ""
"for i in range(10):\n"
"    print(i)"
msgstr ""
"for i in range(10):\n"
"    print(i)"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:212
msgid ""
"0\n"
"1\n"
"2\n"
"3\n"
"4\n"
"5\n"
"6\n"
"7\n"
"8\n"
"9"
msgstr ""
"0\n"
"1\n"
"2\n"
"3\n"
"4\n"
"5\n"
"6\n"
"7\n"
"8\n"
"9"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:225
msgid ""
"A program does not need to name the variable ``i``, it could be named "
"something else. For example a programmer might use ``line_number`` if she "
"was processing a text file."
msgstr ""
"Ein Programm muss die Variable nicht ``i`` nennen. Es könnte sie auch sonst "
"wie benennen. Zum Beispiel könnte eine Programmiererin ``line_number`` "
"verwenden, wenn sie eine Textdatei bearbeitet."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:229
msgid ""
"If a programmer wants to go from 1 to 10 instead of 0 to 9, there are a "
"couple ways to do it. The first way is to send the ``range`` function two "
"numbers instead of one. The first number is the starting value, the second "
"is just beyond the ending value."
msgstr ""
"Wenn der Programmierer aber Zahlen von 1 bis 10 haben möchte, gibt es "
"mehrere Wege das zu erreichen. Der erste Weg ist, der ``range``-Funktion "
"zwei Zahlen mitzugeben. Die erste Zahl ist der Startwert. Die zweite Zahl "
"ist die Zahl, die auf den Endwert folgt."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:234
msgid ""
"It does take some practice to get used to the idea that the for loop will "
"include the first number, but not the second number listed. The example "
"below specifies a range of (1, 11), and the numbers 1 to 10 are printed. The "
"starting number 1 is included, but not the ending number of 11."
msgstr ""
"Mit etwas Übung gewöhnt man sich schnell an die Tatsache, dass die "
"Wiederholung die erste Zahl einschließt, aber nicht die zweite Zahl. Das "
"Beispiel unten gibt als Bereich (1,11) an und die Zahlen 1 bis 10 werden "
"ausgegeben. Die Startzahl 1 gehört dazu, aber die Endzahl 11 nicht."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:239
msgid "Print the numbers 1 to 10, version 1"
msgstr "Gib die Zahlen 1 bis 10 aus, Version 1"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:239
msgid ""
"for i in range(1, 11):\n"
"    print(i)"
msgstr ""
"for i in range(1, 11):\n"
"    print(i)"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:248
msgid ""
"1\n"
"2\n"
"3\n"
"4\n"
"5\n"
"6\n"
"7\n"
"8\n"
"9\n"
"10"
msgstr ""
"1\n"
"2\n"
"3\n"
"4\n"
"5\n"
"6\n"
"7\n"
"8\n"
"9\n"
"10"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:261
msgid ""
"Another way to print the numbers 1 to 10 is to still use ``range(10)`` and "
"have the variable i go from 0 to 9. But just before printing out the "
"variable the programmer adds one to it. This also works to print the numbers "
"1 to 10. Either method works just fine."
msgstr ""
"Der andere Weg die Zahlen 1 bis 10 auszugeben ist weiterhin ``range(10)`` zu "
"verwenden und die Variable ``i`` von 0 bis 9 laufen zu lassen, aber vor der "
"Ausgabe 1 dazu zu addieren. Das führt ebenfalls dazu, dass die Zahlen 1 bis "
"10 ausgegeben werden. Beide Methoden funktionieren gut."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:266
msgid "Print the numbers 1 to 10, version 2"
msgstr "Gib die Zahlen 1 bis 10 aus, Version 2"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:266
msgid ""
"# Print the numbers 1 to 10.\n"
"for i in range(10):\n"
"    print(i + 1)"
msgstr ""
"# Print the numbers 1 to 10.\n"
"for i in range(10):\n"
"    print(i + 1)"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:275
msgid "Counting By Numbers Other Than One"
msgstr "Andere Schrittweiten als eins"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:277
msgid ""
"If the program needs to count by 2's or use some other increment, that is "
"easy. Just like before there are two ways to do it. The easiest is to supply "
"a third number to the ``range`` function that tells it to count by 2's. The "
"second way to do it is to go ahead and count by 1's, but multiply the "
"variable by 2. The code example below shows both methods."
msgstr ""
"Wenn das Programm in Zweierschritten oder einem anderen Inkrement zählen "
"soll, ist das einfach. Genau wie oben, gibt es zwei Wege. Am einfachsten ist "
"es der ``range``-Funktion eine dritte Zahl mitzugeben, die ihr mitteilt in "
"Zweierschritten zu zählen. Der zweite Weg ist weiterhin in Einerschritten zu "
"zählen und den Wert der Variablen zu verdoppeln. Der Programmcode unten "
"zeigt beide Wege."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:283
msgid "Two ways to print the even numbers 2 to 10"
msgstr "Zwei Wege, die geraden Zahlen von 2 bis 10 auszugeben"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:283
msgid ""
"# Two ways to print the even numbers 2 to 10\n"
"for i in range(2,12,2):\n"
"    print(i)\n"
"\n"
"for i in range(5):\n"
"    print((i + 1) * 2)"
msgstr ""
"# Two ways to print the even numbers 2 to 10\n"
"for i in range(2,12,2):\n"
"    print(i)\n"
"\n"
"for i in range(5):\n"
"    print((i + 1) * 2)"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:294
#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:321
msgid "Output::"
msgstr "Ausgabe:"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:296
msgid ""
"2\n"
"4\n"
"6\n"
"8\n"
"10\n"
"2\n"
"4\n"
"6\n"
"8\n"
"10"
msgstr ""
"2\n"
"4\n"
"6\n"
"8\n"
"10\n"
"2\n"
"4\n"
"6\n"
"8\n"
"10"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:307
msgid ""
"It is also possible to count backwards down towards zero by giving the "
"``range`` function a negative step. In the example below, start at 10, go "
"down to but not including 0, and do it by -1 increments. The hardest part of "
"creating these loops is to accidentally switch the start and end numbers. "
"The program starts at the larger value, so it goes first. Normal for loops "
"that count up start with the smallest value listed first in the ``range`` "
"function."
msgstr ""
"Es ist ebenfalls möglich rückwärts in Richtung 0 zu zählen, indem man der "
"``range``-Funktion eine negative Schrittweite mitgibt. Im Beispiel unten "
"beginnen wir bei 10 und gehen nach unten, aber nicht bis zur 0, in -1 "
"Inkrementen. Das Programm startet mit dem größeren Wert, also kommt er als "
"erstes. Normale Wiederholungen, die hochzählen, starten mit dem kleinsten "
"Wert als erstes Argument in der ``range``-Funktion."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:314
msgid "Count down from 10 to 1"
msgstr "Runterzählen von 10 bis 1"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:314
msgid ""
"for i in range(10, 0, -1):\n"
"    print(i)"
msgstr ""
"for i in range(10, 0, -1):\n"
"    print(i)"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:323
msgid ""
"10\n"
"9\n"
"8\n"
"7\n"
"6\n"
"5\n"
"4\n"
"3\n"
"2\n"
"1"
msgstr ""
"10\n"
"9\n"
"8\n"
"7\n"
"6\n"
"5\n"
"4\n"
"3\n"
"2\n"
"1"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:334
msgid ""
"If the numbers that a program needs to iterate through don't form an easy "
"pattern, it is possible to pull numbers out of a list. (A full discussion of "
"lists is covered in a later chapter. This is just a preview of what you can "
"do.)"
msgstr ""
"Wenn die Zahlen, die das Programm aufzählen soll, keinem einfachen Muster "
"folgen, dann kann man die Zahlen aus einer Liste beziehen. (Eine "
"ausführliche Beschreibung von Listen folgt in einem späteren Kapitel. Dies "
"ist nur eine Vorschau auf das, was du machen kannst.)"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:339
msgid "Print numbers out of a list"
msgstr "Gib Zahlen aus einer Liste aus."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:339
msgid ""
"for i in [2,6,4,2,4,6,7,4]:\n"
"    print(i)"
msgstr ""
"for i in [2,6,4,2,4,6,7,4]:\n"
"    print(i)"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:346
msgid "This prints::"
msgstr "Dies gibt aus:"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:348
msgid ""
"2\n"
"6\n"
"4\n"
"2\n"
"4\n"
"6\n"
"7\n"
"4"
msgstr ""
"2\n"
"6\n"
"4\n"
"2\n"
"4\n"
"6\n"
"7\n"
"4"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:358
msgid "Nesting Loops"
msgstr "Verschachtelte Wiederholungen"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:364
msgid ""
"Try to predict what the code below will print. Then enter the code and see "
"if you are correct."
msgstr ""
"Versuche vorherzusagen, was das Programm unten ausgeben wird. Gib dann den "
"Programmcode ein und probiere aus, ob du richtig lagst."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:367
msgid ""
"# What does this print? Why?\n"
"for i in range(3):\n"
"    print(\"a\")\n"
"for j in range(3):\n"
"    print(\"b\")"
msgstr ""
"# What does this print? Why?\n"
"for i in range(3):\n"
"    print(\"a\")\n"
"for j in range(3):\n"
"    print(\"b\")"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:376
msgid ""
"This next block of code is almost identical to the one above. The second for "
"loop has been indented one tab stop so that it is now nested inside of the "
"first for loop. This changes how the code runs significantly. Try it and see."
msgstr ""
"Der Codeblock unten ist fast identisch, zu dem oben. Die zweite Wiederholung "
"wurde einen weiteren Schritt eingerückt, so dass sie jetzt in die erste "
"Wiederholung einbettet ist. Das verändert entscheidend, was das Programm "
"ausführt. Probier es aus und sieh."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:380
msgid ""
"# What does this print? Why?\n"
"for i in range(3):\n"
"    print(\"a\")\n"
"    for j in range(3):\n"
"        print(\"b\")\n"
"\n"
"print(\"Done\")"
msgstr ""
"# What does this print? Why?\n"
"for i in range(3):\n"
"    print(\"a\")\n"
"    for j in range(3):\n"
"        print(\"b\")\n"
"\n"
"print(\"Done\")"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:391
msgid "I'm not going to tell you what the code does, go to a computer and see."
msgstr ""
"Ich werde dir nicht verraten was das Programm macht. Geh an den Rechner und "
"probiere es aus."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:398
msgid "Keeping a Running Total"
msgstr "Eine laufende Summe führen"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:404
msgid ""
"A common operation in working with loops is to keep a running total. This "
"\"running total\" code pattern is used a lot in this book. Keep a running "
"total of a score, total a person's account transactions, use a total to find "
"an average, etc. You might want to bookmark this code listing because we'll "
"refer back to it several times. In the code below, the user enters five "
"numbers and the code totals up their values."
msgstr ""
"Eine übliche Aufgabe für Wiederholungen ist eine laufende Summe zu führen. "
"Dieses \"laufende Summe\"-Codemuster wird in diesem Buch häufig verwendet. "
"Eine laufende Summe des Punktestands, die Summe der Kontobewegungen einer "
"Person, die Summe, um einen Durchschnittswert zu berechnen, und so weiter. "
"Du solltest dieses Programmlisting mit einem Lesezeichen markieren, weil wir "
"später mehrmals darauf zurückkommen. Im Programmcode unten gibt der Benutzer "
"eine Zahl fünfmal ein und das Programm addiert ihre Werte zu einer Summe auf."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:411
msgid "Keep a Running Total"
msgstr "Führe eine laufende Summe"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:411
msgid ""
"total = 0\n"
"for i in range(5):\n"
"    new_number = int(input(\"Enter a number: \" ))\n"
"    total = total + new_number\n"
"print(\"The total is: \", total)"
msgstr ""
"total = 0\n"
"for i in range(5):\n"
"    new_number = int(input(\"Enter a number: \" ))\n"
"    total = total + new_number\n"
"print(\"The total is: \", total)"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:421
msgid ""
"Note that line 1 creates the variable total, and sets it to an initial "
"amount of zero. It is easy to forget the need to create and initialize the "
"variable to zero. Without it the computer will complain when it hits line 4. "
"It doesn't know how to add n``ew_number`` to total because total hasn't been "
"given a value yet."
msgstr ""
"Beachte, dass in Zeile 1 die Variable ``total`` erstellt und auf den "
"Anfangswert Null festgelegt wird. Es ist leicht zu vergessen, dass die "
"Variable erstellt und auf Null initialisiert werden muss. Ohne dies "
"beschwert sich der Rechner, wenn er Zeile 4 erreicht. Er weiß nicht, wie er "
"``new_number`` zu ``total`` addieren soll, da ``total`` noch keinen Wert "
"zugewiesen bekommen hat."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:426
msgid ""
"A common mistake is to use ``i`` to total instead of ``new_number``. "
"Remember, we are keeping a running total of the values entered by the user, "
"not a running total of the current loop count."
msgstr ""
"Ein üblicher Fehler ist, ``i`` zur Summe zu addieren anstatt von "
"``new_number``. Erinnere dich, wir wollen die Summe, der vom Benutzer "
"eingegebenen Werte, führen und nicht die laufende Summe des "
"Wiederholungszählers."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:430
msgid ""
"Speaking of the current loop count, we can use the loop count value to solve "
"some mathematical operations. For example:"
msgstr ""
"Wenn wir schon beim Wiederholungszähler sind. Wir können den Wert des "
"Wiederholungszählers verwenden, um damit einige mathematische Operationen "
"durchzuführen. Zum Beispiel:"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:433
msgid "s=\\sum\\limits_{n=1}^{100}n"
msgstr "s=\\sum\\limits_{n=1}^{100}n"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:437
msgid ""
"If you aren't familiar with this type of formula, it is just a fancy way of "
"stating:"
msgstr ""
"Wenn du diese Art von Formel nicht kennst, es ist nur eine schicke Art zu "
"sagen:"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:440
msgid "s=1+2+3+4+5 \\ldots 98+99+100"
msgstr "s=1+2+3+4+5 \\ldots 98+99+100"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:444
msgid ""
"The code below adds all the numbers from 1 to 100. It demonstrates a common "
"pattern where a running total is kept inside of a loop. This also uses a "
"separate variable sum to track the running total."
msgstr ""
"Der Programmcode unten addiert alle Zahlen von 1 bis 100. Es zeigt ein "
"übliches Muster, wo eine laufende Summe in einer Wiederholung geführt wird. "
"Dies verwendet eine separate Variable ``sum``, um die laufende Gesamtsumme "
"zu verfolgen."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:448
msgid "Sum all numbers 1 to 100"
msgstr "Summiere alle Zahlen von 1 bis 100"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:448
msgid ""
"# What is the value of sum?\n"
"total = 0\n"
"for i in range(1, 101):\n"
"    total = total + i\n"
"print(total)"
msgstr ""
"# What is the value of sum?\n"
"total = 0\n"
"for i in range(1, 101):\n"
"    total = total + i\n"
"print(total)"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:458
msgid ""
"Here's a different variation. This takes five numbers from the user and "
"counts the number of times the user enters a zero:"
msgstr ""
"Hier ist eine andere Variante. Diese nimmt fünf Zahlen von Benutzer und "
"zählt wie oft der Benutzer eine 0 eingibt:"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:461
msgid ""
"total = 0\n"
"for i in range(5):\n"
"    new_number = int(input( \"Enter a number: \"))\n"
"    if new_number == 0:\n"
"        total += 1\n"
"print(\"You entered a total of\", total, \"zeros\")"
msgstr ""
"total = 0\n"
"for i in range(5):\n"
"    new_number = int(input( \"Enter a number: \"))\n"
"    if new_number == 0:\n"
"        total += 1\n"
"print(\"You entered a total of\", total, \"zeros\")"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:471
msgid ""
"A programmer that understands the nested for loops and running totals should "
"be able to predict the output of the code below."
msgstr ""
"Ein Programmierer, der ineinander geschachtelte Wiederholungen und laufende "
"Summen versteht, sollte die Ausgabe des folgenden Programms vorhersagen "
"können."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:474
msgid ""
"# What is the value of a?\n"
"a = 0\n"
"for i in range(10):\n"
"    a = a + 1\n"
"print(a)\n"
"\n"
"# What is the value of a?\n"
"a = 0\n"
"for i in range(10):\n"
"    a = a + 1\n"
"for j in range(10):\n"
"    a = a + 1\n"
"print(a)\n"
"\n"
"# What is the value of a?\n"
"a = 0\n"
"for i in range(10):\n"
"    a = a + 1\n"
"    for j in range(10):\n"
"        a = a + 1\n"
"print(a)"
msgstr ""
"# What is the value of a?\n"
"a = 0\n"
"for i in range(10):\n"
"    a = a + 1\n"
"print(a)\n"
"\n"
"# What is the value of a?\n"
"a = 0\n"
"for i in range(10):\n"
"    a = a + 1\n"
"for j in range(10):\n"
"    a = a + 1\n"
"print(a)\n"
"\n"
"# What is the value of a?\n"
"a = 0\n"
"for i in range(10):\n"
"    a = a + 1\n"
"    for j in range(10):\n"
"        a = a + 1\n"
"print(a)"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:499
msgid ""
"Don't go over this section too fast. Give it a try and predict the output of "
"the code above. Then copy it into a Python program and run it to see if you "
"are right. If you aren't, figure out why."
msgstr ""
"Geh nicht zu schnell über diesen Abschnitt hinweg. Probiere, die Ausgabe des "
"Programmcodes oben vorherzusagen. Kopiere ihn dann in ein Python-Programm "
"und führe ihn aus, um zu sehen, ob du recht hattest. Wenn du nicht recht "
"hattest, finde heraus warum."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:504
msgid "Example for Loops"
msgstr "Beispiel für Wiederholungen"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:506
msgid "This example code covers common for loops and shows how they work."
msgstr ""
"Dieses Beispiel deckt Gemeinsamkeiten bei Wiederholungen ab und zeigt, wie "
"sie funktionieren."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:508
msgid "for_loop_examples.py"
msgstr "for_loop_examples.py"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:508
msgid ""
"# Sample Python/Pygame Programs\n"
"# Simpson College Computer Science\n"
"# http://programarcadegames.com/\n"
"# http://simpson.edu/computer-science/\n"
"\n"
"# Print 'Hi' 10 times\n"
"for i in range(10):\n"
"    print(\"Hi\")\n"
"\n"
"# Print 'Hello' 5 times and 'There' once\n"
"for i in range(5):\n"
"    print(\"Hello\")\n"
"print(\"There\")\n"
"\n"
"# Print 'Hello' 'There' 5 times\n"
"for i in range(5):\n"
"    print(\"Hello\")\n"
"    print(\"There\")\n"
"\n"
"# Print the numbers 0 to 9\n"
"for i in range(10):\n"
"    print(i)\n"
"\n"
"# Two ways to print the numbers 1 to 10\n"
"for i in range(1, 11):\n"
"    print(i)\n"
"\n"
"for i in range(10):\n"
"    print(i + 1)\n"
"\n"
"# Two ways to print the even numbers 2 to 10\n"
"for i in range(2, 12, 2):\n"
"    print(i)\n"
"\n"
"for i in range(5):\n"
"    print((i + 1) * 2)\n"
"\n"
"# Count down from 10 down to 1 (not zero)\n"
"for i in range(10, 0, -1):\n"
"    print(i)\n"
"\n"
"# Print numbers out of a list\n"
"for i in [2, 6, 4, 2, 4, 6, 7, 4]:\n"
"    print(i)\n"
"\n"
"# What does this print? Why?\n"
"for i in range(3):\n"
"    print(\"a\")\n"
"    for j in range(3):\n"
"        print(\"b\")\n"
"\n"
"# What is the value of a?\n"
"a = 0\n"
"for i in range(10):\n"
"    a = a + 1\n"
"print(a)\n"
"\n"
"# What is the value of a?\n"
"a = 0\n"
"for i in range(10):\n"
"    a = a + 1\n"
"for j in range(10):\n"
"    a = a + 1\n"
"print(a)\n"
"\n"
"# What is the value of a?\n"
"a = 0\n"
"for i in range(10):\n"
"    a = a + 1\n"
"    for j in range(10):\n"
"        a = a + 1\n"
"print(a)\n"
"\n"
"# What is the value of sum?\n"
"sum = 0\n"
"for i in range(1, 101):\n"
"    sum = sum + i\n"
msgstr ""
"# Sample Python/Pygame Programs\n"
"# Simpson College Computer Science\n"
"# http://programarcadegames.com/\n"
"# http://simpson.edu/computer-science/\n"
"\n"
"# Print 'Hi' 10 times\n"
"for i in range(10):\n"
"    print(\"Hi\")\n"
"\n"
"# Print 'Hello' 5 times and 'There' once\n"
"for i in range(5):\n"
"    print(\"Hello\")\n"
"print(\"There\")\n"
"\n"
"# Print 'Hello' 'There' 5 times\n"
"for i in range(5):\n"
"    print(\"Hello\")\n"
"    print(\"There\")\n"
"\n"
"# Print the numbers 0 to 9\n"
"for i in range(10):\n"
"    print(i)\n"
"\n"
"# Two ways to print the numbers 1 to 10\n"
"for i in range(1, 11):\n"
"    print(i)\n"
"\n"
"for i in range(10):\n"
"    print(i + 1)\n"
"\n"
"# Two ways to print the even numbers 2 to 10\n"
"for i in range(2, 12, 2):\n"
"    print(i)\n"
"\n"
"for i in range(5):\n"
"    print((i + 1) * 2)\n"
"\n"
"# Count down from 10 down to 1 (not zero)\n"
"for i in range(10, 0, -1):\n"
"    print(i)\n"
"\n"
"# Print numbers out of a list\n"
"for i in [2, 6, 4, 2, 4, 6, 7, 4]:\n"
"    print(i)\n"
"\n"
"# What does this print? Why?\n"
"for i in range(3):\n"
"    print(\"a\")\n"
"    for j in range(3):\n"
"        print(\"b\")\n"
"\n"
"# What is the value of a?\n"
"a = 0\n"
"for i in range(10):\n"
"    a = a + 1\n"
"print(a)\n"
"\n"
"# What is the value of a?\n"
"a = 0\n"
"for i in range(10):\n"
"    a = a + 1\n"
"for j in range(10):\n"
"    a = a + 1\n"
"print(a)\n"
"\n"
"# What is the value of a?\n"
"a = 0\n"
"for i in range(10):\n"
"    a = a + 1\n"
"    for j in range(10):\n"
"        a = a + 1\n"
"print(a)\n"
"\n"
"# What is the value of sum?\n"
"sum = 0\n"
"for i in range(1, 101):\n"
"    sum = sum + i\n"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:514
msgid "While Loops"
msgstr "While-Schleifen"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:520
msgid ""
"A ``for`` loop is used when a program knows it needs to repeat a block of "
"code for a certain number of times. A ``while`` loop is used when a program "
"needs to loop until a particular condition occurs."
msgstr ""
"Eine ``for``-Schleife wird verwendet, wenn das Programm weiß, dass es einen "
"Codeblock eine bestimmte Anzahl wiederholen muss. Eine ``while``-Schleife "
"wird verwendet, wenn das Programm wiederholen muss, bis eine bestimmte "
"Bedingung auftritt."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:524
msgid ""
"Oddly enough, a while loop can be used anywhere a ``for`` loop is used. It "
"can be used to loop until an increment variable reaches a certain value. Why "
"have a ``for`` loop if a while loop can do everything? The ``for`` loop is "
"simpler to use and code. A ``for`` loop that looks like this:"
msgstr ""
"Seltsam genug: Es kann eine ``while``-Schleife überall verwendet werden, wo "
"eine ``for``-Schleife verwendet wird. Sie kann verwendet werden, um eine "
"Variable zu inkrementieren, bis sie einen bestimmten Wert erreicht. Warum "
"gibt es eine ``for``-Schleife, wenn die ``while``-Schleife alles kann? Die "
"``for``-Schleife lässt sich einfacher anwenden und programmieren. Die "
"``for``-Schleife sieht so aus:"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:529
msgid "Using a ``for`` loop to print the numbers 0 to 9"
msgstr "Die Zahlen 0 bis 9 mit einer ``for``-Schleife ausgeben"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:537
msgid "Can be done with a ``while`` loop that looks like this:"
msgstr ""
"Das kann auch mit einer ``while``-Schleife, die wie folgt aussieht, erreicht "
"werden:"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:539
msgid "Using a while loop to print the numbers 0 to 9"
msgstr "Die Zahlen von 0 bis 9 mit einer ``while``-Schleife ausgeben"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:539
msgid ""
"i = 0\n"
"while i < 10:\n"
"    print(i)\n"
"    i = i + 1"
msgstr ""
"i = 0\n"
"while i < 10:\n"
"    print(i)\n"
"    i = i + 1"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:548
msgid ""
"Line 1 of the while loop sets up a \"sentinel\" variable that will be used "
"to count the number of times the loop has been executed. This happens "
"automatically in a ``for`` loop eliminating one line of code. Line 2 "
"contains the actual ``while`` loop. The format of the while loop is very "
"similar to the if statement. If the condition holds, the code in the loop "
"will repeat. Line 4 adds to the increment value. In a ``for`` loop this "
"happens automatically, eliminating another line of code. As one can see from "
"the code, the for loop is more compact than a ``while`` loop and is easier "
"to read. Otherwise programs would do everything with a ``while`` loop."
msgstr ""
"In Zeile 1 der ``while``-Schleife wird eine \"Wächter\"-Variable (englisch "
"*sentinel*) eingerichtet, die zählt, wie oft die Schleife ausgeführt wurde. "
"Dies wird bei der ``for``-Schleife automatisch ausgeführt und spart uns eine "
"Zeile Code. Zeile 2 enthält die eigentliche ``while``-Schleife. Das Format "
"der ``while``-Schleife ist sehr ähnlich zum ``if``. Wenn die Bedingung "
"erfüllt, wird der Code im Schleifenkörper ausgeführt. In Zeile 4 wird der "
"Zähler inkrementiert. In einer ``for``-Schleife passiert auch das "
"automatisch und spart eine weitere Zeile Code. Wie man in den Beispielen "
"sehen kann, ist die ``for``-Schleife kompakter und einfacher zu lesen als "
"die ``while``-Schleife. Andernfalls würde alles in Programmen mit der "
"``while``-Schleife umgesetzt."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:558
msgid ""
"A common mistake is to confuse the ``for`` loop and the ``while`` loop. The "
"code below shows a programmer that can't quite make up his/her mind between "
"a ``for`` loop or a ``while`` loop."
msgstr ""
"``for``- und ``while``-Schleifen werden häufig verwechselt. Der Code unten "
"zeigt wie ein Programmierer sich nicht so richtig zwischen ``for`` und "
"``while`` entscheiden kann."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:562
msgid "Example of a confused loop"
msgstr "Beispiel einer verwirrten Schleife"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:562
msgid ""
"while range(10):\n"
"    print(i)"
msgstr ""
"while range(10):\n"
"    print(i)"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:569
msgid "Don't use range with a ``while`` loop!"
msgstr "Verwende ``range`` nicht mit einer ``while``-Schleife!"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:571
msgid ""
"The ``range`` function only works with the ``for`` loop. Do not use it with "
"the ``while`` loop!"
msgstr ""
"Die ``range``-Funktion funktioniert nur mit der ``for``-Schleife. Verwende "
"sie nicht mit der ``while``-Schleife."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:575
msgid "Using Increment Operators"
msgstr "Verwenden von Inkrement-Operatoren"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:577
msgid ""
"Increment operators are often used with ``while`` loops. It is possible to "
"short-hand the code:"
msgstr ""
"Inkrement-Operatoren werden oft in ``while``-Schleifen verwendet. Es ist "
"möglich den Code zu verkürzen:"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:580
msgid "i = i + 1"
msgstr "i = i + 1"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:584
msgid "With the following:"
msgstr "Mit dem folgenden:"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:586
msgid "i += 1"
msgstr "i += 1"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:590
msgid "In the while loop it would look like:"
msgstr "In der ``while``-Schleife würde es wie folgt aussehen:"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:592
msgid ""
"i = 0\n"
"while i < 10:\n"
"    print(i)\n"
"    i += 1"
msgstr ""
"i = 0\n"
"while i < 10:\n"
"    print(i)\n"
"    i += 1"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:600
msgid ""
"This can be done with subtraction and multiplication as well. For example:"
msgstr ""
"Dies kann mit Subtraktion und Multiplikation auch gemacht werden. Zum "
"Beispiel:"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:602
msgid "i *= 2"
msgstr "i *= 2"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:606
msgid "Is the same as:"
msgstr "Es ist das gleiche wie:"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:608
msgid "i = i * 2"
msgstr "i = i * 2"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:612
msgid "See if you can figure out what would this print:"
msgstr "Schau, ob du herausfinden kannst, was dies ausgeben wird:"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:614
msgid ""
"i = 1\n"
"while i <= 2 ** 32:\n"
"    print(i)\n"
"    i *= 2"
msgstr ""
"i = 1\n"
"while i <= 2 ** 32:\n"
"    print(i)\n"
"    i *= 2"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:622
msgid "Looping Until User Wants To Quit"
msgstr "Wiederholen, bis der Benutzer genug hat"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:624
msgid ""
"A very common operation is to loop until the user performs a request to quit:"
msgstr ""
"Eine häufige Aufgabe ist zu wiederholen, bis der Benutzer ein Ende der "
"Bearbeitung anfordert:"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:626
msgid "Looping until the user wants to quit"
msgstr "Wiederholen, bis der Benutzer genug hat"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:626
msgid ""
"quit = \"n\"\n"
"while quit == \"n\":\n"
"    quit = input(\"Do you want to quit? \")"
msgstr ""
"quit = \"n\"\n"
"while quit == \"n\":\n"
"    quit = input(\"Do you want to quit? \")"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:634
msgid ""
"There may be several ways for a loop to quit. Using a Boolean variable to "
"trigger the event is a way of handling that. Here's an example:"
msgstr ""
"Es gibt mehrere Arten eine Schleife zu beenden. Die Verwendung einer "
"Booleschen Variablen, um das Ereignis auszulösen, ist eine Art. Hier ist ein "
"Beispiel:"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:638
msgid "Looping until the game is over or the user wants to quit"
msgstr "Wiederholen, bis das Spiel zu Ende ist und der Benutzer genug hat"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:638
msgid ""
"done = False\n"
"while not done:\n"
"    quit = input(\"Do you want to quit? \")\n"
"    if quit == \"y\":\n"
"        done = True\n"
"\n"
"    attack = input(\"Does your elf attack the dragon? \")\n"
"    if attack == \"y\":\n"
"        print(\"Bad choice, you died.\")\n"
"        done = True"
msgstr ""
"done = False\n"
"while not done:\n"
"    quit = input(\"Do you want to quit? \")\n"
"    if quit == \"y\":\n"
"        done = True\n"
"\n"
"    attack = input(\"Does your elf attack the dragon? \")\n"
"    if attack == \"y\":\n"
"        print(\"Bad choice, you died.\")\n"
"        done = True"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:653
msgid ""
"This isn't perfect though, because if the user says she wants to quit, the "
"code will still ask if she wants to attack the dragon. How could you fix "
"this?"
msgstr ""
"Dies ist nicht perfekt. Wenn die Benutzerin sagt, dass es ihr reicht, wird "
"das Programm sie trotzdem fragen, ob sie den Drachen angreifen will. Wie "
"kannst du das reparieren?"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:656
msgid ""
"Here is an example of using a while loop where the code repeats until the "
"value gets close enough to zero:"
msgstr ""
"Hier ist ein Beispiel mit einer ``while``-Schleife, in der der Code "
"wiederholt wird, bis der Wert nahe genug an der Null ist:"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:659
msgid ""
"value = 0\n"
"increment = 0.5\n"
"while value < 0.999:\n"
"    value += increment\n"
"    increment *= 0.5\n"
"    print(value)"
msgstr ""
"value = 0\n"
"increment = 0.5\n"
"while value < 0.999:\n"
"    value += increment\n"
"    increment *= 0.5\n"
"    print(value)"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:670
msgid "Common Problems With ``while`` Loops"
msgstr "Typische Probleme mit ``while``-Schleifen"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:672
msgid ""
"The programmer wants to count down from 10. What is wrong and how can it be "
"fixed?"
msgstr ""
"Der Programmierer wollt von 10 nach unten zählen. Was ist falsch und wie "
"kann es repariert werden?"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:674
msgid ""
"i = 10\n"
"while i == 0:\n"
"    print(i)\n"
"    i -= 1"
msgstr ""
"i = 10\n"
"while i == 0:\n"
"    print(i)\n"
"    i -= 1"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:682
msgid ""
"What is wrong with this loop that tries to count to 10? What will happen "
"when it is run? How should it be fixed?"
msgstr ""
"Was ist an dieser Schleife falsch, die bis 10 zählen soll? Was wird "
"passieren, wenn sie ausgeführt wird? Wie soll das repariert werden?"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:685
msgid ""
"i = 1\n"
"while i < 10:\n"
"    print(i)"
msgstr ""
"i = 1\n"
"while i < 10:\n"
"    print(i)"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:693
msgid "Example ``while`` Loops"
msgstr "Beispiel ``while``-Schleifen"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:695
msgid ""
"Here's a program that covers the different uses of the while loop that we "
"just talked about."
msgstr ""
"Hier ist ein Programm, das die verschiedenen Anwendungsformen von ``while``-"
"Schleifen zeigt, die wir gerade besprochen haben."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:697
msgid "while_loop_examples.py"
msgstr "while_loop_examples.py"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:697
msgid ""
"# Sample Python/Pygame Programs\n"
"# Simpson College Computer Science\n"
"# http://programarcadegames.com/\n"
"# http://simpson.edu/computer-science/\n"
"\n"
"# A while loop can be used anywhere a for loop is used:\n"
"i = 0\n"
"while i < 10:\n"
"    print(i)\n"
"    i = i + 1\n"
"\n"
"# This is the same as:\n"
"for i in range(10):\n"
"    print(i)\n"
"\n"
"# It is possible to short hand the code:\n"
"# i = i + 1\n"
"# With the following:\n"
"# i += 1\n"
"# This can be done with subtraction, and multiplication as well.\n"
"i = 0\n"
"while i < 10:\n"
"    print(i)\n"
"    i += 1\n"
"\n"
"# What would this print?\n"
"i = 1\n"
"while i <= 2**32:\n"
"    print(i)\n"
"    i *= 2\n"
"\n"
"# A very common operation is to loop until the user performs\n"
"# a request to quit\n"
"quit = \"n\"\n"
"while quit == \"n\":\n"
"    quit = input(\"Do you want to quit? \")\n"
"\n"
"# There may be several ways for a loop to quit. Using a boolean\n"
"# to trigger the event is a way of handling that.\n"
"done = False\n"
"while not done:\n"
"    quit = input(\"Do you want to quit? \")\n"
"    if quit == \"y\":\n"
"        done = True\n"
"\n"
"    attack = input(\"Does your elf attach the dragon? \")\n"
"    if attack == \"y\":\n"
"        print(\"Bad choice, you died.\")\n"
"        done = True\n"
"\n"
"value = 0\n"
"increment = 0.5\n"
"while value < 0.999:\n"
"    value += increment\n"
"    increment *= 0.5\n"
"    print(value)\n"
"\n"
"# -- Common problems with while loops --\n"
"\n"
"# The programmer wants to count down from 10\n"
"# What is wrong and how to fix it?\n"
"i = 10\n"
"while i == 0:\n"
"    print(i)\n"
"    i -= 1\n"
"\n"
"# What is wrong with this loop that tries\n"
"# to count to 10? What will happen when it is run?\n"
"i = 1\n"
"while i < 10:\n"
"    print(i)\n"
msgstr ""
"# Sample Python/Pygame Programs\n"
"# Simpson College Computer Science\n"
"# http://programarcadegames.com/\n"
"# http://simpson.edu/computer-science/\n"
"\n"
"# A while loop can be used anywhere a for loop is used:\n"
"i = 0\n"
"while i < 10:\n"
"    print(i)\n"
"    i = i + 1\n"
"\n"
"# This is the same as:\n"
"for i in range(10):\n"
"    print(i)\n"
"\n"
"# It is possible to short hand the code:\n"
"# i = i + 1\n"
"# With the following:\n"
"# i += 1\n"
"# This can be done with subtraction, and multiplication as well.\n"
"i = 0\n"
"while i < 10:\n"
"    print(i)\n"
"    i += 1\n"
"\n"
"# What would this print?\n"
"i = 1\n"
"while i <= 2**32:\n"
"    print(i)\n"
"    i *= 2\n"
"\n"
"# A very common operation is to loop until the user performs\n"
"# a request to quit\n"
"quit = \"n\"\n"
"while quit == \"n\":\n"
"    quit = input(\"Do you want to quit? \")\n"
"\n"
"# There may be several ways for a loop to quit. Using a boolean\n"
"# to trigger the event is a way of handling that.\n"
"done = False\n"
"while not done:\n"
"    quit = input(\"Do you want to quit? \")\n"
"    if quit == \"y\":\n"
"        done = True\n"
"\n"
"    attack = input(\"Does your elf attach the dragon? \")\n"
"    if attack == \"y\":\n"
"        print(\"Bad choice, you died.\")\n"
"        done = True\n"
"\n"
"value = 0\n"
"increment = 0.5\n"
"while value < 0.999:\n"
"    value += increment\n"
"    increment *= 0.5\n"
"    print(value)\n"
"\n"
"# -- Common problems with while loops --\n"
"\n"
"# The programmer wants to count down from 10\n"
"# What is wrong and how to fix it?\n"
"i = 10\n"
"while i == 0:\n"
"    print(i)\n"
"    i -= 1\n"
"\n"
"# What is wrong with this loop that tries\n"
"# to count to 10? What will happen when it is run?\n"
"i = 1\n"
"while i < 10:\n"
"    print(i)\n"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:703
msgid "The ``break`` And ``continue`` Statements"
msgstr "Die Anweisungen ``break`` und ``continue``"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:705
msgid ""
"If you are in the middle of a loop, and your code encounters a ``break`` "
"statement, you'll immediately exit the loop."
msgstr ""
"Wenn du mitten in einer Schleife bist und der Code läuft auf eine ``break``-"
"Anweisung, wird die Schleife sofort beendet."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:708
msgid ""
"while True: # Loop forever\n"
"    quit = input(\"Do you want to quit? \")\n"
"    if quit == \"y\":\n"
"        break\n"
"\n"
"    attack = input(\"Does your elf attack the dragon? \")\n"
"    if attack == \"y\":\n"
"        print(\"Bad choice, you died.\")\n"
"        break"
msgstr ""
"while True: # Loop forever\n"
"    quit = input(\"Do you want to quit? \")\n"
"    if quit == \"y\":\n"
"        break\n"
"\n"
"    attack = input(\"Does your elf attack the dragon? \")\n"
"    if attack == \"y\":\n"
"        print(\"Bad choice, you died.\")\n"
"        break"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:721
msgid ""
"If you are in the middle of a loop, and your code encounters a ``continue`` "
"statement, you'll immediately be sent back up to the top of the loop."
msgstr ""
"Wenn du mitten in einer Schleife bist und dein Code läuft auf eine "
"``continue``-Anweisung, wirst du sofort an den Anfang des Schleifenkörpers "
"zurück geschickt."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:727
msgid "Random Numbers"
msgstr "Zufallszahlen"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:729
msgid ""
"Random numbers are heavily used in computer science for programs that "
"involve games or simulations."
msgstr ""
"Zufallszahlen werden in der Informatik oft in Programmen eingesetzt, wenn es "
"um Spiele oder Simulationen geht."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:733
msgid "The ``randrange`` Function"
msgstr "Die ``randrange``-Funktion"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:739
msgid ""
"By default, Python does not know how to make random numbers. It is necessary "
"to have Python import a code library that can create random numbers. So to "
"use random numbers, the first thing that should appear at the top of the "
"program is an import statement:"
msgstr ""
"Python weiß an sich nicht, wie es Zufallszahlen erzeugen soll. Man muss "
"Python eine Code-Bibliothek importieren lassen, die Zufallszahlen erzeugen "
"kann. Deshalb ist das Erste, was am Anfang eines Programms erscheinen "
"sollte, wenn man Zufallszahlen braucht, eine ``import``-Anweisung:"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:744
msgid "import random"
msgstr "import random"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:748
msgid ""
"Just like with pygame, it is important not to create a file with the same "
"name as what is being imported. Creating a file called random.py will cause "
"Python to start importing that file instead of the system library that "
"creates random numbers."
msgstr ""
"Genau wie mit arcade, ist es wichtig, die Datei nicht so zu nennen, wie "
"etwas das importiert werden soll. Wenn du eine Datei erzeugst, die random.py "
"heißt, wird Python diese Datei anstelle der System-Bibliothek zum Erzeugen "
"von Zufallszahlen importieren."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:753
msgid ""
"After this, random numbers can be created with the ``randrange`` function. "
"For example, this code creates random numbers from 0 to 49. By default the "
"lower bound is 0."
msgstr ""
"Nach dem Import können Zufallszahlen mit der ``randrange``-Funktion erzeugt "
"werden. Dieser Code erzeugt zum Beispiel Zufallszahlen von 0 bis 49. "
"Standardmäßig ist die untere Schranke 0."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:757
msgid "Random number from 0 to 49"
msgstr "Zufallszahlen von 0 bis 49"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:757
msgid "my_number = random.randrange(50)"
msgstr "my_number = random.randrange(50)"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:762
msgid ""
"The next code example generates random numbers from 100 to 200. Just like "
"the range function the second parameter specifies an upper-bound that is not "
"inclusive. Therefore if you want random numbers up to and including 200, "
"specify 201."
msgstr ""
"Das nächste Codebeispiel erzeugt Zufallszahlen von 100 bis 200. Genau wie "
"bei der ``range``-Funktion, ist der zweite Parameter die nicht-inklusive, "
"obere Schranke. Wenn du Zufallszahlen bis und einschließlich 200 haben "
"willst, gib deshalb 201 an. "

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:767
msgid "Random number from 100 to 200"
msgstr "Zufallszahlen von 100 bis 200"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:767
msgid "my_number = random.randrange(100, 201)"
msgstr "my_number = random.randrange(100, 201)"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:775
msgid "Random Chance"
msgstr "Zufallsauswahl"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:777
msgid ""
"Often in games there is a random chance of something happening. How do we "
"program this? It isn't too hard. Here's an example where we have a 1 in 5 "
"chance of meeting a dragon:"
msgstr ""
"In Spielen gibt es oft eine zufällige Chance, dass etwas passiert. Wie "
"setzen wir das um? Es ist nicht besonders schwierig. Hier ist ein Beispiel, "
"in dem wir eine 1 zu 5 Chance haben, auf einen Drachen zu treffen:"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:780
msgid "Random Chance of Something Happening"
msgstr "Zufällige Chance, dass etwas passiert"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:780
msgid ""
"import random\n"
"\n"
"\n"
"for i in range(20):\n"
"    if random.randrange(5) == 0:\n"
"        print(\"DRAGON!!!\")\n"
"    else:\n"
"        print(\"No dragon.\")"
msgstr ""
"import random\n"
"\n"
"\n"
"for i in range(20):\n"
"    if random.randrange(5) == 0:\n"
"        print(\"DRAGON!!!\")\n"
"    else:\n"
"        print(\"No dragon.\")"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:793
msgid ""
"This code repeats twenty times. Inside the loop, we \"roll the dice\" and "
"get a number between 0 and 4. If we roll a 0, then we encounter a dragon. "
"Otherwise we don't."
msgstr ""
"Dieser Code wird 20 mal wiederholt. In der Schleife \"werfen wir einen Würfel"
"\" und bekommen eine Zahl zwischen 0 und 4. Wenn wir eine 0 werfen, dann "
"treffen wir auf einen Drachen, andernfalls nicht."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:797
msgid "The ``random`` Function"
msgstr "Die Funktion ``random``"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:799
msgid ""
"All of the prior code generates integer numbers. If a floating point number "
"is desired, a programmer may use the ``random`` function."
msgstr ""
"Der gesamte vorherige Code generiert Ganzzahlen. Wenn eine Gleitkommazahl "
"gewünscht wird, kann ein Programmierer die Funktion ``random`` verwenden."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:802
msgid ""
"The code below generates a random number from 0 to 1 such as "
"0.4355991106620656."
msgstr ""
"Der Code unten generiert eine Zufallszahl von 0 bis 1, zum Beispiel "
"0,4355991106620656."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:805
msgid "Random floating point number from 0 to 1"
msgstr "Zufällige Gleitkommazahl von 0 bis 1"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:805
msgid "my_number = random.random()"
msgstr "my_number = random.random()"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:810
msgid ""
"With some simple math, this number can be adjusted. For example, the code "
"below generates a random floating point number between 10 and 15:"
msgstr ""
"Mit etwas einfacher Mathematik kann diese Zahl angepasst werden. Der "
"folgende Code generiert beispielsweise eine zufällige Gleitkommazahl "
"zwischen 10 und 15:"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:812
msgid "Random floating point number between 10 and 15"
msgstr "Zufällige Gleitkommazahl zwischen 10 und 15"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:814
msgid "my_number = random.random() * 5 + 10"
msgstr "my_number = random.random() * 5 + 10"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:821
msgid "Number Guessing Game Example"
msgstr "Beispiel für ein Zahlenratespiel"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:823
msgid ""
"Here is the code for the number guessing game at the start of the chapter."
msgstr "Hier folgt der Code für das Zahlenratespiel vom Anfang des Kapitels."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:825
msgid ""
"\"\"\"\n"
"Random Number Guessing Game\n"
"\"\"\"\n"
"import random\n"
"\n"
"\n"
"def main():\n"
"\n"
"    print(\"Hi! I'm thinking of a random number between 1 and 100.\")\n"
"\n"
"    # NEW CONCEPT\n"
"    # Create a secret number\n"
"    secret_number = random.randrange(1, 101)\n"
"\n"
"    # Initialize our attempt count, we start with attempt 1.\n"
"    user_attempt_number = 1\n"
"\n"
"    # Set user guess to something secret number can't be, so we can\n"
"    # get our 'while' loop started.\n"
"    user_guess = 0\n"
"\n"
"    # NEW CONCEPT\n"
"    # Loop until user_guess our secret number, or we run out of attempts.\n"
"    while user_guess != secret_number and user_attempt_number < 8:\n"
"\n"
"        # Tell the user what attempt we are on, and get their guess:\n"
"        print(\"--- Attempt\", user_attempt_number)\n"
"        user_input_text = input(\"Guess what number I am thinking of: \")\n"
"        user_guess = int(user_input_text)\n"
"\n"
"        # Print if we are too high or low, or we got it.\n"
"        if user_guess > secret_number:\n"
"            print(\"Too high.\")\n"
"        elif user_guess < secret_number:\n"
"            print(\"Too low.\")\n"
"        else:\n"
"            print(\"You got it!\")\n"
"\n"
"        # Add to the attempt count\n"
"        user_attempt_number += 1\n"
"\n"
"    # Here, check to see if the user didn't guess the answer, and ran out of "
"tries.\n"
"    # Let her know what the number was, so she doesn't spend the rest of her "
"life\n"
"    # wondering.\n"
"    if user_guess != secret_number:\n"
"        print(\"Aw, you ran out of tries. The number was \" + "
"str(secret_number) + \".\")\n"
"\n"
"# Call the main function\n"
"main()\n"
msgstr ""
"\"\"\"\n"
"Random Number Guessing Game\n"
"\"\"\"\n"
"import random\n"
"\n"
"\n"
"def main():\n"
"\n"
"    print(\"Hi! I'm thinking of a random number between 1 and 100.\")\n"
"\n"
"    # NEW CONCEPT\n"
"    # Create a secret number\n"
"    secret_number = random.randrange(1, 101)\n"
"\n"
"    # Initialize our attempt count, we start with attempt 1.\n"
"    user_attempt_number = 1\n"
"\n"
"    # Set user guess to something secret number can't be, so we can\n"
"    # get our 'while' loop started.\n"
"    user_guess = 0\n"
"\n"
"    # NEW CONCEPT\n"
"    # Loop until user_guess our secret number, or we run out of attempts.\n"
"    while user_guess != secret_number and user_attempt_number < 8:\n"
"\n"
"        # Tell the user what attempt we are on, and get their guess:\n"
"        print(\"--- Attempt\", user_attempt_number)\n"
"        user_input_text = input(\"Guess what number I am thinking of: \")\n"
"        user_guess = int(user_input_text)\n"
"\n"
"        # Print if we are too high or low, or we got it.\n"
"        if user_guess > secret_number:\n"
"            print(\"Too high.\")\n"
"        elif user_guess < secret_number:\n"
"            print(\"Too low.\")\n"
"        else:\n"
"            print(\"You got it!\")\n"
"\n"
"        # Add to the attempt count\n"
"        user_attempt_number += 1\n"
"\n"
"    # Here, check to see if the user didn't guess the answer, and ran out of "
"tries.\n"
"    # Let her know what the number was, so she doesn't spend the rest of her "
"life\n"
"    # wondering.\n"
"    if user_guess != secret_number:\n"
"        print(\"Aw, you ran out of tries. The number was \" + "
"str(secret_number) + \".\")\n"
"\n"
"# Call the main function\n"
"main()\n"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:832
msgid "Mudball Example"
msgstr "Beispiel Mudball"

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:834
msgid ""
"This is a fun text-only game that two players can play. It uses a few "
"concepts we haven't covered yet."
msgstr ""
"Dies ist ein spaßiges Nur-Text-Spiel, das zwei Spieler spielen können. Es "
"werden einige Konzepte verwendet, die wir noch nicht behandelt haben."

#: ../../source/chapters/11_loops_and_random_numbers/loops_and_random_numbers.rst:837
msgid ""
"\"\"\"\n"
"This is a sample text-only game that demonstrates the use of functions.\n"
"The game is called \"Mudball\" and the players take turns lobbing mudballs\n"
"at each other until someone gets hit.\n"
"\"\"\"\n"
"\n"
"import math\n"
"import random\n"
"\n"
"\n"
"def print_instructions():\n"
"    \"\"\" This function prints the instructions. \"\"\"\n"
"\n"
"    # You can use the triple-quote string in a print statement to\n"
"    # print multiple lines.\n"
"    print(\"\"\"\n"
"Welcome to Mudball! The idea is to hit the other player with a mudball.\n"
"Enter your angle (in degrees) and the amount of PSI to charge your gun\n"
"with.\n"
"        \"\"\")\n"
"\n"
"\n"
"def calculate_distance(psi, angle_in_degrees):\n"
"    \"\"\" Calculate the distance the mudball flies. \"\"\"\n"
"    angle_in_radians = math.radians(angle_in_degrees)\n"
"    distance = .5 * psi ** 2 * math.sin(angle_in_radians) * math."
"cos(angle_in_radians)\n"
"    return distance\n"
"\n"
"\n"
"def get_user_input(name):\n"
"    \"\"\" Get the user input for psi and angle. Return as a list of two\n"
"    numbers. \"\"\"\n"
"    # Later on in the 'exceptions' chapter, we will learn how to modify\n"
"    # this code to not crash the game if the user types in something that\n"
"    # isn't a valid number.\n"
"    psi = float(input(name + \" charge the gun with how many psi? \"))\n"
"    angle = float(input(name + \" move the gun at what angle? \"))\n"
"    return psi, angle\n"
"\n"
"\n"
"def get_player_names():\n"
"    \"\"\" Get a list of names from the players. \"\"\"\n"
"    print(\"Enter player names. Enter as many players as you like.\")\n"
"    done = False\n"
"    players = []\n"
"    while not done:\n"
"        player = input(\"Enter player (hit enter to quit): \")\n"
"        if len(player) > 0:\n"
"            players.append(player)\n"
"        else:\n"
"            done = True\n"
"\n"
"    print()\n"
"    return players\n"
"\n"
"\n"
"def process_player_turn(player_name, distance_apart):\n"
"    \"\"\" The code runs the turn for each player.\n"
"    If it returns False, keep going with the game.\n"
"    If it returns True, someone has won, so stop. \"\"\"\n"
"    psi, angle = get_user_input(player_name)\n"
"\n"
"    distance_mudball = calculate_distance(psi, angle)\n"
"    difference = distance_mudball - distance_apart\n"
"\n"
"    # By looking ahead to the chapter on print formatting, these\n"
"    # lines could be made to print the numbers is a nice formatted\n"
"    # manner.\n"
"    if difference > 1:\n"
"        print(\"You went\", difference, \"yards too far!\")\n"
"    elif difference < -1:\n"
"        print(\"You were\", difference * -1, \"yards too short!\")\n"
"    else:\n"
"        print(\"Hit!\", player_name, \"wins!\")\n"
"        return True\n"
"\n"
"    print()\n"
"    return False\n"
"\n"
"\n"
"def main():\n"
"    \"\"\" Main program. \"\"\"\n"
"\n"
"    # Get the game started.\n"
"    print_instructions()\n"
"    player_names = get_player_names()\n"
"    distance_apart = random.randrange(50, 150)\n"
"\n"
"    # Keep looking until someone wins\n"
"    done = False\n"
"    while not done:\n"
"        # Loop for each player\n"
"        for player_name in player_names:\n"
"            # Process their turn\n"
"            done = process_player_turn(player_name, distance_apart)\n"
"            # If someone won, 'break' out of this loop and end the game.\n"
"            if done:\n"
"                break\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()\n"
msgstr ""
"\"\"\"\n"
"This is a sample text-only game that demonstrates the use of functions.\n"
"The game is called \"Mudball\" and the players take turns lobbing mudballs\n"
"at each other until someone gets hit.\n"
"\"\"\"\n"
"\n"
"import math\n"
"import random\n"
"\n"
"\n"
"def print_instructions():\n"
"    \"\"\" This function prints the instructions. \"\"\"\n"
"\n"
"    # You can use the triple-quote string in a print statement to\n"
"    # print multiple lines.\n"
"    print(\"\"\"\n"
"Welcome to Mudball! The idea is to hit the other player with a mudball.\n"
"Enter your angle (in degrees) and the amount of PSI to charge your gun\n"
"with.\n"
"        \"\"\")\n"
"\n"
"\n"
"def calculate_distance(psi, angle_in_degrees):\n"
"    \"\"\" Calculate the distance the mudball flies. \"\"\"\n"
"    angle_in_radians = math.radians(angle_in_degrees)\n"
"    distance = .5 * psi ** 2 * math.sin(angle_in_radians) * math."
"cos(angle_in_radians)\n"
"    return distance\n"
"\n"
"\n"
"def get_user_input(name):\n"
"    \"\"\" Get the user input for psi and angle. Return as a list of two\n"
"    numbers. \"\"\"\n"
"    # Later on in the 'exceptions' chapter, we will learn how to modify\n"
"    # this code to not crash the game if the user types in something that\n"
"    # isn't a valid number.\n"
"    psi = float(input(name + \" charge the gun with how many psi? \"))\n"
"    angle = float(input(name + \" move the gun at what angle? \"))\n"
"    return psi, angle\n"
"\n"
"\n"
"def get_player_names():\n"
"    \"\"\" Get a list of names from the players. \"\"\"\n"
"    print(\"Enter player names. Enter as many players as you like.\")\n"
"    done = False\n"
"    players = []\n"
"    while not done:\n"
"        player = input(\"Enter player (hit enter to quit): \")\n"
"        if len(player) > 0:\n"
"            players.append(player)\n"
"        else:\n"
"            done = True\n"
"\n"
"    print()\n"
"    return players\n"
"\n"
"\n"
"def process_player_turn(player_name, distance_apart):\n"
"    \"\"\" The code runs the turn for each player.\n"
"    If it returns False, keep going with the game.\n"
"    If it returns True, someone has won, so stop. \"\"\"\n"
"    psi, angle = get_user_input(player_name)\n"
"\n"
"    distance_mudball = calculate_distance(psi, angle)\n"
"    difference = distance_mudball - distance_apart\n"
"\n"
"    # By looking ahead to the chapter on print formatting, these\n"
"    # lines could be made to print the numbers is a nice formatted\n"
"    # manner.\n"
"    if difference > 1:\n"
"        print(\"You went\", difference, \"yards too far!\")\n"
"    elif difference < -1:\n"
"        print(\"You were\", difference * -1, \"yards too short!\")\n"
"    else:\n"
"        print(\"Hit!\", player_name, \"wins!\")\n"
"        return True\n"
"\n"
"    print()\n"
"    return False\n"
"\n"
"\n"
"def main():\n"
"    \"\"\" Main program. \"\"\"\n"
"\n"
"    # Get the game started.\n"
"    print_instructions()\n"
"    player_names = get_player_names()\n"
"    distance_apart = random.randrange(50, 150)\n"
"\n"
"    # Keep looking until someone wins\n"
"    done = False\n"
"    while not done:\n"
"        # Loop for each player\n"
"        for player_name in player_names:\n"
"            # Process their turn\n"
"            done = process_player_turn(player_name, distance_apart)\n"
"            # If someone won, 'break' out of this loop and end the game.\n"
"            if done:\n"
"                break\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()\n"

#~ msgid ""
#~ "Note that line 1 creates the variable ``total``, and sets it to an "
#~ "initial amount of zero. It is easy to forget the need to create and "
#~ "initialize the variable to zero. Without it the computer will complain "
#~ "when it hits line 4. It doesn't know how to add ``new_number`` to total "
#~ "because total hasn't been given a value yet."
#~ msgstr ""
#~ "Beachte, dass die erste Zeile die Variable ``total`` erzeugt und sie auf "
#~ "den Anfangswert 0 setzt. Man vergisst leicht, diese Variable zu erzeugen "
#~ "und mit 0 zu initialisieren. Ohne wird der Rechner meckern, wenn er auf "
#~ "Zeile 4 trifft. Er weiß dann nicht wie er die ``new_number`` zur Summe "
#~ "addieren soll, da sie noch keinen Wert hat."
