# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Paul Vincent Craven
# This file is distributed under the same license as the Arcade package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
# derSuessmann <arcade-book-de@dersuessmann.de>, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: Arcade Fall 2018\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-07-09 19:32+0200\n"
"PO-Revision-Date: 2019-07-14 19:34+0200\n"
"Last-Translator: derSuessmann <arcade-book-de@dersuessmann.de>\n"
"Language-Team: German <arcade-book-de@dersuessmann.de>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"X-Generator: Gtranslator 3.32.1\n"

#: ../../source/chapters/14_classes/classes.rst:2
msgid "Introduction to Classes"
msgstr "Einführung in Klassen"

#: ../../source/chapters/14_classes/classes.rst:4
msgid ""
"Classes and objects are very powerful programming tools. They make "
"programming easier. In fact, you are already familiar with the concept of "
"classes and objects. A class is a \"classification\" of an object. Like "
"\"person\" or \"image.\" An object is a particular instance of a class. Like "
"\"Mary\" is an instance of \"Person.\""
msgstr ""
"Klassen und Objekte sind sehr mächtige Programmierwerkzeuge. Sie "
"vereinfachen die Programmierung. Genau genommen bist du bereits mit dem "
"Konzept der Klassen und Objekte vertraut. Eine Klasse ist eine "
"\"Klassifikation\" eines Objekts, wie \"Person\" oder \"Abbild\". Ein Objekt "
"ist ein tatsächliches Exemplar einer Klasse, wie \"Maria\" ein Exemplar von "
"\"Person\" ist."

#: ../../source/chapters/14_classes/classes.rst:10
msgid ""
"Objects have attributes, such as a person's name, height, and age. Objects "
"also have methods. Methods define what an object can do, like run, jump, or "
"sit."
msgstr ""
"Objekte haben Attribute, wie Name, Größe und Alter einer Person. Objekte "
"haben auch Methoden. Methoden definieren was ein Objekt tun kann, wie "
"rennen, springen oder sitzen."

#: ../../source/chapters/14_classes/classes.rst:14
msgid "Why Learn About Classes?"
msgstr "Warum soll ich etwas über Klassen lernen?"

#: ../../source/chapters/14_classes/classes.rst:20
msgid ""
"Each character in an adventure game needs data: a name, location, strength, "
"are they raising their arm, what direction they are headed, etc. Plus those "
"characters do things. They run, jump, hit, and talk."
msgstr ""
"Jeder Charakter in einem Adventure-Spiel benötigt Daten: Einen Namen, "
"Position, Stärke, heben sie ihren Arm, in welche Richtung bewegen sie sich "
"und so weiter. Dazu machen Charaktere Dinge. Sie rennen, springen, schlagen "
"zu und reden."

#: ../../source/chapters/14_classes/classes.rst:24
msgid "Without classes, our Python code to store this data might look like:"
msgstr ""
"Ohne Klassen könnte der Python-Code, um diese Daten zu speichern, so "
"aussehen:"

#: ../../source/chapters/14_classes/classes.rst:26
msgid ""
"name = \"Link\"\n"
"outfit = \"Green\"\n"
"max_hit_points = 50\n"
"current_hit_points = 50"
msgstr ""
"name = \"Link\"\n"
"outfit = \"Green\"\n"
"max_hit_points = 50\n"
"current_hit_points = 50"

#: ../../source/chapters/14_classes/classes.rst:34
msgid ""
"In order to do anything with this character, we'll need to pass that data to "
"a function:"
msgstr ""
"Um irgendetwas mit diesem Charakter zu machen, müssen wir diese Daten an "
"eine Funktion übergeben:"

#: ../../source/chapters/14_classes/classes.rst:36
msgid ""
"def display_character(name, sex, max_hit_points, current_hit_points):\n"
"    print(name, sex, max_hit_points, current_hit_points)"
msgstr ""
"def display_character(name, sex, max_hit_points, current_hit_points):\n"
"    print(name, sex, max_hit_points, current_hit_points)"

#: ../../source/chapters/14_classes/classes.rst:42
msgid ""
"Now imagine creating a program that has a set of variables like that for "
"each character, monster, and item in our game. Then we need to create "
"functions that work with those items. We've now waded into a quagmire of "
"data. All of a sudden this doesn't sound like fun at all."
msgstr ""
"Stelle dir jetzt vor ein Programm zu erstellen, das eine Menge von Variablen "
"wie diese für jeden Charakter, Monster und Gegenstand in deinem Spiel hat. "
"Dann müssen wir noch Funktionen schreiben, die mit diesen Elementen "
"arbeiten. Wir sind jetzt in Sumpf von Daten gelaufen. Auf einmal klingt das "
"nicht mehr nach Spaß."

#: ../../source/chapters/14_classes/classes.rst:47
msgid ""
"But wait, it gets worse! As our game expands, we may need to add new fields "
"to describe our character. In this case we've added ``max_speed``:"
msgstr ""
"Aber warte, es wird noch schlimmer! Während unser Spiel größer wird, müssen "
"wir neue Datenfelder hinzufügen, um unseren Charakter zu beschreiben. In "
"diesem Fall haben wir ``max_speed`` hinzugefügt:"

#: ../../source/chapters/14_classes/classes.rst:50
msgid ""
"name = \"Link\"\n"
"outfit = \"Green\"\n"
"max_hit_points = 50\n"
"current_hit_points = 50\n"
"max_speed = 10\n"
"\n"
"def display_character(name, outfit, max_hit_points, current_hit_points, "
"max_speed):\n"
"    print(name, sex, max_hit_points, current_hit_points)"
msgstr ""
"name = \"Link\"\n"
"outfit = \"Green\"\n"
"max_hit_points = 50\n"
"current_hit_points = 50\n"
"max_speed = 10\n"
"\n"
"def display_character(name, outfit, max_hit_points, current_hit_points, "
"max_speed):\n"
"    print(name, sex, max_hit_points, current_hit_points)"

#: ../../source/chapters/14_classes/classes.rst:62
msgid ""
"In example above, there is only one function. But in a large video game, we "
"might have hundreds of functions that deal with the main character. Adding a "
"new field to help describe what a character has and can do would require us "
"to go through each one of those functions and add it to the parameter list. "
"That would be a lot of work. And perhaps we need to add ``max_speed`` to "
"different types of characters like monsters. There needs to be a better way. "
"Somehow our program needs to package up those data fields so they can be "
"managed easily."
msgstr ""
"Im Beispiel oben gibt es nur eine Funktion, aber in einem großen Videospiel "
"könnten wir Hunderte Funktionen, die den Hauptcharakter betreffen, "
"existieren. Das Hinzufügen eines neuen Datenfelds, das beschreibt, was ein "
"Charakter hat und tun kann, würde uns zwingen durch jede dieser Funktionen "
"zu gehen und es zur Parameterliste hinzufügen. Das wäre eine Menge Arbeit. "
"Vielleicht müssen wir ``max_speed`` zu verschiedenen Charakteren wie "
"Monstern hinzufügen. Es muss einen besseren Weg geben. Irgendwie muss unser "
"Programm diese Datenfelder zusammenpacken, so dass sie sich einfach "
"verwalten lassen."

#: ../../source/chapters/14_classes/classes.rst:71
msgid "Defining and Creating Simple Classes"
msgstr "Definieren und Erstellen einfacher Klassen"

#: ../../source/chapters/14_classes/classes.rst:77
msgid ""
"A better way to manage multiple data attributes is to *define* a structure "
"that has all of the information. Then we can give that \"grouping\" of "
"information a name, like *Character* or *Address*. This can be easily done "
"in Python and any other modern language by using a *class*."
msgstr ""
"Ein besserer Weg mehrere Datenattribute zu handhaben, ist eine Struktur zu "
"*definieren*, die all diese Information umfasst. Dann können wir dieser "
"\"Gruppierung\" von Information einen Namen wie *Charakter* oder *Adresse* "
"geben. Dies kann in Python und jeder anderen modernen Sprache durch "
"Verwendung einer *Klasse* erreicht werden."

#: ../../source/chapters/14_classes/classes.rst:82
msgid ""
"For example, we can *define* a class representing a character in a game:"
msgstr ""
"Zum Beispiel können wir eine Klasse, die einen Charakter im Spiel "
"repräsentiert, *definieren*:"

#: ../../source/chapters/14_classes/classes.rst:84
msgid ""
"class Character():\n"
"    \"\"\" This is a class that represents the main character in a game. "
"\"\"\"\n"
"    def __init__(self):\n"
"        \"\"\" This is a method that sets up the variables in the object. "
"\"\"\"\n"
"        self.name = \"\"\n"
"        outfit = \"Green\"\n"
"        self.max_hit_points = 0\n"
"        self.current_hit_points = 0\n"
"        self.max_speed = 0\n"
"        self.armor_amount = 0"
msgstr ""
"class Character():\n"
"    \"\"\" This is a class that represents the main character in a game. "
"\"\"\"\n"
"    def __init__(self):\n"
"        \"\"\" This is a method that sets up the variables in the object. "
"\"\"\"\n"
"        self.name = \"\"\n"
"        outfit = \"Green\"\n"
"        self.max_hit_points = 0\n"
"        self.current_hit_points = 0\n"
"        self.max_speed = 0\n"
"        self.armor_amount = 0"

#: ../../source/chapters/14_classes/classes.rst:98
msgid ""
"Here's another example, we *define* a class to hold all the fields for an "
"address:"
msgstr ""
"Hier ist ein anderes Beispiel. Wir *definieren* eine Klasse, die alle "
"Datenfelder einer Adresse enthält:"

#: ../../source/chapters/14_classes/classes.rst:100
msgid "Define an address class"
msgstr "Definiere eine Adress-Klasse"

#: ../../source/chapters/14_classes/classes.rst:100
msgid ""
"class Address():\n"
"    \"\"\" Hold all the fields for a mailing address. \"\"\"\n"
"    def __init__(self):\n"
"        \"\"\" Set up the address fields. \"\"\"\n"
"        self.name = \"\"\n"
"        self.line1 = \"\"\n"
"        self.line2 = \"\"\n"
"        self.city = \"\"\n"
"        self.state = \"\"\n"
"        self.zip = \"\""
msgstr ""
"class Address():\n"
"    \"\"\" Hold all the fields for a mailing address. \"\"\"\n"
"    def __init__(self):\n"
"        \"\"\" Set up the address fields. \"\"\"\n"
"        self.name = \"\"\n"
"        self.line1 = \"\"\n"
"        self.line2 = \"\"\n"
"        self.city = \"\"\n"
"        self.state = \"\"\n"
"        self.zip = \"\""

#: ../../source/chapters/14_classes/classes.rst:115
msgid ""
"In the code above, ``Address`` is the class name. The variables in the "
"class, such as ``name`` and ``city``, are called *attributes* or *fields*. "
"(Note the similarities and differences between declaring a class and "
"declaring a function.)"
msgstr ""
"Im Beispiel oben ist ``Address`` der Klassenname. Die Variablen in der "
"Klasse, wie ``name`` und ``city``, werden *Attribute* oder *Felder* genannt. "
"(Beachte die Ähnlichkeiten und Unterschiede zwischen der Deklaration einer "
"Klasse und einer Funktion.)"

#: ../../source/chapters/14_classes/classes.rst:120
msgid ""
"Unlike functions and variables, class names should begin with an upper case "
"letter. While it is possible to begin a class with a lower case letter, it "
"is not considered good practice."
msgstr ""
"Anders als bei Funktionen und Variablen sollen Klassennamen immer mit einem "
"Großbuchstaben anfangen. Auch wenn es möglich ist, einen Klassennamen mit "
"einem Kleinbuchstaben anzufangen, gilt das als schlechter Stil."

#: ../../source/chapters/14_classes/classes.rst:124
msgid ""
"The ``def __init__(self):`` in a special function called a *constructor* "
"that is run automatically when the class is created. We'll discuss the "
"constructor more in a bit."
msgstr ""
"Die ``def __init__(self):`` ist eine spezielle Funktion, die *Konstruktor* "
"genannt wird. Sie wird automatisch ausgeführt, wenn ein Objekt der Klasse "
"erzeugt wird. Wir werden den Konstruktor in Kürze mehr besprechen."

#: ../../source/chapters/14_classes/classes.rst:128
msgid ""
"The ``self.`` is kind of like the pronoun *my*. When inside the class "
"``Address`` we are talking about *my* name, *my* city, etc. We don't want to "
"use ``self.`` outside of the class definition for ``Address``, to refer to "
"an ``Address`` field. Why? Because just like the pronoun \"my,\" it means "
"someone totally different when said by a different person!"
msgstr ""
"Das ``self.`` ist so ähnlich wie das Pronomen *mein*. In der Klasse "
"``Address`` reden wir von *meinem* ``name``, *meiner* ``city`` und so "
"weiter. Wir wollen aber ``self.`` nicht außerhalb der Klassendefinition für "
"``Address`` für den Zugriff auf ein Attribut von ``Address`` verwenden. "
"Warum? Weil es genau wie das Pronomen \"mein\" etwas komplett "
"unterschiedliches bedeutet, wenn es von verschiedenen Personen gesagt wird!"

#: ../../source/chapters/14_classes/classes.rst:134
msgid ""
"To better visualize classes and how they relate, programmers often make "
"diagrams. A diagram for the Address class would look like the figure below. "
"See how the class name is on top with the name of each attribute listed "
"below. To the right of each attribute is the data type, such as string or "
"integer."
msgstr ""
"Um zu verdeutlichen, wie Klassen aufgebaut sind und wie sie in Beziehung "
"stehen, zeichnen Programmierer oft Diagramme. Ein Diagramm für die "
"Adressklasse würde wie in der Abbildung unten aussehen. Der Klassenname "
"steht oben und jedes Attribut wird unten aufgelistet. Rechts von jedem "
"Attribut steht sein Datentyp, wie String oder Integer."

#: ../../source/chapters/14_classes/classes.rst:141
msgid ".. image:: chapters/14_classes/address_example_3.png"
msgstr ".. image:: chapters/14_classes/address_example_3.png"

#: ../../source/chapters/14_classes/classes.rst:141
#: ../../source/chapters/14_classes/classes.rst:876
msgid "Class Diagram"
msgstr "Klassendiagramm"

#: ../../source/chapters/14_classes/classes.rst:143
msgid ""
"The class code *defines* a class but it does not actually create an "
"*instance* of one. The code told the computer what fields an address has and "
"what the initial default values will be. We don't actually have an address "
"yet though. We can define a class without creating one just like we can "
"define a function without calling it. To create a class and set the fields, "
"look at the example below:"
msgstr ""
"Der Klassen-Code *definiert* eine Klasse, aber er erzeugt nicht wirklich ein "
"*Objekt* (Instanz) einer Klasse. Der Code hat dem Rechner gesagt, welche "
"Datenfelder eine Adresse hat und was ihre Standardwerte sein werden. Wir "
"haben bis jetzt noch keine Adresse. Wir können eine Klasse definieren, ohne "
"ein Objekt davon zu erzeugen, genau wie wir eine Funktion definieren können, "
"ohne sie aufzurufen. Sieh dir das Beispiel unten an, wie man ein Objekt "
"einer Klasse erzeugt und die Attribute setzt:"

#: ../../source/chapters/14_classes/classes.rst:150
msgid "Create an instance of the address class"
msgstr "Erzeuge ein Exemplar der Klasse ``Address``"

#: ../../source/chapters/14_classes/classes.rst:150
msgid ""
"# Create an address\n"
"home_address = Address()\n"
"\n"
"# Set the fields in the address\n"
"home_address.name = \"John Smith\"\n"
"home_address.line1 = \"701 N. C Street\"\n"
"home_address.line2 = \"Carver Science Building\"\n"
"home_address.city = \"Indianola\"\n"
"home_address.state = \"IA\"\n"
"home_address.zip = \"50125\""
msgstr ""
"# Create an address\n"
"home_address = Address()\n"
"\n"
"# Set the fields in the address\n"
"home_address.name = \"John Smith\"\n"
"home_address.line1 = \"701 N. C Street\"\n"
"home_address.line2 = \"Carver Science Building\"\n"
"home_address.city = \"Indianola\"\n"
"home_address.state = \"IA\"\n"
"home_address.zip = \"50125\""

#: ../../source/chapters/14_classes/classes.rst:165
msgid ""
"An instance of the address class is created in line 2. Note how the class "
"``Address`` name is used, followed by parentheses. The variable name can be "
"anything that follows normal naming rules."
msgstr ""
"Ein Exemplar der Klasse ``Address`` wird in Zeile 2 erzeugt. Beachte, wie "
"der Klassenname ``Address`` gefolgt von zwei runden Klammern verwendet wird. "
"Der Variablenname kann irgendetwas sein, das den normalen Regeln für "
"Variablennamen folgt."

#: ../../source/chapters/14_classes/classes.rst:169
msgid ""
"To set the fields in the class, a program must use the dot operator. This "
"operator is the period that is between the ``home_address`` and the field "
"name. See how lines 5-10 use the dot operator to set each field value."
msgstr ""
"Ein Programm muss den Punktoperator verwenden, um auf die Attribute des "
"Objekts zuzugreifen. Dieser Operator ist der Punkt zwischen ``home_address`` "
"und dem Attributnamen. Siehe wie in den Zeilen 5-10 der Punktoperator "
"verwendet wird, um jeden Attributwert zu setzen."

#: ../../source/chapters/14_classes/classes.rst:173
msgid ""
"A very common mistake when working with classes is to forget to specify "
"which instance of the class you want to work with. If only one address is "
"created, it is natural to assume the computer will know to use that address "
"you are talking about. This is not the case however. See the example below:"
msgstr ""
"Ein häufiger Fehler beim Programmieren mit Klassen ist, das Objekt mit dem "
"man arbeiten will zu vergessen. Wenn nur eine Adresse erzeugt wird, nimmt "
"man natürlich an, dass der Rechner weiß, dass man über diese Adresse "
"spricht. Das ist aber nicht der Fall. Siehe das Beispiel unten:"

#: ../../source/chapters/14_classes/classes.rst:178
msgid ""
"class Address():\n"
"    def __init__(self):\n"
"        self.name = \"\"\n"
"        self.line1 = \"\"\n"
"        self.line2 = \"\"\n"
"        self.city = \"\"\n"
"        self.state = \"\"\n"
"        self.zip = \"\"\n"
"\n"
"def main():\n"
"    # Create an address\n"
"    my_address = Address()\n"
"\n"
"    # Alert! This does not set the address's name!\n"
"    name = \"Dr. Craven\"\n"
"\n"
"    # This doesn't set the name for the address either\n"
"    Address.name = \"Dr. Craven\"\n"
"\n"
"    # This does work:\n"
"    my_address.name = \"Dr. Craven\"\n"
"\n"
"main()"
msgstr ""
"class Address():\n"
"    def __init__(self):\n"
"        self.name = \"\"\n"
"        self.line1 = \"\"\n"
"        self.line2 = \"\"\n"
"        self.city = \"\"\n"
"        self.state = \"\"\n"
"        self.zip = \"\"\n"
"\n"
"def main():\n"
"    # Create an address\n"
"    my_address = Address()\n"
"\n"
"    # Alert! This does not set the address's name!\n"
"    name = \"Dr. Craven\"\n"
"\n"
"    # This doesn't set the name for the address either\n"
"    Address.name = \"Dr. Craven\"\n"
"\n"
"    # This does work:\n"
"    my_address.name = \"Dr. Craven\"\n"
"\n"
"main()"

#: ../../source/chapters/14_classes/classes.rst:205
msgid ""
"A second address can be created and fields from both instances may be used. "
"See the example below:"
msgstr ""
"Eine zweite Adresse kann erzeugt werden und die Attribute beider Objekte "
"können verwendet werden. Siehe das Beispiel unten:"

#: ../../source/chapters/14_classes/classes.rst:208
#: ../../source/chapters/14_classes/classes.rst:284
msgid "Working with two instances of address"
msgstr "Arbeiten mit zwei Exemplaren der Adresse"

#: ../../source/chapters/14_classes/classes.rst:208
msgid ""
"class Address():\n"
"    def __init__(self):\n"
"        self.name = \"\"\n"
"        self.line1 = \"\"\n"
"        self.line2 = \"\"\n"
"        self.city = \"\"\n"
"        self.state = \"\"\n"
"        self.zip = \"\"\n"
"\n"
"\n"
"def main():\n"
"    # Create an address\n"
"    home_address = Address()\n"
"\n"
"    # Set the fields in the address\n"
"    home_address.name = \"John Smith\"\n"
"    home_address.line1 = \"701 N. C Street\"\n"
"    home_address.line2 = \"Carver Science Building\"\n"
"    home_address.city = \"Indianola\"\n"
"    home_address.state = \"IA\"\n"
"    home_address.zip = \"50125\"\n"
"\n"
"    # Create another address\n"
"    vacation_home_address = Address()\n"
"\n"
"    # Set the fields in the address\n"
"    vacation_home_address.name = \"John Smith\"\n"
"    vacation_home_address.line1 = \"1122 Main Street\"\n"
"    vacation_home_address.line2 = \"\"\n"
"    vacation_home_address.city = \"Panama City Beach\"\n"
"    vacation_home_address.state = \"FL\"\n"
"    vacation_home_address.zip = \"32407\"\n"
"\n"
"    print(\"The client's main home is in \" + home_address.city)\n"
"    print(\"His vacation home is in \" + vacation_home_address.city)\n"
"\n"
"\n"
"main()"
msgstr ""
"class Address():\n"
"    def __init__(self):\n"
"        self.name = \"\"\n"
"        self.line1 = \"\"\n"
"        self.line2 = \"\"\n"
"        self.city = \"\"\n"
"        self.state = \"\"\n"
"        self.zip = \"\"\n"
"\n"
"\n"
"def main():\n"
"    # Create an address\n"
"    home_address = Address()\n"
"\n"
"    # Set the fields in the address\n"
"    home_address.name = \"John Smith\"\n"
"    home_address.line1 = \"701 N. C Street\"\n"
"    home_address.line2 = \"Carver Science Building\"\n"
"    home_address.city = \"Indianola\"\n"
"    home_address.state = \"IA\"\n"
"    home_address.zip = \"50125\"\n"
"\n"
"    # Create another address\n"
"    vacation_home_address = Address()\n"
"\n"
"    # Set the fields in the address\n"
"    vacation_home_address.name = \"John Smith\"\n"
"    vacation_home_address.line1 = \"1122 Main Street\"\n"
"    vacation_home_address.line2 = \"\"\n"
"    vacation_home_address.city = \"Panama City Beach\"\n"
"    vacation_home_address.state = \"FL\"\n"
"    vacation_home_address.zip = \"32407\"\n"
"\n"
"    print(\"The client's main home is in \" + home_address.city)\n"
"    print(\"His vacation home is in \" + vacation_home_address.city)\n"
"\n"
"\n"
"main()"

#: ../../source/chapters/14_classes/classes.rst:251
msgid ""
"Line 11 creates the first instance of ``Address``; line 22 creates the "
"second instance. The variable ``home_address`` points to the first instance "
"and ``vacation_home_address`` points to the second."
msgstr ""
"Zeile 11 erzeugt das erste Exemplar von ``Address`` und Zeile 22 erzeugt das "
"zweite Exemplar. Die Variable ``home_address`` zeigt auf das erste Exemplar "
"und ``vacation_home_address`` zeigt auf das zweite."

#: ../../source/chapters/14_classes/classes.rst:255
msgid ""
"Lines 25-30 set the fields in this new class instance. Line 32 prints the "
"city for the home address, because ``home_address`` appears before the dot "
"operator. Line 33 prints the vacation address because "
"``vacation_home_address`` appears before the dot operator."
msgstr ""
"In den Zeilen 25-30 werden die Attribute des neuen Exemplars der Klasse "
"gesetzt. Zeile 32 gibt die Stadt der Heimatadresse aus, weil "
"``home_address`` vor dem Punktoperator erscheint. Zeile 33 gibt die "
"Ferienadresse aus, weil ``vacation_home_address`` vor dem Punktoperator "
"steht."

#: ../../source/chapters/14_classes/classes.rst:260
msgid ""
"In the example Address is called the class because it defines a new "
"classification for a data object. The variables ``home_address`` and "
"``vacation_home_address`` refer to objects because they refer to actual "
"instances of the class ``Address``. A simple definition of an object is that "
"it is an instance of a class. Like \"Bob\" and \"Nancy\" are instances of a "
"Human class."
msgstr ""
"Im Beispiel wird ``Address`` Klasse genannt, weil sie eine neue "
"Klassifikation für das Datenobjekt definiert. Die Variablen ``home_address`` "
"und ``vacation_home_address`` beziehen sich auf zwei tatsächliche Objekte "
"der Klasse ``Address``. Eine einfache Definition eines Objekts ist, dass es "
"ein Exemplar einer Klasse ist, wie \"Bob\" und \"Nancy\" Exemplare der "
"Menschen-Klasse sind."

#: ../../source/chapters/14_classes/classes.rst:267
msgid ""
"By using www.pythontutor.com_ we can `visualize the execution of the code`_ "
"(see below). There are three variables in play. One points to the class "
"definition of ``Address``. The other two variables point to the different "
"address objects and their data."
msgstr ""
"Auf www.pythontutor.com_ können wir unter `visualize the execution of the "
"code`_ (siehe unten) die Ausführung des Programms visualisieren lassen. Es "
"gibt drei Variablen bei der Ausführung. Eine zeigt auf die Definition der "
"Klasse ``Address``. Die anderen beiden Variablen zeigen auf die beiden "
"verschiedenen Adressobjekte und ihre Daten."

#: ../../source/chapters/14_classes/classes.rst:277
msgid ".. image:: chapters/14_classes/two_addresses.png"
msgstr ".. image:: chapters/14_classes/two_addresses.png"

#: ../../source/chapters/14_classes/classes.rst:277
msgid "Two Addresses"
msgstr "Zwei Adressen"

#: ../../source/chapters/14_classes/classes.rst:279
msgid ""
"Putting lots of data fields into a class makes it easy to pass data in and "
"out of a function. In the code below, the function takes in an address as a "
"parameter and prints it out on the screen. It is not necessary to pass "
"parameters for each field of the address."
msgstr ""
"Steckt man viele Attribute in eine Klasse, wird es einfach, Daten in und aus "
"einer Funktion heraus zu geben. Im Code unten, übernimmt die Funktion eine "
"Adresse als Parameter und gibt sie auf dem Bildschirm aus. Es ist nicht "
"nötig, Argumente für jedes einzelne Attribut der Adresse zu übergeben."

#: ../../source/chapters/14_classes/classes.rst:284
msgid ""
"# Print an address to the screen\n"
"def print_address(address):\n"
"    print(address.name)\n"
"    # If there is a line1 in the address, print it\n"
"    if len(address.line1) > 0:\n"
"        print(address.line1)\n"
"    # If there is a line2 in the address, print it\n"
"    if len(address.line2) > 0:\n"
"        print( address.line2 )\n"
"    print(address.city + \", \" + address.state + \" \" + address.zip)\n"
"\n"
"\n"
"def main():\n"
"    print_address(home_address)\n"
"    print()\n"
"    print_address(vacation_home_address)\n"
"\n"
"\n"
"main()"
msgstr ""
"# Print an address to the screen\n"
"def print_address(address):\n"
"    print(address.name)\n"
"    # If there is a line1 in the address, print it\n"
"    if len(address.line1) > 0:\n"
"        print(address.line1)\n"
"    # If there is a line2 in the address, print it\n"
"    if len(address.line2) > 0:\n"
"        print( address.line2 )\n"
"    print(address.city + \", \" + address.state + \" \" + address.zip)\n"
"\n"
"\n"
"def main():\n"
"    print_address(home_address)\n"
"    print()\n"
"    print_address(vacation_home_address)\n"
"\n"
"\n"
"main()"

#: ../../source/chapters/14_classes/classes.rst:309
msgid "Adding Methods to Classes"
msgstr "Methoden zu Klassen hinzufügen"

#: ../../source/chapters/14_classes/classes.rst:315
msgid ""
"In addition to attributes, classes may have methods. A method is a function "
"that exists inside of a class. Expanding the earlier example of a ``Dog`` "
"class from the review problem 1 above, the code below adds a method for a "
"dog barking."
msgstr ""
"Zusätzlich zu Attributen können Klassen Methoden haben. Eine Methode ist "
"eine Funktion die innerhalb einer Klasse existiert. Der Code unten erweitert "
"das frühere Beispiel der ``Dog``-Klasse aus dem Wiederholungsproblem 1 oben "
"um eine Bellen-Methode."

#: ../../source/chapters/14_classes/classes.rst:319
msgid ""
"class Dog():\n"
"    def __init__(self):\n"
"        self.age = 0\n"
"        self.name = \"\"\n"
"        self.weight = 0\n"
"\n"
"    def bark(self):\n"
"        print(\"Woof\")"
msgstr ""
"class Dog():\n"
"    def __init__(self):\n"
"        self.age = 0\n"
"        self.name = \"\"\n"
"        self.weight = 0\n"
"\n"
"    def bark(self):\n"
"        print(\"Woof\")"

#: ../../source/chapters/14_classes/classes.rst:331
msgid ""
"The method definition is contained in lines 7-8 above. Method definitions in "
"a class look almost exactly like function definitions. The big difference is "
"the addition of a parameter ``self`` on line 7. The first parameter of any "
"method in a class must be ``self``. This parameter is required even if the "
"function does not use it."
msgstr ""
"Die Methode steht in den Zeilen 7-8 oben. Definitionen von Methoden in einer "
"Klasse sehen fast genau so aus wie Funktionsdefinitionen. Der große "
"Unterschied ist der zusätzliche Parameter ``self`` in Zeile 7. Der erste "
"Parameter jeder Methode einer Klasse muss immer ``self`` sein. Dieser "
"Parameter ist notwendig, auch wenn die Funktion ihn nicht verwendet."

#: ../../source/chapters/14_classes/classes.rst:337
msgid ""
"Here are the important items to keep in mind when creating methods for "
"classes:"
msgstr ""
"Hier sind die wichtigen Punkte, wenn man Methoden für Klassen erstellt:"

#: ../../source/chapters/14_classes/classes.rst:339
msgid "Attributes should be listed first, methods after."
msgstr "Attribute sollten zuerst aufgeführt werden, die Methoden danach."

#: ../../source/chapters/14_classes/classes.rst:340
msgid "The first parameter of any method must be self."
msgstr "Der erste Parameter jeder Methode muss immer ``self`` sein."

#: ../../source/chapters/14_classes/classes.rst:341
msgid "Method definitions are indented exactly one tab stop."
msgstr "Methodendefinitionen werden genau einen Schritt eingerückt."

#: ../../source/chapters/14_classes/classes.rst:343
msgid ""
"Methods may be called in a manner similar to referencing attributes from an "
"object. See the example code below."
msgstr ""
"Methoden können ähnlich wie Attribute eines Objekts aufgerufen werden. Sieh "
"das Beispiel unten."

#: ../../source/chapters/14_classes/classes.rst:346
msgid ""
"my_dog = Dog()\n"
"\n"
"my_dog.name = \"Spot\"\n"
"my_dog.weight = 20\n"
"my_dog.age = 3\n"
"\n"
"my_dog.bark()"
msgstr ""
"my_dog = Dog()\n"
"\n"
"my_dog.name = \"Spot\"\n"
"my_dog.weight = 20\n"
"my_dog.age = 3\n"
"\n"
"my_dog.bark()"

#: ../../source/chapters/14_classes/classes.rst:357
msgid ""
"Line 1 creates the dog. Lines 3-5 set the attributes of the object. Line 7 "
"calls the ``bark`` function. Note that even through the ``bark`` function "
"has one parameter, ``self``, the call does not pass in anything. This is "
"because the first parameter is assumed to be a reference to the dog object "
"itself. Behind the scenes, Python makes a call that looks like:"
msgstr ""
"Zeile 1 erzeugt den Hund. In den Zeilen 3-5 werden die Attribute gesetzt. "
"Zeile 7 ruft die Methode ``bark`` auf. Beachte, dass obwohl ``bark`` einen "
"Parameter hat, beim Aufruf kein Argument übergeben wird. Die liegt daran, "
"dass der erste Parameter als Referenz auf das ``Dog``-Objekt selbst "
"verwendet wird. Hinter den Kulissen ruft Python das Ganze so auf:"

#: ../../source/chapters/14_classes/classes.rst:363
msgid ""
"# Example, not actually legal\n"
"Dog.bark(my_dog)"
msgstr ""
"# Example, not actually legal\n"
"Dog.bark(my_dog)"

#: ../../source/chapters/14_classes/classes.rst:368
msgid ""
"If the ``bark`` function needs to make reference to any of the attributes, "
"then it does so using the ``self`` reference variable. For example, we can "
"change the ``Dog`` class so that when the dog barks, it also prints out the "
"dog's name. In the code below, the name attribute is accessed using a dot "
"operator and the ``self`` reference."
msgstr ""
"Wenn die ``bark``-Funktion auf eines der Attribute zugreifen will, dann "
"verwendet sie die ``self``-Referenzvariable. So können wir zum Beispiel die "
"Klasse ``Dog`` so anpassen, dass sie, wenn er bellt, auch seinen Namen "
"ausgibt. Im Code unten wird auf das Attribut ``name`` mit dem Punktoperator "
"und die Referenz ``self`` zugegriffen."

#: ../../source/chapters/14_classes/classes.rst:374
msgid ""
"def bark(self):\n"
"    print(\"Woof says\", self.name)"
msgstr ""
"def bark(self):\n"
"    print(\"Woof says\", self.name)"

#: ../../source/chapters/14_classes/classes.rst:379
msgid ""
"Attributes are adjectives, and methods are verbs. The drawing for the class "
"would look like Figure 12.3."
msgstr ""
"Attribute sind Adjektive und Methoden Verben. Eine Zeichnung der Klasse "
"würde wie Abbildung 12.3 aussehen."

#: ../../source/chapters/14_classes/classes.rst:383
msgid ".. image:: chapters/14_classes/dog_2_1.png"
msgstr ".. image:: chapters/14_classes/dog_2_1.png"

#: ../../source/chapters/14_classes/classes.rst:383
msgid "Dog Class"
msgstr "Klasse ``Dog``"

#: ../../source/chapters/14_classes/classes.rst:386
msgid "Example: Ball Class"
msgstr "Beispiel: Ball-Klasse"

#: ../../source/chapters/14_classes/classes.rst:387
msgid ""
"This example code could be used in Python/Arcade to draw a ball. Having all "
"the parameters contained in a class makes data management easier. The "
"diagram for the ``Ball`` class is shown in the figure below."
msgstr ""
"Dieser Beispielcode könnte in Python/Arcade verwendet werden, um einen Ball "
"zu zeichnen. Dadurch, dass alle Parameter in einer Klasse gekapselt sind, "
"wird die Datenverwaltung einfacher. Das Diagramm für die Klasse ``Ball`` ist "
"in der Abbildung unten zu sehen."

#: ../../source/chapters/14_classes/classes.rst:393
msgid ".. image:: chapters/14_classes/ball_2_1.png"
msgstr ".. image:: chapters/14_classes/ball_2_1.png"

#: ../../source/chapters/14_classes/classes.rst:393
msgid "Ball Class"
msgstr "Ball-Klasse"

#: ../../source/chapters/14_classes/classes.rst:395
msgid ""
"class Ball():\n"
"    def __init__(self):\n"
"        # --- Class Attributes ---\n"
"        # Ball position\n"
"        self.x = 0\n"
"        self.y = 0\n"
"\n"
"        # Ball's vector\n"
"        self.change_x = 0\n"
"        self.change_y = 0\n"
"\n"
"        # Ball size\n"
"        self.size = 10\n"
"\n"
"        # Ball color\n"
"        self.color = [255,255,255]\n"
"\n"
"    # --- Class Methods ---\n"
"    def move(self):\n"
"        self.x += self.change_x\n"
"        self.y += self.change_y\n"
"\n"
"    def draw(self):\n"
"        arcade.draw_circle_filled(self.x, self.y, self.size, self.color )"
msgstr ""
"class Ball():\n"
"    def __init__(self):\n"
"        # --- Class Attributes ---\n"
"        # Ball position\n"
"        self.x = 0\n"
"        self.y = 0\n"
"\n"
"        # Ball's vector\n"
"        self.change_x = 0\n"
"        self.change_y = 0\n"
"\n"
"        # Ball size\n"
"        self.size = 10\n"
"\n"
"        # Ball color\n"
"        self.color = [255,255,255]\n"
"\n"
"    # --- Class Methods ---\n"
"    def move(self):\n"
"        self.x += self.change_x\n"
"        self.y += self.change_y\n"
"\n"
"    def draw(self):\n"
"        arcade.draw_circle_filled(self.x, self.y, self.size, self.color )"

#: ../../source/chapters/14_classes/classes.rst:423
msgid ""
"Below is the code that would go ahead of the main program loop to create a "
"ball and set its attributes:"
msgstr ""
"Unten steht der Code, der vor die Hauptschleife kommen würde, um einen Ball "
"zu erzeugen und seine Attribute zu setzen: "

#: ../../source/chapters/14_classes/classes.rst:426
msgid ""
"the_ball = Ball()\n"
"the_ball.x = 100\n"
"the_ball.y = 100\n"
"the_ball.change_x = 2\n"
"the_ball.change_y = 1\n"
"the_ball.color = [255, 0, 0]"
msgstr ""
"the_ball = Ball()\n"
"the_ball.x = 100\n"
"the_ball.y = 100\n"
"the_ball.change_x = 2\n"
"the_ball.change_y = 1\n"
"the_ball.color = [255, 0, 0]"

#: ../../source/chapters/14_classes/classes.rst:436
msgid "This code would go inside the main loop to move and draw the ball:"
msgstr ""
"Dieser Code würde in die Hauptschleife kommen, um den Ball zu bewegen und zu "
"zeichnen:"

#: ../../source/chapters/14_classes/classes.rst:438
msgid ""
"the_ball.move()\n"
"the_ball.draw()"
msgstr ""
"the_ball.move()\n"
"the_ball.draw()"

#: ../../source/chapters/14_classes/classes.rst:445
msgid "References"
msgstr "Referenzen"

#: ../../source/chapters/14_classes/classes.rst:451
msgid ""
"Here's where we separate the true programmers from the want-to-be's. "
"Understanding class references. Take a look at the following code:"
msgstr ""
"Hier kommt das, was echte Programmierer von Möchte-Gern-Programmierern "
"trennt: Klassenreferenzen zu verstehen. Sieh dir den folgenden Code an:"

#: ../../source/chapters/14_classes/classes.rst:454
msgid ""
"class Person():\n"
"    def __init__(self):\n"
"        self.name = \"\"\n"
"        self.money = 0\n"
"\n"
"\n"
"def main():\n"
"    bob = Person()\n"
"    bob.name = \"Bob\"\n"
"    bob.money = 100\n"
"\n"
"    nancy = Person()\n"
"    nancy.name = \"Nancy\"\n"
"\n"
"    print(bob.name, \"has\", bob.money, \"dollars.\")\n"
"    print(nancy.name, \"has\", nancy.money, \"dollars.\")\n"
"\n"
"\n"
"main()"
msgstr ""
"class Person():\n"
"    def __init__(self):\n"
"        self.name = \"\"\n"
"        self.money = 0\n"
"\n"
"\n"
"def main():\n"
"    bob = Person()\n"
"    bob.name = \"Bob\"\n"
"    bob.money = 100\n"
"\n"
"    nancy = Person()\n"
"    nancy.name = \"Nancy\"\n"
"\n"
"    print(bob.name, \"has\", bob.money, \"dollars.\")\n"
"    print(nancy.name, \"has\", nancy.money, \"dollars.\")\n"
"\n"
"\n"
"main()"

#: ../../source/chapters/14_classes/classes.rst:477
msgid ""
"The code above creates two instances of the ``Person()`` class, and using "
"`www.pythontutor.com`_ we can `visualize the two classes`_ in the figure."
msgstr ""
"Der Code oben erzeugt zwei Exemplare der Klasse ``Person`` und mit `www."
"pythontutor.com`_ können wir die zwei Klassen mit `visualize the two "
"classes`_ in der Abbildung visualisieren."

#: ../../source/chapters/14_classes/classes.rst:484
msgid ".. image:: chapters/14_classes/two_persons.png"
msgstr ".. image:: chapters/14_classes/two_persons.png"

#: ../../source/chapters/14_classes/classes.rst:484
msgid "Two Persons"
msgstr "Zwei Personen"

#: ../../source/chapters/14_classes/classes.rst:486
msgid "The code above has nothing new. But the code below does:"
msgstr "Der Code oben enthält nichts Neues, aber der Code unten schon:"

#: ../../source/chapters/14_classes/classes.rst:488
msgid ""
"class Person():\n"
"    def __init__(self):\n"
"        self.name = \"\"\n"
"        self.money = 0\n"
"\n"
"\n"
"def main():\n"
"    bob = Person()\n"
"    bob.name = \"Bob\"\n"
"    bob.money = 100\n"
"\n"
"    nancy = bob\n"
"    nancy.name = \"Nancy\"\n"
"\n"
"    print(bob.name, \"has\", bob.money, \"dollars.\")\n"
"    print(nancy.name, \"has\", nancy.money, \"dollars.\")\n"
"\n"
"\n"
"main()"
msgstr ""
"class Person():\n"
"    def __init__(self):\n"
"        self.name = \"\"\n"
"        self.money = 0\n"
"\n"
"\n"
"def main():\n"
"    bob = Person()\n"
"    bob.name = \"Bob\"\n"
"    bob.money = 100\n"
"\n"
"    nancy = bob\n"
"    nancy.name = \"Nancy\"\n"
"\n"
"    print(bob.name, \"has\", bob.money, \"dollars.\")\n"
"    print(nancy.name, \"has\", nancy.money, \"dollars.\")\n"
"\n"
"\n"
"main()"

#: ../../source/chapters/14_classes/classes.rst:511
msgid "See the difference on line 10?"
msgstr "Siehst du den Unterschied in Zeile 10?"

#: ../../source/chapters/14_classes/classes.rst:513
msgid ""
"A common misconception when working with objects is to assume that the "
"variable ``bob`` *is* the ``Person`` object. This is not the case. The "
"variable ``bob`` is a *reference* to the ``Person`` object. That is, it "
"stores the memory address of where the object is, and not the object itself."
msgstr ""
"Ein übliches Missverständnis, wenn man mit Objekten arbeitet, ist "
"anzunehmen, dass die Variable ``bob`` das ``Person``-Objekt *ist*. Das ist "
"nicht der Fall. Die Variable ``bob`` ist eine ``Referenz`` (Verweis) auf das "
"``Person``-Objekt. Das heißt, es speichert die Adresse wo sich das Objekt im "
"Speicher befindet und nicht das Objekt selbst."

#: ../../source/chapters/14_classes/classes.rst:518
msgid ""
"If ``bob`` actually was the object, then line 9 could create a *copy* of the "
"object and there would be two objects in existence. The output of the "
"program would show both Bob and Nancy having 100 dollars. But when run, the "
"program outputs the following instead:"
msgstr ""
"Wenn ``bob`` tatsächlich das Objekt wäre, würde Zeile 9 eine *Kopie* des "
"Objekts erzeugen und es gäbe danach zwei Objekte. Das Programm würde sowohl "
"für Bob und Nancy 100 Dollar ausgeben. Wenn das Programm abläuft, gibt es "
"stattdessen das folgende aus:"

#: ../../source/chapters/14_classes/classes.rst:525
msgid ""
"Nancy has 100 dollars.\n"
"Nancy has 100 dollars."
msgstr ""
"Nancy has 100 dollars.\n"
"Nancy has 100 dollars."

#: ../../source/chapters/14_classes/classes.rst:528
msgid ""
"What ``bob`` stores is a *reference* to the object. Besides reference, one "
"may call this *address*, *pointer*, or *handle*. A reference is an address "
"in computer memory for where the object is stored. This address is a "
"hexadecimal number which, if printed out, might look something like "
"``0x1e504``. When line 9 is run, the address is copied rather than the "
"entire object the address points to. See the figure below."
msgstr ""
"Was ``bob`` speichert, ist eine *Referenz* auf das Objekt. Man kann statt "
"Referenz dies auch *Adresse*, *Zeiger* oder *Handle* nennen. Eine Referenz "
"ist die Adresse im Speicher des Rechners, an der das Objekt gespeichert ist. "
"Diese Adresse ist eine hexadezimale Zahl, die, wenn man sie ausgibt, so "
"ähnlich wie ``0x1e504`` aussieht. Wenn die Zeile 9 ausgeführt wird, wird nur "
"die Adresse kopiert und nicht das gesamte Objekt, auf das die Adresse zeigt. "
"Siehe die Abbildung unten."

#: ../../source/chapters/14_classes/classes.rst:537
msgid ".. image:: chapters/14_classes/example1.png"
msgstr ".. image:: chapters/14_classes/example1.png"

#: ../../source/chapters/14_classes/classes.rst:537
msgid "Class References"
msgstr "Klassenreferenzen"

# Add link to pythontutor.com
#: ../../source/chapters/14_classes/classes.rst:539
msgid ""
"We can also run this in www.pythontutor.com to see how both of the variables "
"`are pointing to the same object`_."
msgstr ""
"Wir können dies ebenfalls auf www.pythontutor.com ausführen um zu sehen, "
"dass die Variablen `are pointing to the same object`_."

#: ../../source/chapters/14_classes/classes.rst:545
msgid ".. image:: chapters/14_classes/one_person.png"
msgstr ".. image:: chapters/14_classes/one_person.png"

#: ../../source/chapters/14_classes/classes.rst:545
msgid "One Person, Two Pointers"
msgstr "Eine Person - zwei Zeiger"

#: ../../source/chapters/14_classes/classes.rst:548
msgid "Functions and References"
msgstr "Funktionen und Referenzen"

#: ../../source/chapters/14_classes/classes.rst:549
msgid ""
"Look at the code example below. Line 1 creates a function that takes in a "
"number as a parameter. The variable ``money`` is a variable that contains a "
"copy of the data that was passed in. Adding 100 to that number does not "
"change the number that was stored in ``bob.money`` on line 11. Thus, the "
"print statement on line 14 prints out 100, and not 200."
msgstr ""
"Sieh dir das Codebeispiel unten an. Zeile 1 erzeugt eine Funktion, die eine "
"Zahl als Parameter übernimmt. Die Variable ``money`` ist eine Variable, die "
"eine Kopie der Daten enthält, die übergeben wurden. 100 zu der Zahl zu "
"addieren verändert nicht die Zahl, die in ``bob.money`` in Zeile 11 "
"gespeichert wurde. Die ``print``-Anweisung gibt deshalb 100 statt 200 aus."

#: ../../source/chapters/14_classes/classes.rst:555
msgid ""
"def give_money1(money):\n"
"    money += 100\n"
"\n"
"\n"
"class Person():\n"
"    def __init__(self):\n"
"        self.name = \"\"\n"
"        self.money = 0\n"
"\n"
"\n"
"def main():\n"
"    bob = Person()\n"
"    bob.name = \"Bob\"\n"
"    bob.money = 100\n"
"\n"
"    give_money1(bob.money)\n"
"    print(bob.money)\n"
"\n"
"main()"
msgstr ""
"def give_money1(money):\n"
"    money += 100\n"
"\n"
"\n"
"class Person():\n"
"    def __init__(self):\n"
"        self.name = \"\"\n"
"        self.money = 0\n"
"\n"
"\n"
"def main():\n"
"    bob = Person()\n"
"    bob.name = \"Bob\"\n"
"    bob.money = 100\n"
"\n"
"    give_money1(bob.money)\n"
"    print(bob.money)\n"
"\n"
"main()"

#: ../../source/chapters/14_classes/classes.rst:578
msgid ""
"`Running on PythonTutor`_ we see that there are two instances of the "
"``money`` variable. One is a copy and local to the give_money1 function."
msgstr ""
"`Running on PythonTutor`_ sehen wir, dass es zwei Exemplare der Variable "
"``money`` gibt. Eine ist eine Kopie und lokal in der Funktion ``give_money`` "
"verfügbar."

#: ../../source/chapters/14_classes/classes.rst:585
msgid ".. image:: chapters/14_classes/function_references_1.png"
msgstr ".. image:: chapters/14_classes/function_references_1.png"

#: ../../source/chapters/14_classes/classes.rst:585
#: ../../source/chapters/14_classes/classes.rst:608
msgid "Function References"
msgstr "Funktionsreferenzen"

#: ../../source/chapters/14_classes/classes.rst:587
msgid ""
"Look at the additional code below. This code does cause ``bob.money`` to "
"increase and the ``print`` statement to print 200."
msgstr ""
"Sieh dir den zusätzlichen Code unten an. Dieser Code sorgt dafür, dass sich "
"``bob.money`` erhöht und die ``print``-Anweisung gibt 200 aus."

#: ../../source/chapters/14_classes/classes.rst:591
msgid ""
"def give_money2(person):\n"
"    person.money += 100\n"
"\n"
"give_money2(bob)\n"
"print(bob.money)"
msgstr ""
"def give_money2(person):\n"
"    person.money += 100\n"
"\n"
"give_money2(bob)\n"
"print(bob.money)"

#: ../../source/chapters/14_classes/classes.rst:600
msgid ""
"Why is this? Because ``person`` contains a copy of the memory address of the "
"object, not the actual object itself. One can think of it as a bank account "
"number. The function has a copy of the bank account number, not a copy of "
"the whole bank account. So using the copy of the bank account number to "
"deposit 100 dollars causes Bob's bank account balance to go up."
msgstr ""
"Warum ist das so? Weil ``person`` eine Kopie der Speicheradresse des Objekts "
"und nicht das tatsächliche Objekt ist. Man kann sich das wie eine "
"Kontonummer vorstellen. Die Funktion hat eine Kopie der Kontonummer und "
"nicht eine Kopie des gesamten Bankkontos. So kann man die Kontonummer "
"verwenden, um 100 Dollar auf Bobs Bankkonto zu überweisen und Bobs "
"Bankguthaben erhöht sich um 100 Dollar."

#: ../../source/chapters/14_classes/classes.rst:608
msgid ".. image:: chapters/14_classes/function_references_2.png"
msgstr ".. image:: chapters/14_classes/function_references_2.png"

#: ../../source/chapters/14_classes/classes.rst:610
msgid ""
"Arrays work the same way. A function that takes in an array (list) as a "
"parameter and modifies values in that array will be modifying the same array "
"that the calling code created. The address of the array is copied, not the "
"entire array."
msgstr ""
"Arrays funktionieren auf dieselbe Art. Eine Funktion, die ein Array (Liste) "
"als Parameter übernimmt und die Werte in diesem Array verändert, wird das "
"gleiche Array verwenden, das der aufrufende Code erzeugt hat. Die Adresse "
"des Arrays wird kopiert und nicht das gesamte Array."

#: ../../source/chapters/14_classes/classes.rst:616
#: ../../source/chapters/14_classes/classes.rst:757
msgid "Review Questions"
msgstr "Wiederholungsfragen"

#: ../../source/chapters/14_classes/classes.rst:618
msgid ""
"Create a class called ``Cat``. Give it attributes for name, color, and "
"weight. Give it a method called ``meow``."
msgstr ""
"Erstelle eine Klasse ``Cat``. Gib ihr Attribute für Name, Farbe und Gewicht. "
"Gib ihr eine Methode ``meow`` genannt."

#: ../../source/chapters/14_classes/classes.rst:620
msgid ""
"Create an instance of the cat class, set the attributes, and call the "
"``meow`` method."
msgstr ""
"Erzeuge ein Exemplar der Klasse ``Cat``, setze die Attribute und rufe die "
"Methode ``meow`` auf."

#: ../../source/chapters/14_classes/classes.rst:622
msgid ""
"Create a class called ``Monster``. Give it an attribute for name and an "
"integer attribute for health. Create a method called ``decrease_health`` "
"that takes in a parameter amount and decreases the health by that much. "
"Inside that method, print that the animal died if health goes below zero."
msgstr ""
"Erstelle eine Klasse ``Monster``. Gib ihr ein Attribut für den Namen und ein "
"Ganzzahl-Attribut für Gesundheitszustand. Erstelle eine Methode "
"``decrease_health``, die einen Parameter ``amount`` hat und das den "
"Gesundheitszustand um diese Anzahl reduziert. Gib in der Methode aus, dass "
"das Tier gestorben ist, wenn der Gesundheitszustand kleiner als Null wird."

#: ../../source/chapters/14_classes/classes.rst:628
msgid "Constructors"
msgstr "Konstruktoren"

#: ../../source/chapters/14_classes/classes.rst:634
msgid ""
"There's a terrible problem with our class for Dog listed below. When we "
"create a dog, by default the dog has no name. Dogs should have names! We "
"should not allow dogs to be born and then never be given a name. Yet the "
"code below allows this to happen, and that dog will never have a name."
msgstr ""
"Es gibt ein schreckliches Problem mit unserer Klasse ``Dog`` unten. Wenn wir "
"einen Hund erzeugen, hat er standardmäßig keinen Namen. Hunde sollten Namen "
"haben! Wir sollten nicht erlauben, dass ein Hund geworfen wird und niemals "
"einen Namen bekommt. Der Code unten erlaubt dies jedoch und dieser Hund wird "
"nie einen Namen bekommen."

#: ../../source/chapters/14_classes/classes.rst:636
msgid ""
"class Dog():\n"
"    def __init__(self):\n"
"        self.name = \"\"\n"
"\n"
"\n"
"def main():\n"
"    my_dog = Dog()\n"
"\n"
"\n"
"main()"
msgstr ""
"class Dog():\n"
"    def __init__(self):\n"
"        self.name = \"\"\n"
"\n"
"\n"
"def main():\n"
"    my_dog = Dog()\n"
"\n"
"\n"
"main()"

#: ../../source/chapters/14_classes/classes.rst:650
msgid ""
"Python doesn't want this to happen. That's why Python classes have a special "
"function that is called any time an instance of that class is created. By "
"adding a function called a constructor, a programmer can add code that is "
"automatically run each time an instance of the class is created. See the "
"example constructor code below:"
msgstr ""
"Python möchte nicht, dass dies passiert. Deshalb haben Python-Klassen eine "
"spezielle Funktion, die immer aufgerufen wird, wenn ein Exemplar der Klasse "
"erzeugt wird. Durch Hinzufügen einer Konstruktor genannten Funktion, kann "
"ein Programmierer Code hinzufügen, der bei jeder Erstellung eines Exemplars "
"der Klasse automatisch aufgerufen wird. Siehe den folgenden Beispiel-"
"Konstruktorcode:"

#: ../../source/chapters/14_classes/classes.rst:657
msgid "Example of a class with a constructor"
msgstr "Beispiel einer Klasse mit Konstruktor"

#: ../../source/chapters/14_classes/classes.rst:657
msgid ""
"class Dog():\n"
"    def __init__(self):\n"
"        \"\"\" Constructor. Called when creating an object of this type. "
"\"\"\"\n"
"        self.name = \"\"\n"
"        print(\"A new dog is born!\")\n"
"\n"
"\n"
"def main():\n"
"    # This creates the dog\n"
"    my_dog = Dog()"
msgstr ""
"class Dog():\n"
"    def __init__(self):\n"
"        \"\"\" Constructor. Called when creating an object of this type. "
"\"\"\"\n"
"        self.name = \"\"\n"
"        print(\"A new dog is born!\")\n"
"\n"
"\n"
"def main():\n"
"    # This creates the dog\n"
"    my_dog = Dog()"

#: ../../source/chapters/14_classes/classes.rst:672
msgid ""
"The constructor starts on line 2. It must be named ``__init__``. There are "
"two underscores before the init, and two underscores after. A common mistake "
"is to only use one."
msgstr ""
"Der Konstruktor beginnt in Zeile 2. Er muss ``__init__`` heißen. Es gibt "
"zwei Unterstriche vor init und zwei danach. Ein üblicher Fehler ist nur "
"einen zu schreiben."

#: ../../source/chapters/14_classes/classes.rst:676
msgid ""
"The constructor must take in self as the first parameter just like other "
"methods in a class. When the program is run, it will print::"
msgstr ""
"Der Konstruktor muss ``self`` als ersten Parameter haben, genau wie alle "
"anderen Methoden einer Klasse. Wenn das Programm ausgeführt wird, wird "
"Folgendes ausgegeben:"

# There is something wrong. The formatting instruction is in the product.
#: ../../source/chapters/14_classes/classes.rst:679
msgid ".. code-block:: text"
msgstr ".. code-block:: text"

#: ../../source/chapters/14_classes/classes.rst:681
msgid "A new dog is born!"
msgstr "Ein neuer Hund wird geworfen!"

#: ../../source/chapters/14_classes/classes.rst:683
msgid ""
"When a Dog object is created on line 8, the ``__init__`` function is "
"automatically called and the message is printed to the screen."
msgstr ""
"Wenn in Zeile 8 ein ``Dog``-Objekt erstellt wird, wird automatisch die "
"Funktion ``__init__`` aufgerufen und die Nachricht auf dem Bildschirm "
"ausgegeben."

#: ../../source/chapters/14_classes/classes.rst:686
msgid "Avoid This Mistake"
msgstr "Vermeide diesen Fehler"

#: ../../source/chapters/14_classes/classes.rst:688
msgid ""
"Put everything for a method into just one definition. Don't define it twice. "
"For example:"
msgstr ""
"Schreibe alles für eine Methode in eine Definition. Definiere es nicht "
"zweimal. Zum Beispiel:"

#: ../../source/chapters/14_classes/classes.rst:691
msgid ""
"# Wrong:\n"
"class Dog():\n"
"    def __init__(self):\n"
"        self.age = 0\n"
"        self.name = \"\"\n"
"        self.weight = 0\n"
"\n"
"    def __init__(self):\n"
"        print(\"New dog!\")"
msgstr ""
"# Wrong:\n"
"class Dog():\n"
"    def __init__(self):\n"
"        self.age = 0\n"
"        self.name = \"\"\n"
"        self.weight = 0\n"
"\n"
"    def __init__(self):\n"
"        print(\"New dog!\")"

#: ../../source/chapters/14_classes/classes.rst:704
msgid ""
"The computer will just ignore the first ``__init__`` and go with the last "
"definition. Instead do this:"
msgstr ""
"Der Computer ignoriert einfach das erste `` __init__`` und geht zur letzten "
"Definition über. Schreibe stattdessen folgendes:"

#: ../../source/chapters/14_classes/classes.rst:707
msgid ""
"# Correct:\n"
"class Dog():\n"
"    def __init__(self):\n"
"        self.age = 0\n"
"        self.name = \"\"\n"
"        self.weight = 0\n"
"        print(\"New dog!\")"
msgstr ""
"# Correct:\n"
"class Dog():\n"
"    def __init__(self):\n"
"        self.age = 0\n"
"        self.name = \"\"\n"
"        self.weight = 0\n"
"        print(\"New dog!\")"

#: ../../source/chapters/14_classes/classes.rst:718
msgid ""
"A constructor can be used for initializing and setting data for the object. "
"The example Dog class above still allows the name attribute to be left blank "
"after the creation of the dog object. How do we keep this from happening? "
"Many objects need to have values right when they are created. The "
"constructor function can be used to make this happen. See the code below:"
msgstr ""
"Ein Konstruktor kann zum Initialisieren und Festlegen von Daten für das "
"Objekt verwendet werden. In der obigen Beispielklasse ``Dog`` kann das "
"Attribut ``name`` nach der Erstellung des Hundeobjekts weiterhin leer "
"gelassen werden. Wie verhindern wir das? Viele Objekte müssen zum Zeitpunkt "
"der Erstellung über Werte verfügen. Die Konstruktorfunktion kann verwendet "
"werden, um dies zu erreichen. Siehe den Code unten:"

#: ../../source/chapters/14_classes/classes.rst:724
msgid "Constructor that takes in data to initialize the class"
msgstr "Konstruktor, der Daten übernimmt um das Exemplar zu initialisieren"

#: ../../source/chapters/14_classes/classes.rst:724
msgid ""
"class Dog():\n"
"\n"
"    def __init__(self, new_name):\n"
"        \"\"\" Constructor. \"\"\"\n"
"        self.name = new_name\n"
"\n"
"\n"
"def main():\n"
"    # This creates the dog\n"
"    my_dog = Dog(\"Spot\")\n"
"\n"
"    # Print the name to verify it was set\n"
"    print(my_dog.name)\n"
"\n"
"    # This line will give an error because\n"
"    # a name is not passed in.\n"
"    her_dog = Dog()\n"
"\n"
"main()"
msgstr ""
"class Dog():\n"
"\n"
"    def __init__(self, new_name):\n"
"        \"\"\" Constructor. \"\"\"\n"
"        self.name = new_name\n"
"\n"
"\n"
"def main():\n"
"    # This creates the dog\n"
"    my_dog = Dog(\"Spot\")\n"
"\n"
"    # Print the name to verify it was set\n"
"    print(my_dog.name)\n"
"\n"
"    # This line will give an error because\n"
"    # a name is not passed in.\n"
"    her_dog = Dog()\n"
"\n"
"main()"

#: ../../source/chapters/14_classes/classes.rst:748
msgid ""
"On line 3 the constructor function now has an additional parameter named "
"``new_name``. The value of this parameter is used to set the name attribute "
"in the ``Dog`` class on line 8. It is no longer possible to create a ``Dog`` "
"class without a name. The code on line 15 tries this. It will cause a Python "
"error and it will not run. A common mistake is to name the parameter of the "
"``__init__`` function the same as the attribute and assume that the values "
"will automatically synchronize. This does not happen."
msgstr ""
"In Zeile 3 hat die Konstruktorfunktion jetzt einen zusätzlichen Parameter "
"mit dem Namen ``new_name``. Der Wert dieses Parameters wird verwendet, um "
"das Attribut ``name`` in der Klasse ``Dog`` in Zeile 8 festzulegen. Es ist "
"nicht mehr möglich, eine Klasse ``Dog`` ohne Namen zu erstellen. Der Code in "
"Zeile 15 versucht dies. Er wird einen Python-Fehler verursachen und nicht "
"ausgeführt. Ein häufiger Fehler besteht darin, den Parameter der Funktion "
"``__init__`` mit dem Attribut zu benennen und anzunehmen, dass die Werte "
"automatisch synchronisiert werden. Das passiert nicht."

#: ../../source/chapters/14_classes/classes.rst:759
msgid "Should class names begin with an upper or lower case letter?"
msgstr "Sollten Klassennamen mit einem Groß- oder Kleinbuchstaben beginnen?"

#: ../../source/chapters/14_classes/classes.rst:760
msgid "Should method names begin with an upper or lower case letter?"
msgstr "Sollten Methodennamen mit einem Groß- oder Kleinbuchstaben beginnen?"

#: ../../source/chapters/14_classes/classes.rst:761
msgid "Should attribute names begin with an upper or lower case letter?"
msgstr "Sollten Attributnamen mit einem Groß- oder Kleinbuchstaben beginnen?"

#: ../../source/chapters/14_classes/classes.rst:762
msgid "Which should be listed first in a class, attributes or methods?"
msgstr ""
"Was sollte zuerst in einer Klasse aufgeführt werden, Attribute oder Methoden?"

#: ../../source/chapters/14_classes/classes.rst:763
msgid "What are other names for a reference?"
msgstr "Welche anderen Bezeichnungen gibt es für \"Referenz\"?"

#: ../../source/chapters/14_classes/classes.rst:764
msgid "What is another name for instance variable?"
msgstr "Wie nennt man Variablen eines Exemplars einer Klasse?"

#: ../../source/chapters/14_classes/classes.rst:765
msgid "What is the name for an instance of a class?"
msgstr "Wie nennt man ein Exemplar einer Klasse?"

#: ../../source/chapters/14_classes/classes.rst:766
msgid ""
"Create a class called Star that will print out \"A star is born!\" every "
"time it is created."
msgstr ""
"Erstelle eine Klasse mit dem Namen Star, die \"Ein Stern ist geboren!\" "
"jedes Mal ausgibt, wenn ein Exemplar erzeugt wird."

#: ../../source/chapters/14_classes/classes.rst:768
msgid ""
"Create a class called Monster with attributes for health and a name. Add a "
"constructor to the class that sets the health and name of the object with "
"data passed in as parameters."
msgstr ""
"Erstelle eine Klasse namens Monster mit Attributen für Gesundheit und Namen. "
"Füge der Klasse einen Konstruktor hinzu, der den Zustand und den Namen des "
"Objekts mit den als Parameter übergebenen Daten festlegt."

#: ../../source/chapters/14_classes/classes.rst:773
msgid "Inheritance"
msgstr "Vererbung"

#: ../../source/chapters/14_classes/classes.rst:780
msgid ""
"Another powerful feature of using classes and objects is the ability to make "
"use of *inheritance*. It is possible to create a class and inherit all of "
"the attributes and methods of a *parent class*."
msgstr ""
"Ein weiteres leistungsfähiges Merkmal der Verwendung von Klassen und "
"Objekten ist die Möglichkeit, *Vererbung* zu nutzen. Es ist möglich, eine "
"Klasse zu erstellen und alle Attribute und Methoden einer *Elternklasse* zu "
"erben."

#: ../../source/chapters/14_classes/classes.rst:784
msgid ""
"For example, a program may create a class called ``Boat`` which has all the "
"attributes needed to represent a boat in a game:"
msgstr ""
"Zum Beispiel kann ein Programm eine Klasse namens ``Boat`` erstellen, die "
"alle Attribute besitzt, die benötigt werden, um ein Boot in einem Spiel "
"darzustellen:"

#: ../../source/chapters/14_classes/classes.rst:787
msgid "Class definition for a boat"
msgstr "Klassendefinition eines Boots"

#: ../../source/chapters/14_classes/classes.rst:787
msgid ""
"class Boat():\n"
"    def __init__(self):\n"
"        self.tonnage = 0\n"
"        self.name = \"\"\n"
"        self.is_docked = True\n"
"\n"
"    def dock(self):\n"
"        if self.is_docked:\n"
"            print(\"You are already docked.\")\n"
"        else:\n"
"            self.is_docked = True\n"
"            print(\"Docking\")\n"
"\n"
"    def undock(self):\n"
"        if not self.is_docked:\n"
"            print(\"You aren't docked.\")\n"
"        else:\n"
"            self.is_docked = False\n"
"            print(\"Undocking\")"
msgstr ""
"class Boat():\n"
"    def __init__(self):\n"
"        self.tonnage = 0\n"
"        self.name = \"\"\n"
"        self.is_docked = True\n"
"\n"
"    def dock(self):\n"
"        if self.is_docked:\n"
"            print(\"You are already docked.\")\n"
"        else:\n"
"            self.is_docked = True\n"
"            print(\"Docking\")\n"
"\n"
"    def undock(self):\n"
"        if not self.is_docked:\n"
"            print(\"You aren't docked.\")\n"
"        else:\n"
"            self.is_docked = False\n"
"            print(\"Undocking\")"

#: ../../source/chapters/14_classes/classes.rst:811
msgid "To test out our code:"
msgstr "So testen wir unseren Code:"

#: ../../source/chapters/14_classes/classes.rst:813
msgid "Floating our boat"
msgstr "Unser Boot schwimmen lassen"

#: ../../source/chapters/14_classes/classes.rst:813
msgid ""
"b = Boat()\n"
"\n"
"b.dock()\n"
"b.undock()\n"
"b.undock()\n"
"b.dock()\n"
"b.dock()"
msgstr ""
"b = Boat()\n"
"\n"
"b.dock()\n"
"b.undock()\n"
"b.undock()\n"
"b.dock()\n"
"b.dock()"

#: ../../source/chapters/14_classes/classes.rst:825
msgid "The output:"
msgstr "Die Ausgabe:"

#: ../../source/chapters/14_classes/classes.rst:827
msgid ""
"You are already docked.\n"
"Undocking\n"
"You aren't docked.\n"
"Docking\n"
"You are already docked."
msgstr ""
"You are already docked.\n"
"Undocking\n"
"You aren't docked.\n"
"Docking\n"
"You are already docked."

#: ../../source/chapters/14_classes/classes.rst:835
msgid ""
"(If you watch the video for this section of the class, you'll note that the "
"\"Boat\" class in the video doesn't actually run. The code above has been "
"corrected but I haven't fixed the video. Use this as a reminder, no matter "
"how simple the code and how experienced the developer, test your code before "
"you deliver it!)"
msgstr ""
"(Wenn du dir das Video für diesen Abschnitt des Kurses ansiehst, wirst du "
"feststellen, dass die \"Boot\" -Klasse im Video nicht tatsächlich ausgeführt "
"wird. Der obige Code wurde korrigiert, aber ich habe das Video nicht "
"repariert. Verwende dies als Warnung, egal wie einfach der Code ist und wie "
"erfahren der Entwickler ist, testen Sie Ihren Code, bevor du ihn "
"auslieferst!)"

#: ../../source/chapters/14_classes/classes.rst:841
msgid ""
"Our program also needs a submarine. Our submarine can do everything a boat "
"can, plus we need a command for ``submerge``. Without inheritance we have "
"two options."
msgstr ""
"Unser Programm braucht auch ein U-Boot. Unser U-Boot kann alles, was ein "
"Boot kann, und wir brauchen ein Kommando für ``submerge`` (tauchen). Ohne "
"Vererbung haben wir zwei Möglichkeiten."

#: ../../source/chapters/14_classes/classes.rst:844
msgid ""
"One, add the ``submerge()`` command to our boat. This isn't a great idea "
"because we don't want to give the impression that our boats normally "
"submerge."
msgstr ""
"Erstens, füge unserem Boot die Anweisung ``submerge`` hinzu. Dies ist keine "
"gute Idee, da wir nicht den Eindruck erwecken möchten, dass unsere Boote "
"normalerweise unter Wasser sind."

#: ../../source/chapters/14_classes/classes.rst:846
msgid ""
"Two, we could create a copy of the ``Boat`` class and call it ``Submarine``. "
"In this class we'd add the ``submerge()`` command. This is easy at first, "
"but things become harder if we change the ``Boat`` class. A programmer would "
"need to remember that we'd need to change not only the ``Boat`` class, but "
"also make the same changes to the ``Submarine`` class. Keeping this code "
"synchronized is time consuming and error-prone."
msgstr ""
"Zweitens könnten wir eine Kopie der Klasse ``Boat`` erstellen und sie "
"``Submarine`` nennen. In dieser Klasse würden wir die Anweisung ``submerge`` "
"hinzufügen. Das ist zunächst einfach, aber es wird schwieriger, wenn wir die "
"Bootsklasse wechseln. Ein Programmierer müsste sich daran erinnern, dass wir "
"nicht nur die Klasse ``Boat`` ändern müssen, sondern auch die Klasse "
"``Submarine``. Das Synchronisieren dieses Codes ist zeitaufwändig und "
"fehleranfällig."

#: ../../source/chapters/14_classes/classes.rst:853
msgid ""
"Luckily, there is a better way. Our program can create *child classes* that "
"will inherit all the attributes and methods of the *parent class*. The child "
"classes may then add fields and methods that correspond to their needs. For "
"example:"
msgstr ""
"Zum Glück gibt es einen besseren Weg. Unser Programm kann *Kindklassen* "
"erstellen, die alle Attribute und Methoden der *Elternklasse* erben. Die "
"Kindklassen können dann Attribute und Methoden hinzufügen, die ihren "
"Anforderungen entsprechen. Zum Beispiel:"

#: ../../source/chapters/14_classes/classes.rst:858
msgid ""
"class Submarine(Boat):\n"
"    def submerge(self):\n"
"        print(\"Submerge!\")"
msgstr ""
"class Submarine(Boat):\n"
"    def submerge(self):\n"
"        print(\"Submerge!\")"

#: ../../source/chapters/14_classes/classes.rst:865
msgid ""
"Line 1 is the important part. Just by putting ``Boat`` in between the "
"parentheses during the class declaration, we have automatically picked up "
"every attribute and method that is in the Boat class. If we update ``Boat``, "
"then the child class ``Submarine`` will automatically get these updates. "
"Inheritance is that easy!"
msgstr ""
"Zeile 1 ist der wichtige Teil. Nur dadurch, dass wir ``Boat`` während der "
"Klassendeklaration in die Klammern geschrieben haben, haben wir jedes "
"Attribut und jede Methode in der Klasse ``Boat`` automatisch aufgenommen. "
"Wenn wir ``Boat`` aktualisieren, erhält die Kindklasse ``Submarine`` diese "
"Änderungen automatisch. Vererbung ist so einfach!"

#: ../../source/chapters/14_classes/classes.rst:871
msgid "The next code example is diagrammed out in the figure below."
msgstr "Das nächste Codebeispiel wird in der Abbildung unten dargestellt."

#: ../../source/chapters/14_classes/classes.rst:876
msgid ".. image:: chapters/14_classes/person_1.png"
msgstr ".. image:: chapters/14_classes/person_1.png"

#: ../../source/chapters/14_classes/classes.rst:878
msgid "Person, Employee, Customer Classes Examples"
msgstr "Beispiel Person-, Mitarbeiter- und Kunden-Klassen"

#: ../../source/chapters/14_classes/classes.rst:878
msgid ""
"class Person():\n"
"    def __init__(self):\n"
"        self.name = \"\"\n"
"\n"
"class Employee(Person):\n"
"    def __init__(self):\n"
"        # Call the parent/super class constructor first\n"
"        super().__init__()\n"
"\n"
"        # Now set up our variables\n"
"        self.job_title = \"\"\n"
"\n"
"class Customer(Person):\n"
"    def __init__(self):\n"
"        super().__init__()\n"
"        self.email = \"\"\n"
"\n"
"def main():\n"
"    john_smith = Person()\n"
"    john_smith.name = \"John Smith\"\n"
"\n"
"    jane_employee = Employee()\n"
"    jane_employee.name = \"Jane Employee\"\n"
"    jane_employee.job_title = \"Web Developer\"\n"
"\n"
"    bob_customer = Customer()\n"
"    bob_customer.name = \"Bob Customer\"\n"
"    bob_customer.email = \"send_me@spam.com\"\n"
"\n"
"main()"
msgstr ""
"class Person():\n"
"    def __init__(self):\n"
"        self.name = \"\"\n"
"\n"
"class Employee(Person):\n"
"    def __init__(self):\n"
"        # Call the parent/super class constructor first\n"
"        super().__init__()\n"
"\n"
"        # Now set up our variables\n"
"        self.job_title = \"\"\n"
"\n"
"class Customer(Person):\n"
"    def __init__(self):\n"
"        super().__init__()\n"
"        self.email = \"\"\n"
"\n"
"def main():\n"
"    john_smith = Person()\n"
"    john_smith.name = \"John Smith\"\n"
"\n"
"    jane_employee = Employee()\n"
"    jane_employee.name = \"Jane Employee\"\n"
"    jane_employee.job_title = \"Web Developer\"\n"
"\n"
"    bob_customer = Customer()\n"
"    bob_customer.name = \"Bob Customer\"\n"
"    bob_customer.email = \"send_me@spam.com\"\n"
"\n"
"main()"

#: ../../source/chapters/14_classes/classes.rst:914
msgid ""
"By placing ``Person`` between the parentheses on lines 5 and 13, the "
"programmer has told the computer that Person is a parent class to both "
"``Employee`` and ``Customer``. This allows the program to set the name "
"attribute on lines 19 and 22."
msgstr ""
"Durch das Platzieren von ``Person`` zwischen den Klammern in den Zeilen 5 "
"und 13 hat der Programmierer dem Computer mitgeteilt, dass ``Person`` eine "
"Elternklasse ist, und zwar sowohl für ``Employee`` als auch ``Customer``. "
"Dadurch kann das Programm das Attribut ``name`` in den Zeilen 19 und 22 "
"festlegen."

#: ../../source/chapters/14_classes/classes.rst:919
msgid ""
"Methods are also inherited. Any method the parent has, the child class will "
"have too. But what if we have a method in both the child and parent class?"
msgstr ""
"Methoden werden ebenfalls vererbt. Jede Methode, die die Elternklasse hat, "
"wird auch die Kindklasse haben. Aber was ist, wenn wir sowohl in der Kind- "
"als auch in der Elternklasse eine Methode haben, die den gleichen Namen hat?"

#: ../../source/chapters/14_classes/classes.rst:922
msgid ""
"We have two options. We can run them both with ``super()`` keyword. Using "
"``super()`` followed by a dot operator, and then finally a method name "
"allows you to call the parent's version of the method."
msgstr ""
"Wir haben zwei Möglichkeiten. Wir können die Methode der Elternklasse dem "
"Schlüsselwort ``super`` in der Methode der Kindklasse aufrufen. Mit "
"``super`` gefolgt von einem Punktoperator und schließlich einem "
"Methodennamen kann man die Methode der Elternklasse aufrufen."

#: ../../source/chapters/14_classes/classes.rst:926
msgid ""
"The code above shows the first option using ``super`` where we run not only "
"the child constructor but also the parent constructor."
msgstr ""
"Der obige Code zeigt die erste Option mit ``super``, bei der wir nicht nur "
"den Konstruktor der Kindklasse, sondern auch den Konstruktor der "
"Elternklasse ausführen."

#: ../../source/chapters/14_classes/classes.rst:929
msgid ""
"If you are writing a method for a child and want to call a parent method, "
"normally it will be the first statement in the child method. Notice how it "
"is in the example above."
msgstr ""
"Wenn Sie eine Methode für eine Kindklasse schreiben und eine Methode der "
"Elternklasse aufrufen möchten, ist dies normalerweise die erste Anweisung in "
"der untergeordneten Methode. Beachten Sie, wie es im obigen Beispiel ist."

#: ../../source/chapters/14_classes/classes.rst:933
msgid ""
"All constructors should call the parent constructor because then you'd have "
"a child without a parent and that is just sad. In fact, some languages force "
"this rule, but Python doesn't."
msgstr ""
"Alle Konstruktoren sollten den Konstruktor der Elternklasse aufrufen, da man "
"sonst ein Kind ohne Eltern hätte, und das ist nur traurig. Einige Sprachen "
"erzwingen diese Regel, Python jedoch nicht."

#: ../../source/chapters/14_classes/classes.rst:937
msgid ""
"The second option? Methods may be overridden by a child class to provide "
"different functionality. The example below shows both options. The "
"``Employee.report`` overrides the ``Person.report`` because it never calls "
"and runs the parent ``report`` method. The ``Customer`` report does call the "
"parent and the report method in ``Customer`` adds to the ``Person`` "
"functionality."
msgstr ""
"Die zweite Möglichkeit? Methoden können von einer Kindklasse überschrieben "
"werden, um andere Funktionen bereitzustellen. Das folgende Beispiel zeigt "
"beide Optionen. Der ``Employee.report`` überschreibt den ``Person.report``, "
"da er niemals die übergeordnete ``report``-Methode aufruft und ausführt. Der "
"Bericht ``Kunde`` ruft das übergeordnete Element auf, und die "
"Berichtsmethode in ``Kunde`` erweitert die Funktionalität von ``Person``."

#: ../../source/chapters/14_classes/classes.rst:944
msgid "Overriding constructors"
msgstr "Konstruktoren überschreiben"

#: ../../source/chapters/14_classes/classes.rst:944
msgid ""
"class Person():\n"
"    def __init__(self):\n"
"        self.name = \"\"\n"
"\n"
"    def report(self):\n"
"        # Basic report\n"
"        print(\"Report for\", self.name)\n"
"\n"
"class Employee(Person):\n"
"    def __init__(self):\n"
"        # Call the parent/super class constructor first\n"
"        super().__init__()\n"
"\n"
"        # Now set up our variables\n"
"        self.job_title = \"\"\n"
"\n"
"    def report(self):\n"
"        # Here we override report and just do this:\n"
"        print(\"Employee report for\", self.name)\n"
"\n"
"class Customer(Person):\n"
"    def __init__(self):\n"
"        super().__init__()\n"
"        self.email = \"\"\n"
"\n"
"    def report(self):\n"
"        # Run the parent report:\n"
"        super().report()\n"
"        # Now add our own stuff to the end so we do both\n"
"        print(\"Customer e-mail:\", self.email)\n"
"\n"
"def main():\n"
"    john_smith = Person()\n"
"    john_smith.name = \"John Smith\"\n"
"\n"
"    jane_employee = Employee()\n"
"    jane_employee.name = \"Jane Employee\"\n"
"    jane_employee.job_title = \"Web Developer\"\n"
"\n"
"    bob_customer = Customer()\n"
"    bob_customer.name = \"Bob Customer\"\n"
"    bob_customer.email = \"send_me@spam.com\"\n"
"\n"
"    john_smith.report()\n"
"    jane_employee.report()\n"
"    bob_customer.report()\n"
"\n"
"main()"
msgstr ""
"class Person():\n"
"    def __init__(self):\n"
"        self.name = \"\"\n"
"\n"
"    def report(self):\n"
"        # Basic report\n"
"        print(\"Report for\", self.name)\n"
"\n"
"class Employee(Person):\n"
"    def __init__(self):\n"
"        # Call the parent/super class constructor first\n"
"        super().__init__()\n"
"\n"
"        # Now set up our variables\n"
"        self.job_title = \"\"\n"
"\n"
"    def report(self):\n"
"        # Here we override report and just do this:\n"
"        print(\"Employee report for\", self.name)\n"
"\n"
"class Customer(Person):\n"
"    def __init__(self):\n"
"        super().__init__()\n"
"        self.email = \"\"\n"
"\n"
"    def report(self):\n"
"        # Run the parent report:\n"
"        super().report()\n"
"        # Now add our own stuff to the end so we do both\n"
"        print(\"Customer e-mail:\", self.email)\n"
"\n"
"def main():\n"
"    john_smith = Person()\n"
"    john_smith.name = \"John Smith\"\n"
"\n"
"    jane_employee = Employee()\n"
"    jane_employee.name = \"Jane Employee\"\n"
"    jane_employee.job_title = \"Web Developer\"\n"
"\n"
"    bob_customer = Customer()\n"
"    bob_customer.name = \"Bob Customer\"\n"
"    bob_customer.email = \"send_me@spam.com\"\n"
"\n"
"    john_smith.report()\n"
"    jane_employee.report()\n"
"    bob_customer.report()\n"
"\n"
"main()"

#: ../../source/chapters/14_classes/classes.rst:998
msgid "Is-A and Has-A Relationships"
msgstr "Ist-Ein- und Hat-Ein-Beziehungen"

#: ../../source/chapters/14_classes/classes.rst:1000
msgid ""
"Classes have two main types of relationships. They are \"is a\" and \"has a"
"\" relationships."
msgstr ""
"Es gibt zwei Arten von Beziehungen zwischen Klassen. Das sind die \"ist ein"
"\" (englisch \"is a\") und \"hat ein\" (\"has a\")."

#: ../../source/chapters/14_classes/classes.rst:1003
msgid ""
"A parent class should always be a more general, abstract version of the "
"child class. This type of child to parent relationship is called an *is a* "
"relationship. For example, a parent class ``Animal`` could have a child "
"class ``Dog``. The dog *is an* animal. The ``Dog`` class could have a child "
"class Poodle. The poodle *is a* dog, and *is an* animal."
msgstr ""
"Eine Elternklasse sollte immer eine allgemeinere, abstraktere Version der "
"Kindklasse sein. Diese Art der Beziehung zwischen Kind und Eltern wird als "
"*Ist-Ein-Beziehung* bezeichnet. Zum Beispiel könnte eine Elternklasse "
"``Animal`` eine Kindklasse ``Dog`` haben. Der Hund *ist ein* Tier. Die "
"Klasse ``Hund`` könnte eine Kinderklasse ``Poodle`` (Pudel) haben. Der Pudel "
"*ist ein* Hund und *ist ein* Tier."

#: ../../source/chapters/14_classes/classes.rst:1010
msgid ""
"It does not work the other way! A dolphin *is a* mammal, but a mammal is not "
"always a dolphin. So the class ``Dolphin`` should never be a parent to a "
"class ``Mammal``."
msgstr ""
"Anders herum funktioniert es nicht! Ein Delphin ist ein Säugetier, aber ein "
"Säugetier ist nicht immer ein Delphin. Daher sollte die Klasse ``Dolphin`` "
"niemals eine Elternklasse von ``Mammal`` sein."

#: ../../source/chapters/14_classes/classes.rst:1014
msgid ""
"Unrelated items that do not pass the *is a* test should not form parent/"
"child relationships. For example, a class ``Table`` should not be a parent "
"to a class ``Chair`` because a chair is not a table."
msgstr ""
"Nicht verwandte Elemente, die den Test *ist ein* nicht bestehen, sollten "
"keine Eltern-Kind-Beziehungen eingehen. Zum Beispiel sollte eine Klasse "
"``Table`` kein Elternteil einer Klasse ``Chair`` sein, da ein Stuhl kein "
"Tisch ist."

#: ../../source/chapters/14_classes/classes.rst:1018
msgid ""
"The other type of relationship is the *has a* relationship. These "
"relationships are implemented in code by class attributes. A dog has a name, "
"and so the ``Dog`` class has an attribute for name. Likewise a person could "
"have a dog, and that would be implemented by having the Person class have an "
"attribute for ``Dog``. The ``Person`` class would not derive from ``Dog`` "
"because that would be some kind of insult."
msgstr ""
"Die andere Art der Beziehung ist die *Hat-Ein-Beziehung*. Diese Beziehungen "
"werden durch Attribute im Code implementiert. Ein Hund hat einen Namen, und "
"so hat die Klasse ``Dog`` ein Attribut ``name``. Ebenso könnte eine Person "
"einen Hund haben, und dies würde implementiert, indem die Person-Klasse ein "
"Attribut für ``Dog`` hat. Die Klasse ``Person`` würde sich nicht von ``Dog`` "
"ableiten, weil das eine Art Beleidigung wäre."

#: ../../source/chapters/14_classes/classes.rst:1025
msgid "Looking at the prior code example we can see:"
msgstr "Wenn wir uns das vorherige Codebeispiel ansehen, sehen wir:"

#: ../../source/chapters/14_classes/classes.rst:1027
msgid "Employee is a person."
msgstr "Mitarbeiter ist eine Person."

#: ../../source/chapters/14_classes/classes.rst:1028
msgid "Customer is a person."
msgstr "Kunde ist eine Person"

#: ../../source/chapters/14_classes/classes.rst:1029
msgid "Person has a name."
msgstr "Eine Person hat einen Namen."

#: ../../source/chapters/14_classes/classes.rst:1030
msgid "Employee has a job title."
msgstr "Ein Mitarbeiter hat eine Berufsbezeichnung."

#: ../../source/chapters/14_classes/classes.rst:1031
msgid "Customer has an e-mail."
msgstr "Ein Kunde hat eine E-Mail-Adresse."

#: ../../source/chapters/14_classes/classes.rst:1034
msgid "Static Variables vs. Instance Variables"
msgstr "Klassen- und Objektvariablen"

#: ../../source/chapters/14_classes/classes.rst:1036
msgid ""
"The difference between static and instance variables is confusing. "
"Thankfully it isn't necessary to completely understand the difference right "
"now. But if you stick with programming, it will be. Therefore we will "
"briefly introduce it here."
msgstr ""
"Der Unterschied zwischen Klassen- und Objektvariablen ist verwirrend. Zum "
"Glück ist es nicht notwendig, den Unterschied jetzt vollständig zu "
"verstehen. Aber wenn du bei der Programmierung bleibst, wirst du den "
"Unterschied verstehen (müssen). Deshalb werden wir ihn hier kurz vorstellen."

#: ../../source/chapters/14_classes/classes.rst:1041
msgid ""
"There are also some oddities with Python that kept me confused the first "
"several years I've made this book available. So you might see older videos "
"and examples where I get it wrong."
msgstr ""
"Es gibt auch einige Kuriositäten bei Python, die mich in den ersten Jahren, "
"in denen ich dieses Buch zur Verfügung gestellt habe, verwirrt haben. Du "
"siehst also möglicherweise ältere Videos und Beispiele, bei denen ich etwas "
"falsch mache."

#: ../../source/chapters/14_classes/classes.rst:1045
msgid ""
"An *instance variable* is the type of class variable we've used so far. Each "
"instance of the class gets its own value. For example, in a room full of "
"people each person will have their own age. Some of the ages may be the "
"same, but we still need to track each age individually."
msgstr ""
"Eine *Objektvariable* ist die Art von Attributen, die wir bisher verwendet "
"haben. Jedes Exemplar der Klasse erhält einen eigenen Wert. In einem Raum "
"voller Menschen hat zum Beispiel jede Person ihr eigenes Alter. Einige mögen "
"gleich alt sein, aber wir müssen jedes Alter einzeln speichern."

#: ../../source/chapters/14_classes/classes.rst:1050
msgid ""
"With instance variables, we can't just say \"age\" with a room full of "
"people. We need to specify *whose* age we are talking about. Also, if there "
"are no people in the room, then referring to an age when there are no people "
"to have an age makes no sense."
msgstr ""
"Bei Objektvariablen können wir bei einem Raum voller Menschen nicht einfach "
"\"Alter\" sagen. Wir müssen angeben, über *wessen* Alter wir sprechen. "
"Befinden sich keine Personen im Raum, ist es sinnlos, sich auf ihr Alter zu "
"beziehen."

#: ../../source/chapters/14_classes/classes.rst:1055
msgid ""
"With *static variables* the value is the same for every single instance of "
"the class. Even if there are no instances, there still is a value for a "
"static variable. For example, we might have a ``count`` static variable for "
"the number of ``Human`` classes in existence. No humans? The value is zero, "
"but the count variable still exists."
msgstr ""
"Bei *Klassenvariablen* ist der Wert für jedes einzelne Exemplar der Klasse "
"gleich. Auch wenn es keine Exemplare gibt, gibt es immer noch einen Wert für "
"eine Klassenvariable. Zum Beispiel könnten wir eine Klassenvariable "
"``count`` für die Anzahl der existierenden ``Human``-Objekte haben. Keine "
"Menschen? Der Wert ist Null, aber die Zählvariable ist noch vorhanden."

#: ../../source/chapters/14_classes/classes.rst:1061
msgid ""
"In the example below, ``ClassA`` creates an instance variable. ``ClassB`` "
"creates a static variable."
msgstr ""
"Im Beispiel unten erzeugt ``ClassA`` eine Objektvariable und ``ClassB`` eine "
"Klassenvariable."

#: ../../source/chapters/14_classes/classes.rst:1064
msgid ""
"# Example of an instance variable\n"
"class ClassA():\n"
"    def __init__(self):\n"
"        self.y = 3\n"
"\n"
"# Example of a static variable\n"
"class ClassB():\n"
"    x = 7\n"
"\n"
"def main():\n"
"    # Create class instances\n"
"    a = ClassA()\n"
"    b = ClassB()\n"
"\n"
"    # Two ways to print the static variable.\n"
"    # The second way is the proper way to do it.\n"
"    print(b.x)\n"
"    print(ClassB.x)\n"
"\n"
"    # One way to print an instance variable.\n"
"    # The second generates an error, because we don't know what instance\n"
"    # to reference.\n"
"    print(a.y)\n"
"    print(ClassA.y)\n"
"\n"
"main()"
msgstr ""
"# Example of an instance variable\n"
"class ClassA():\n"
"    def __init__(self):\n"
"        self.y = 3\n"
"\n"
"# Example of a static variable\n"
"class ClassB():\n"
"    x = 7\n"
"\n"
"def main():\n"
"    # Create class instances\n"
"    a = ClassA()\n"
"    b = ClassB()\n"
"\n"
"    # Two ways to print the static variable.\n"
"    # The second way is the proper way to do it.\n"
"    print(b.x)\n"
"    print(ClassB.x)\n"
"\n"
"    # One way to print an instance variable.\n"
"    # The second generates an error, because we don't know what instance\n"
"    # to reference.\n"
"    print(a.y)\n"
"    print(ClassA.y)\n"
"\n"
"main()"

#: ../../source/chapters/14_classes/classes.rst:1094
msgid ""
"In the example above, lines 16 and 17 print out the static variable. Line 17 "
"is the \"proper\" way to do so. Unlike before, we can refer to the class "
"name when using static variables, rather than a variable that points to a "
"particular instance. Because we are working with the class name, by looking "
"at line 17 we instantly can tell we are working with a static variable. Line "
"16 could be either an instance or static variable. That confusion makes line "
"17 the better choice."
msgstr ""
"Im obigen Beispiel geben die Zeilen 16 und 17 die Klassenvariable aus. Zeile "
"17 ist der \"richtige\" Weg, dies zu tun. Anders als zuvor können wir bei "
"der Verwendung von Klassenvariablen auf den Klassennamen verweisen, anstatt "
"auf eine Variable, die auf ein bestimmtes Objekt verweist. Da wir mit dem "
"Klassennamen arbeiten, können wir in Zeile 17 sofort erkennen, dass wir mit "
"einer Klassenvariablen arbeiten. Zeile 16 kann entweder eine Objektvariable "
"oder eine Klassenvariable sein. Diese Unklarheit macht Zeile 17 zur besseren "
"Wahl."

#: ../../source/chapters/14_classes/classes.rst:1102
msgid ""
"Line 22 prints out the instance variable, just like we've done in prior "
"examples. Line 23 will generate an error because each instance of y is "
"different (it is an instance variable after all) and we aren't telling the "
"computer what instance of ``ClassA`` we are talking about."
msgstr ""
"Zeile 22 gibt die Objektvariable aus, genau wie in den vorherigen "
"Beispielen. Zeile 23 erzeugt einen Fehler, weil jedes Exemplar von ``y`` "
"anders ist (es ist schließlich eine Objektvariable) und wir dem Rechner "
"nicht sagen, um welches Exemplar von ``ClassA`` es sich handelt."

#: ../../source/chapters/14_classes/classes.rst:1108
msgid "Instance Variables Hiding Static Variables"
msgstr "Objektvariable verdecken Klassenvariablen"

#: ../../source/chapters/14_classes/classes.rst:1110
msgid ""
"This is one \"feature\" of Python I dislike. It is possible to have a static "
"variable, and an instance variable *with the same name*. Look at the example "
"below:"
msgstr ""
"Dies ist eine Eigenschaft von Python, die ich nicht mag. Es ist möglich, "
"eine Klassenvariable und eine Objektvariable *mit demselben Namen* zu haben. "
"Schaue dir das folgende Beispiel an:"

#: ../../source/chapters/14_classes/classes.rst:1114
msgid ""
"# Class with a static variable\n"
"class ClassB():\n"
"    x = 7\n"
"\n"
"def main():\n"
"    # Create a class instance\n"
"    b = ClassB()\n"
"\n"
"    # This prints 7\n"
"    print(b.x)\n"
"\n"
"    # This also prints 7\n"
"    print(ClassB.x)\n"
"\n"
"    # Set x to a new value using the class name\n"
"    ClassB.x = 8\n"
"\n"
"    # This also prints 8\n"
"    print(b.x)\n"
"\n"
"    # This prints 8\n"
"    print(ClassB.x)\n"
"\n"
"    # Set x to a new value using the instance.\n"
"    # Wait! Actually, it doesn't set x to a new value!\n"
"    # It creates a brand new variable, x. This x\n"
"    # is an instance variable. The static variable is\n"
"    # also called x. But they are two different\n"
"    # variables. This is super-confusing and is bad\n"
"    # practice.\n"
"    b.x = 9\n"
"\n"
"    # This prints 9\n"
"    print(b.x)\n"
"\n"
"    # This prints 8. NOT 9!!!\n"
"    print(ClassB.x)\n"
"\n"
"main()"
msgstr ""
"# Class with a static variable\n"
"class ClassB():\n"
"    x = 7\n"
"\n"
"def main():\n"
"    # Create a class instance\n"
"    b = ClassB()\n"
"\n"
"    # This prints 7\n"
"    print(b.x)\n"
"\n"
"    # This also prints 7\n"
"    print(ClassB.x)\n"
"\n"
"    # Set x to a new value using the class name\n"
"    ClassB.x = 8\n"
"\n"
"    # This also prints 8\n"
"    print(b.x)\n"
"\n"
"    # This prints 8\n"
"    print(ClassB.x)\n"
"\n"
"    # Set x to a new value using the instance.\n"
"    # Wait! Actually, it doesn't set x to a new value!\n"
"    # It creates a brand new variable, x. This x\n"
"    # is an instance variable. The static variable is\n"
"    # also called x. But they are two different\n"
"    # variables. This is super-confusing and is bad\n"
"    # practice.\n"
"    b.x = 9\n"
"\n"
"    # This prints 9\n"
"    print(b.x)\n"
"\n"
"    # This prints 8. NOT 9!!!\n"
"    print(ClassB.x)\n"
"\n"
"main()"

#: ../../source/chapters/14_classes/classes.rst:1157
msgid ""
"Allowing instance variables to hide static variable caused confusion for me "
"for many years!"
msgstr ""
"Das Verbergen von Klassenvariablen durch Objektvariablen hat mich viele "
"Jahre durcheinander gebracht!"
