# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, Paul Vincent Craven
# This file is distributed under the same license as the Arcade package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Arcade 2020\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-04-03 12:51-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/chapters/04_print_statement/print_statement.rst:4
msgid "The Print Function"
msgstr ""

msgid ""
".. image:: chapters\\04_print_statement\\../../images/video.svg\n"
"   :alt: Video link"
msgstr ""

msgid ".. image:: chapters\\04_print_statement\\print_snake.svg"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:15
msgid ""
"Prior to this chapter we got our computer ready to start coding in :ref"
":`chapter-setup`. We did that by installing the Python programming "
"language and an integrated development environment (IDE) called PyCharm. "
"You can think of Python as the engine, and PyCharm as the interface to "
"the engine."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:20
msgid ""
"In :ref:`version-control` we began learning `git`. Version control "
"systems allow us to share code, work on code in groups, and track changes"
" to the code. We'll use that tool to track and share your code for every "
"lab you write in this book."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:25
msgid ""
"In this chapter we'll write our first programs using the most fundamental"
" of all tools in the programmer's toolbox, the ``print`` function. This "
"function does exactly what you'd expect--it prints to the screen."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:29
msgid ""
"While a lot of programs are graphics-based, text-only programs are still "
"quite common with people that manage computers, or who do data analytics."
" Even for the graphics-based games we develop in this book, the ``print``"
" function will be a vital aid in understanding and debugging our games."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:34
msgid ""
"We aren't limited to printing to the screen. Later on in :ref:`saving-"
"high-score` we'll show how to print to a file so we can save data. "
"Programs can even print over a network connection, which is the start of "
"what's needed to learn how to do web programming."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:42
msgid "Printing \"Hello World\""
msgstr ""

msgid ".. image:: chapters\\04_print_statement\\hello_world.svg"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:53
msgid ""
"We are going to use a **function** to output text to the screen. If "
"you've taken a geometry class, you've already used the sine (**sin**) and"
" cosine (**cos**) functions. In this chapter, we are going to use the "
"**print** function."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:58
msgid ""
"In programming, we use functions *a lot*. Functions are a basic building "
"block in any computer program. Just like in math, when we use functions "
"in programming we start with a **function name**, such as sin, cos, and "
"print. Immediately after the function name is a pair of parentheses: ``( "
")``. We put any function **parameter** inside the parentheses."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:65
msgid "In the example below, we have a function, parenthesis, and a parameter:"
msgstr ""

msgid ".. image:: chapters\\04_print_statement\\function_math.svg"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:71
msgid ""
"With a ``sin`` function, we put in an angle as our parameter. With the "
"``print`` function, we put the text we want to print as a parameter:"
msgstr ""

msgid ".. image:: chapters\\04_print_statement\\function_python.svg"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:77
msgid ""
"Text *must* be enclosed in quotes, we'll explain why later in the "
":ref:`expressions` chapter."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:82
msgid "Entering Our Program"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:90
msgid ""
"Now that we've seen what the ``print`` function looks like, let's use it "
"to enter our first program."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:93
msgid ""
"The `Hello World`_ program is a simple program that just prints \"Hello "
"World\" to the screen. It is often the first program any programmer "
"creates in a new computer language."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:99
msgid ""
"First, open PyCharm. From our work in :ref:`chapter-setup` and :ref"
":`version-control` we should already have our PyCharm and our project "
"ready to go. You should be able to run PyCharm, and see a window like "
"this:"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:106
msgid ".. image:: chapters\\04_print_statement\\pycharm_1.png"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:106
msgid "PyCharm window ready for coding."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:108
msgid ""
"First click the triangle next to your project name (1), then find "
"``Scratch Work``, (2) then finally ``print_statements.py`` (3)."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:113
msgid ""
"The most frequent mistake here is to have PyCharm opened to the wrong "
"folder. Make sure your all lab folders appear inside the ``learn_arcade``"
" folder. If they don't, select the File...Open menu and reselect your "
"project folder as shown in :ref:`open-in-pycharm`. Once selected you "
"should not have to do a File...Open again for the rest of the book."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:119
msgid ""
"Once you've selected ``print_statements.py``, go ahead and type in your "
"first program:"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:122
msgid "print(\"Hello World!\")"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:128
msgid "Running Our Program"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:135
msgid ""
"After you've typed in your program, right-click on either "
"``print_statements.py`` or anywhere in the code window and select ``Run "
"'print_statements.py'``"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:140
msgid ".. image:: chapters\\04_print_statement\\pycharm_2.png"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:140
msgid "Right click on your program, then select run."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:142
msgid ""
"You should see the output from your program appear in a window at the "
"bottom of your computer:"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:147
msgid ".. image:: chapters\\04_print_statement\\pycharm_3.png"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:147
msgid "Output of our Hello World program."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:150
msgid "Errors and Warnings"
msgstr ""

msgid ".. image:: chapters\\04_print_statement\\crash.svg"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:161
msgid ""
"Programs don't always work on the first try. In fact, they rarely do. As "
"programmers, we run programs over and over until we find the right code."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:164
msgid ""
"If the computer runs into an error that it doesn't know how to handle, it"
" will generate an error and stop. Don't panic, it's no big deal. We'll "
"fix it."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:168
msgid ""
"In addition to errors where the program doesn't run at all, Python can "
"show us *warnings*. Warnings occur when the code runs, but something "
"isn't \"perfect.\""
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:172
msgid "Errors"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:179
msgid ""
"Let's create an error. Change the ``print`` function to use a capital "
"``P``: ``Print``."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:181
msgid "Print(\"Hello World!\")"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:185
msgid "Run the program. You should get something like this:"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:187
msgid ""
"Traceback (most recent call last):\n"
"  File \"C:/Users/myusername/Documents/learn_arcade/Scratch "
"Work/print_statements.py\", line 1, in <module>\n"
"    Print(\"Hello World!\")\n"
"NameError: name 'Print' is not defined\n"
"\n"
"Process finished with exit code 1"
msgstr ""

msgid "Exit Codes"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:198
msgid ""
"All computer programs return a number called an *exit code* when they are"
" done running. An exit code of 0 means the program ran without an error, "
"any other number is a signal something went wrong. It is possible to "
"write a program that runs other programs automatically, and this exit "
"code is used to track if there was an error."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:203
msgid ""
"While it may look confusing, Python is telling you that on line 1 of your"
" ``print_statements.py`` program it encountered a function named "
"``Print`` with a capital ``P``. But that function has not yet been "
"\"defined.\""
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:207
msgid ""
"Python is case-sensitive, which means ``print`` with a lower-case ``p`` "
"and ``Print`` with an upper-case ``P`` are as different as apples and "
"oranges to the computer. The lower-case ``print`` function is built into "
"the language, and Python knows exactly what to do with it. The upper-case"
" ``Print`` function is not built into the language, and Python complains "
"with a ``NameError`` that it doesn't know what this function is."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:214
msgid ""
"Let's try a different error. Go back to using ``print`` with a lower case"
" ``p``, but remove the parentheses:"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:216
msgid "print \"Hello World\""
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:220
msgid "When you run the program now, you'll get:"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:222
msgid ""
"File \"C:/Users/myusername/Documents/learn_arcade/Scratch "
"Work/print_statements.py\", line 1\n"
"    print \"Hello World!\"\n"
"                       ^\n"
"SyntaxError: Missing parentheses in call to 'print'. Did you mean "
"print(\"Hello World!\")?"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:229
msgid ""
"This is a different type of error, a *syntax error*. The term *syntax* "
"originates with human languages, not computer languages. Both human and "
"computer languages have an expected structure to them. A statement in "
"English can take the form of a noun followed by a verb. \"Rob runs.\" is "
"a valid statement, while \"Runs Rob.\" is not. The computer expects a "
"function name to be followed by parentheses. If your program doesn't "
"follow that pattern, it generates a syntax error."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:236
msgid ""
"The type of error and the line number are both important clues on how to "
"solve the mystery what caused the bug."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:240
msgid "Warnings"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:248
msgid ""
"It can be possible to write code that runs, but isn't quite perfect. For "
"example, let's take our Hello World program and add some extra spaces:"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:251
msgid "print  (\"Hello World!\")"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:255
msgid "Go ahead and run the program. It should run without any errors."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:257
msgid ""
"The Python standard is to have *no* spaces between the function name and "
"the opening parenthesis. However, this code is \"close enough\" that the "
"computer can run fine with no errors. In English, if we go to a store and"
" ask \"I'd like to buy one apples please,\" our sentence isn't "
"grammatically correct. It is close enough anyone could figure out the "
"intent."
msgstr ""

msgid "PEP-8"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:265
msgid ""
"Python has a *style-guide* which lays out how to format your code "
"properly. This style-guide is called `PEP-8`_."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:270
msgid ""
"Why fix warnings? When finding errors in code, programmers spend a lot of"
" time looking for things that are out of place. If all code is formatted "
"the same way it is easier to scan looking for problems. Any inconsistency"
" forces a programmer's brain to stop and figure out if it is important. "
"Removing those inconsistencies makes debugging easier."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:276
msgid ""
"You can find warnings in your code using PyCharm by looking at the right "
"margin. Any yellow line is a warning. You can hover over it with your "
"mouse to find the details."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:283
msgid ".. image:: chapters\\04_print_statement\\pycharm_4.png"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:283
msgid "Warnings are highlighted by yellow lines on the right side of the screen."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:285
msgid ""
"Another warning you might encounter in your first program is the Python "
"style guide states all programs are supposed to have exactly one blank "
"line at the end of the file. If you get into the habit of fixing these "
"warnings, you'll learn to write code that will be easier to maintain."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:292
msgid ""
"Warnings are not just about style. You might also get a warning about an "
"error that could occur before you run the program. For example, if "
"instead of passing a number to the ``sin()`` function, you might have "
"written code that passes in text."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:296
msgid ""
"*Weak warnings* are warnings that are mostly just about style or aren't "
"as likely to end up being errors. *Strong warnings* are code the computer"
" feels probably points to a bug that will end up being an error."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:303
msgid "Multiple Print Lines"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:310
msgid ""
"We aren't limited to one ``print`` statement. We can print multiple lines"
" of text with multiple lines of code. Let's change our Hello World "
"program to the cliché opener for melodramatic fiction:"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:314
msgid ""
"print(\"It was a dark and stormy night.\")\n"
"print(\"Suddenly a shot rang out!\")"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:319
msgid "Your output should look like:"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:321
msgid ""
"It was a dark and stormy night.\n"
"Suddenly a shot rang out!"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:329
msgid "Escape Codes"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:336
msgid ""
"If quotes are used to tell the computer the start and end of the string "
"of text you wish to print, how does a program print out a set of double "
"quotes?"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:341
msgid "A double-quote is not two quote marks."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:343
msgid "This is a double quote: ``\"``"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:344
msgid "This is a single quote: ``'``"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:345
msgid "This is two double quote marks: ``\" \"``"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:347
msgid "This code doesn't work:"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:349
msgid "print(\"Hi! This is a double quote mark: \" We use it for printing.\")"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:353
msgid "If we try to run it, we get a syntax error:"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:355
msgid ""
"File \"S:/Webserver/arcade_book/test.py\", line 1\n"
"    print(\"Hi! This is a double quote mark: \" We use it for "
"printing.\")\n"
"                                              ^\n"
"SyntaxError: invalid syntax"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:362
msgid ""
"The computer looks at the quote in the middle of the string and thinks "
"that is the end of the text. Then it has no idea what to do with the text"
" after the quote. It doesn't expect text after a closing quote, so we end"
" up with an error."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:366
msgid ""
"It is necessary to tell the computer that we want to treat that middle "
"double quote as text, not as a quote ending the string. To do this, we "
"need to use an **escape code**. An escape code is a sequence of "
"characters that can be used to print an otherwise unprintable characters."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:371
msgid ""
"All escape codes in Python start with a backslash: ``\\``. (A backslash "
"leans backwards. A forward slash ``/`` leans forward.) The escape code "
"for a double quote is ``\\\"``:"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:374
msgid "print(\"Hi! This is a double quote mark: \\\" We use it for printing.\")"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:378
msgid ""
"If we run this code, it does not print the backslash, nor does it error. "
"We get:"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:380
msgid "Hi! This is a double quote mark: \" We use it for printing."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:385
msgid ""
"Almost every language has escape codes, and many of them (C, C#, Java) "
"use backslashes just like Python."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:388
msgid "Here's another example:"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:390
msgid ""
"print(\"Audrey Hepburn once said \\\"Nothing is impossible. The word "
"itself says 'I'm Possible!'.\\\"\")"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:394
msgid "This will print:"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:396
msgid ""
"Audrey Hepburn once said \"Nothing is impossible. The word itself says "
"'I'm Possible!'.\""
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:400
msgid ""
"Because the backslash is used as part of an escape code, the backslash "
"itself must be escaped if you want to use one. For example, this code "
"does not work correctly:"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:403
msgid "print(\"The file is stored in C:\\new folder\")"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:407
msgid ""
"Why? Because ``\\n`` is an escape code. To print the backslash it is "
"necessary to escape it like so:"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:409
msgid "print(\"The file is stored in C:\\\\new folder\")"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:413
msgid ""
"There are a few other important escape codes to know. Here is a table of "
"the important escape codes:"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:416
#: ../../source/chapters/04_print_statement/print_statement.rst:446
msgid "Escape code"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:416
#: ../../source/chapters/04_print_statement/print_statement.rst:446
msgid "Description"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:418
msgid "``\\'``"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:418
msgid "Single Quote"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:419
msgid "``\\\"``"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:419
msgid "Double Quote"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:420
msgid "``\\t``"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:420
msgid "Tab"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:421
#: ../../source/chapters/04_print_statement/print_statement.rst:450
msgid "``\\r``"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:421
msgid "Carriage Return (Abbreviated as CR, move cursor to the left)"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:422
#: ../../source/chapters/04_print_statement/print_statement.rst:449
msgid "``\\n``"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:422
msgid "Linefeed (Abbreviated as LF, move cursor down)"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:425
msgid "What is a \"Carriage Return\" and a \"Linefeed\"? Try this example:"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:427
msgid "print(\"This\\nis\\nmy\\nsample.\")"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:431
msgid "The output from this command is:"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:433
msgid ""
"This\n"
"is\n"
"my\n"
"sample."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:440
msgid ""
"The ``\\n`` is a linefeed. It moves \"cursor\" where the computer will "
"print text down one line. The computer stores all text in one big long "
"line. It knows to display the text on different lines because of the "
"placement of ``\\n`` characters."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:443
msgid ""
"Before the Internet became commonplace, computers didn't agree on what "
"characters to use for line endings:"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:448
msgid "``\\r\\n``"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:448
msgid "CR+LF: Microsoft Windows"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:449
msgid "LF: UNIX based systems, and newer Macs."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:450
msgid "CR: Older Mac based systems"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:453
msgid ""
"Having different standards was annoying when computers were connected on "
"a network. The post-internet standard is to use ``\\n`` for line endings."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:456
msgid ""
"If you use an escape code, don't put spaces around it. Don't, unless, you"
" want spaces to be there. For example, this code might look better:"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:460
msgid "print(\"This \\n is \\n my \\n sample.\")"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:464
msgid "But it will print with extra spaces before the words:"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:466
msgid ""
"This\n"
" is\n"
" my\n"
" sample."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:473
msgid ""
"Just because you *can* use a ``\\n`` to print multiple lines in a single "
"``print`` statement doesn't mean you should. Often it is easier to read "
"two short ``print`` statements rather than one super-long ``print`` "
"statement with a bunch of ``\\n`` escape codes crammed into it."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:478
msgid "Triple Quotes"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:485
msgid ""
"If you have a block of text and don't want to spend a lot of time putting"
" quotes around each line, you can use triple quotes."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:488
msgid ""
"print(\"\"\"You can print\n"
"on multiple\n"
"lines using\n"
"triple\n"
"quotes.\"\"\")"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:496
msgid "This code will run and print out like this:"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:498
msgid ""
"You can print\n"
"on multiple\n"
"lines using\n"
"triple\n"
"quotes."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:506
msgid ""
"It is tempting to put in extra blank lines and indents. Don't do this "
"unless you want them in the final output. For example, the code in this "
"example looks better than the code in the previous example:"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:510
msgid ""
"print(\"\"\"You can print\n"
"        on multiple\n"
"        lines using\n"
"        triple\n"
"        quotes.\"\"\")"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:518
msgid "But the output will include all those extra spaces:"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:520
msgid ""
"You can print\n"
"         on multiple\n"
"         lines using\n"
"         triple\n"
"         quotes."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:529
msgid "Review"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:536
msgid ""
"In this chapter we learned one of the most basic building blocks of a "
"computer program is the **function**. The first function we are learning "
"about is the ``print`` function, used to output information to the "
"screen. We learned how to use that function by entering and running our "
"first program. As programs don't always work the first try, we learned "
"about **name errors** and **syntax errors**. We learned that code has a "
"style guide called **PEP-8** that defines how code should be formatted. "
"Printing multiple lines is possible using three techniques: multiple "
"print statements, **escape codes**, and **triple-quotes**. We learned "
"that escape codes can also be used to print quotes and tab characters."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:549
msgid "Review Questions"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:551
msgid "What term refers to the values between the parentheses in function?"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:552
msgid "What type of error are we likely to get, if we mistype a function name?"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:553
msgid ""
"If you forget to use parentheses when using a function, what type of "
"error will you get?"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:555
msgid "What is the name of the style-guide for Python?"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:556
msgid "What is the escape code for a double quote?"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:557
msgid "What escape code is most commonly used to go to a new line?"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:558
msgid "What will this print? ``print(\"Escape codes: \\\\\\\\\")``"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:559
msgid ""
"What do you use to print a block of text without using multiple print "
"statements or ``\\n``?"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:564
msgid "Online Coding Problems"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:566
msgid ""
"Practice on-line by completing the first set of coding problems available"
" here:"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:568
msgid "https://repl.it/community/classrooms/174286"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:570
msgid ""
"All problems beginning with ``01`` can be done with the knowledge from "
"this chapter."
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:574
msgid "Lab 1: First Program"
msgstr ""

#: ../../source/chapters/04_print_statement/print_statement.rst:576
msgid ""
"Use the computer that you've set up in :ref:`chapter-setup` and the set "
"of files you cloned in :ref:`version-control` to create your first "
"program in :ref:`lab-01`. Then learn to commit the code to the version "
"control system and turn it in."
msgstr ""

